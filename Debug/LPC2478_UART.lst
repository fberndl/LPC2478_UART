
LPC2478_UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 startup       00000044  00000000  00000000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 prog          00005290  00000048  00000048  00008048  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .data         00000848  40000000  000052d8  00010000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          000000f0  40000848  00005b20  00010848  2**2
                  ALLOC
  4 .debug_info   0000214b  00000000  00000000  00010848  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000007d5  00000000  00000000  00012993  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_loc    00000a50  00000000  00000000  00013168  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_aranges 00000108  00000000  00000000  00013bb8  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001188  00000000  00000000  00013cc0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_macinfo 000711c6  00000000  00000000  00014e48  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000008ea  00000000  00000000  0008600e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .comment      00000030  00000000  00000000  000868f8  2**0
                  CONTENTS, READONLY
 12 .ARM.attributes 00000032  00000000  00000000  00086928  2**0
                  CONTENTS, READONLY
 13 .debug_frame  0000095c  00000000  00000000  0008695c  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000020  00000000  00000000  000872b8  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section startup:

00000000 <_undf-0x20>:

.section .startup,"ax"
         .code 32
         .align 0

	b     _start						/* reset - _start			*/
   0:	ea000608 	b	1828 <start>
	ldr   pc, _undf						/* undefined - _undf		*/
   4:	e59ff014 	ldr	pc, [pc, #20]	; 20 <_undf>
	ldr   pc, _swi						/* SWI - _swi				*/
   8:	e59ff014 	ldr	pc, [pc, #20]	; 24 <_swi>
	ldr   pc, _pabt						/* program abort - _pabt	*/
   c:	e59ff014 	ldr	pc, [pc, #20]	; 28 <_pabt>
	ldr   pc, _dabt						/* data abort - _dabt		*/
  10:	e59ff014 	ldr	pc, [pc, #20]	; 2c <_dabt>
	nop									/* reserved					*/
  14:	e1a00000 	nop			; (mov r0, r0)
	ldr   pc, [pc,#-0x120]				/* IRQ - read the VIC		*/
  18:	e51ff120 	ldr	pc, [pc, #-288]	; ffffff00 <_end+0x801fff00>
	ldr   pc, _fiq						/* FIQ - _fiq				*/
  1c:	e59ff00c 	ldr	pc, [pc, #12]	; 30 <_fiq>

00000020 <_undf>:
  20:	00000034 	.word	0x00000034

00000024 <_swi>:
  24:	00000024 	.word	0x00000024

00000028 <_pabt>:
  28:	00000038 	.word	0x00000038

0000002c <_dabt>:
  2c:	0000003c 	.word	0x0000003c

00000030 <_fiq>:
  30:	00000040 	.word	0x00000040

00000034 <__undf>:
_swi:   .word _swi	//vPortYieldProcessor       /* SWI						*/
_pabt:  .word __pabt                    /* program abort			*/
_dabt:  .word __dabt                    /* data abort				*/
_fiq:   .word __fiq                     /* FIQ						*/

__undf: b     .                         /* undefined				*/
  34:	eafffffe 	b	34 <__undf>

00000038 <__pabt>:
__pabt: b     .                         /* program abort			*/
  38:	eafffffe 	b	38 <__pabt>

0000003c <__dabt>:
__dabt: b     .                         /* data abort				*/
  3c:	eafffffe 	b	3c <__dabt>

00000040 <__fiq>:
__fiq:  b     .                         /* FIQ						*/
  40:	eafffffe 	b	40 <__fiq>

Disassembly of section prog:

00000048 <UART0Handler>:
 * @brief 		Interrupt handler for UART0
 *
 * This function is called if an interrupt for UART0 occurs
 */
void UART0Handler(void)
{
      48:	e24ee004 	sub	lr, lr, #4
      4c:	e92d581f 	push	{r0, r1, r2, r3, r4, fp, ip, lr}
      50:	e28db01c 	add	fp, sp, #28
	UART_STAT[0].callback_UART();
      54:	e59f3054 	ldr	r3, [pc, #84]	; b0 <I_BIT+0x30>
      58:	e5933028 	ldr	r3, [r3, #40]	; 0x28
      5c:	e1a0e00f 	mov	lr, pc
      60:	e12fff13 	bx	r3
	if(LPC_UART0->REG3.IIR == 0x4) /* Receive Data Available */
      64:	e59f3048 	ldr	r3, [pc, #72]	; b4 <I_BIT+0x34>
      68:	e1d330b8 	ldrh	r3, [r3, #8]
      6c:	e1a03803 	lsl	r3, r3, #16
      70:	e1a03823 	lsr	r3, r3, #16
      74:	e3530004 	cmp	r3, #4
      78:	1a000005 	bne	94 <I_BIT+0x14>
	{
		if(putRecvCB(LPC_UART0, LPC_UART0->REG1.RBR)!=EOK)
      7c:	e59f3030 	ldr	r3, [pc, #48]	; b4 <I_BIT+0x34>
      80:	e5d33000 	ldrb	r3, [r3]
      84:	e20330ff 	and	r3, r3, #255	; 0xff
      88:	e59f0024 	ldr	r0, [pc, #36]	; b4 <I_BIT+0x34>
      8c:	e1a01003 	mov	r1, r3
      90:	eb0007db 	bl	2004 <putRecvCB>
		{
			/* get too much characters -
			 * some characters maybe lost */
		}
	}
	if(LPC_UART0->REG3.IIR == 0x02) /* THRE */
      94:	e59f3018 	ldr	r3, [pc, #24]	; b4 <I_BIT+0x34>
      98:	e1d330b8 	ldrh	r3, [r3, #8]
	{
		/* THRE Interrupt */
	}
	VICVectAddr = 0;		/* Acknowledge Interrupt */
      9c:	e3e030ff 	mvn	r3, #255	; 0xff
      a0:	e3a02000 	mov	r2, #0
      a4:	e5832000 	str	r2, [r3]
}
      a8:	e24bd01c 	sub	sp, fp, #28
      ac:	e8fd981f 	ldm	sp!, {r0, r1, r2, r3, r4, fp, ip, pc}^
      b0:	40000884 	.word	0x40000884
      b4:	e000c000 	.word	0xe000c000

000000b8 <UART1Handler>:
 * @brief 		Interrupt handler for UART1
 *
 * This function is called if an interrupt for UART1 occurs
 */
void UART1Handler()
{
      b8:	e24ee004 	sub	lr, lr, #4
      bc:	e92d581f 	push	{r0, r1, r2, r3, r4, fp, ip, lr}
      c0:	e28db01c 	add	fp, sp, #28
	UART_STAT[1].callback_UART();
      c4:	e59f3054 	ldr	r3, [pc, #84]	; 120 <IRQ_STACK_SIZE+0x20>
      c8:	e5933054 	ldr	r3, [r3, #84]	; 0x54
      cc:	e1a0e00f 	mov	lr, pc
      d0:	e12fff13 	bx	r3
	if(LPC_UART1->REG3.IIR == 0x4) /* Receive Data Available */
      d4:	e59f3048 	ldr	r3, [pc, #72]	; 124 <IRQ_STACK_SIZE+0x24>
      d8:	e1d330b8 	ldrh	r3, [r3, #8]
      dc:	e1a03803 	lsl	r3, r3, #16
      e0:	e1a03823 	lsr	r3, r3, #16
      e4:	e3530004 	cmp	r3, #4
      e8:	1a000005 	bne	104 <IRQ_STACK_SIZE+0x4>
	{
		if(putRecvCB(LPC_UART1, LPC_UART1->REG1.RBR)!=EOK)
      ec:	e59f3030 	ldr	r3, [pc, #48]	; 124 <IRQ_STACK_SIZE+0x24>
      f0:	e5d33000 	ldrb	r3, [r3]
      f4:	e20330ff 	and	r3, r3, #255	; 0xff
      f8:	e59f0024 	ldr	r0, [pc, #36]	; 124 <IRQ_STACK_SIZE+0x24>
      fc:	e1a01003 	mov	r1, r3
     100:	eb0007bf 	bl	2004 <putRecvCB>
		{
			/* get too much characters -
			 * some characters maybe lost */
		}
	}
	if(LPC_UART1->REG3.IIR == 0x02) /* THRE */
     104:	e59f3018 	ldr	r3, [pc, #24]	; 124 <IRQ_STACK_SIZE+0x24>
     108:	e1d330b8 	ldrh	r3, [r3, #8]
	{
		/* THRE Interrupt */
	}
	VICVectAddr = 0;		/* Acknowledge Interrupt */
     10c:	e3e030ff 	mvn	r3, #255	; 0xff
     110:	e3a02000 	mov	r2, #0
     114:	e5832000 	str	r2, [r3]
}
     118:	e24bd01c 	sub	sp, fp, #28
     11c:	e8fd981f 	ldm	sp!, {r0, r1, r2, r3, r4, fp, ip, pc}^
     120:	40000884 	.word	0x40000884
     124:	e0010000 	.word	0xe0010000

00000128 <UART2Handler>:
 * @brief 		Interrupt handler for UART2
 *
 * This function is called if an interrupt for UART2 occurs
 */
void UART2Handler()
{
     128:	e24ee004 	sub	lr, lr, #4
     12c:	e92d581f 	push	{r0, r1, r2, r3, r4, fp, ip, lr}
     130:	e28db01c 	add	fp, sp, #28
	UART_STAT[2].callback_UART();
     134:	e59f3054 	ldr	r3, [pc, #84]	; 190 <UART2Handler+0x68>
     138:	e5933080 	ldr	r3, [r3, #128]	; 0x80
     13c:	e1a0e00f 	mov	lr, pc
     140:	e12fff13 	bx	r3
	if(LPC_UART2->REG3.IIR == 0x4) /* Receive Data Available */
     144:	e59f3048 	ldr	r3, [pc, #72]	; 194 <UART2Handler+0x6c>
     148:	e1d330b8 	ldrh	r3, [r3, #8]
     14c:	e1a03803 	lsl	r3, r3, #16
     150:	e1a03823 	lsr	r3, r3, #16
     154:	e3530004 	cmp	r3, #4
     158:	1a000005 	bne	174 <UART2Handler+0x4c>
	{
		if(putRecvCB(LPC_UART2, LPC_UART2->REG1.RBR)!=EOK)
     15c:	e59f3030 	ldr	r3, [pc, #48]	; 194 <UART2Handler+0x6c>
     160:	e5d33000 	ldrb	r3, [r3]
     164:	e20330ff 	and	r3, r3, #255	; 0xff
     168:	e59f0024 	ldr	r0, [pc, #36]	; 194 <UART2Handler+0x6c>
     16c:	e1a01003 	mov	r1, r3
     170:	eb0007a3 	bl	2004 <putRecvCB>
		{
			/* get too much characters -
			 * some characters maybe lost */
		}
	}
	if(LPC_UART2->REG3.IIR == 0x02) /* THRE */
     174:	e59f3018 	ldr	r3, [pc, #24]	; 194 <UART2Handler+0x6c>
     178:	e1d330b8 	ldrh	r3, [r3, #8]
	{
		/* THRE Interrupt */
	}
	VICVectAddr = 0;		/* Acknowledge Interrupt */
     17c:	e3e030ff 	mvn	r3, #255	; 0xff
     180:	e3a02000 	mov	r2, #0
     184:	e5832000 	str	r2, [r3]
}
     188:	e24bd01c 	sub	sp, fp, #28
     18c:	e8fd981f 	ldm	sp!, {r0, r1, r2, r3, r4, fp, ip, pc}^
     190:	40000884 	.word	0x40000884
     194:	e0078000 	.word	0xe0078000

00000198 <UART3Handler>:
 * @brief		Interrupt handler for UART3
 *
 * This function is called if an interrupt for UART3 occurs
 */
void UART3Handler()
{
     198:	e24ee004 	sub	lr, lr, #4
     19c:	e92d581f 	push	{r0, r1, r2, r3, r4, fp, ip, lr}
     1a0:	e28db01c 	add	fp, sp, #28
	UART_STAT[3].callback_UART();
     1a4:	e59f3054 	ldr	r3, [pc, #84]	; 200 <UART3Handler+0x68>
     1a8:	e59330ac 	ldr	r3, [r3, #172]	; 0xac
     1ac:	e1a0e00f 	mov	lr, pc
     1b0:	e12fff13 	bx	r3
	if(LPC_UART3->REG3.IIR == 0x4) /* Receive Data Available */
     1b4:	e59f3048 	ldr	r3, [pc, #72]	; 204 <UART3Handler+0x6c>
     1b8:	e1d330b8 	ldrh	r3, [r3, #8]
     1bc:	e1a03803 	lsl	r3, r3, #16
     1c0:	e1a03823 	lsr	r3, r3, #16
     1c4:	e3530004 	cmp	r3, #4
     1c8:	1a000005 	bne	1e4 <UART3Handler+0x4c>
	{
		if(putRecvCB(LPC_UART3, LPC_UART3->REG1.RBR)!=EOK)
     1cc:	e59f3030 	ldr	r3, [pc, #48]	; 204 <UART3Handler+0x6c>
     1d0:	e5d33000 	ldrb	r3, [r3]
     1d4:	e20330ff 	and	r3, r3, #255	; 0xff
     1d8:	e59f0024 	ldr	r0, [pc, #36]	; 204 <UART3Handler+0x6c>
     1dc:	e1a01003 	mov	r1, r3
     1e0:	eb000787 	bl	2004 <putRecvCB>
		{
			/* get too much characters -
			 * some characters maybe lost */
		}
	}
	if(LPC_UART3->REG3.IIR == 0x02) /* THRE */
     1e4:	e59f3018 	ldr	r3, [pc, #24]	; 204 <UART3Handler+0x6c>
     1e8:	e1d330b8 	ldrh	r3, [r3, #8]
	{
		/* THRE Interrupt */
	}
	VICVectAddr = 0;		/* Acknowledge Interrupt */
     1ec:	e3e030ff 	mvn	r3, #255	; 0xff
     1f0:	e3a02000 	mov	r2, #0
     1f4:	e5832000 	str	r2, [r3]
}
     1f8:	e24bd01c 	sub	sp, fp, #28
     1fc:	e8fd981f 	ldm	sp!, {r0, r1, r2, r3, r4, fp, ip, pc}^
     200:	40000884 	.word	0x40000884
     204:	e007c000 	.word	0xe007c000

00000208 <uart_enable_power>:
 * 					- LPC_UART2: UART2 peripheral
 * 					- LPC_UART3: UART3 peripheral
 * @return		None
 */
static void uart_enable_power(UART_T *dev)
{
     208:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
     20c:	e28db000 	add	fp, sp, #0
     210:	e24dd00c 	sub	sp, sp, #12
     214:	e50b0008 	str	r0, [fp, #-8]
	/* Set up power for UART module */
	if(dev == LPC_UART0)
     218:	e51b2008 	ldr	r2, [fp, #-8]
     21c:	e59f3090 	ldr	r3, [pc, #144]	; 2b4 <uart_enable_power+0xac>
     220:	e1520003 	cmp	r2, r3
     224:	1a000004 	bne	23c <uart_enable_power+0x34>
	{
		/* Power */
		PCONP |= PCUART0;
     228:	e59f3088 	ldr	r3, [pc, #136]	; 2b8 <uart_enable_power+0xb0>
     22c:	e59f2084 	ldr	r2, [pc, #132]	; 2b8 <uart_enable_power+0xb0>
     230:	e5922000 	ldr	r2, [r2]
     234:	e3822008 	orr	r2, r2, #8
     238:	e5832000 	str	r2, [r3]
	}
	if(dev == LPC_UART1)
     23c:	e51b2008 	ldr	r2, [fp, #-8]
     240:	e59f3074 	ldr	r3, [pc, #116]	; 2bc <uart_enable_power+0xb4>
     244:	e1520003 	cmp	r2, r3
     248:	1a000004 	bne	260 <uart_enable_power+0x58>
	{
		/* Power */
		PCONP |= PCUART1;
     24c:	e59f3064 	ldr	r3, [pc, #100]	; 2b8 <uart_enable_power+0xb0>
     250:	e59f2060 	ldr	r2, [pc, #96]	; 2b8 <uart_enable_power+0xb0>
     254:	e5922000 	ldr	r2, [r2]
     258:	e3822010 	orr	r2, r2, #16
     25c:	e5832000 	str	r2, [r3]
	}
	if(dev == LPC_UART2)
     260:	e51b2008 	ldr	r2, [fp, #-8]
     264:	e59f3054 	ldr	r3, [pc, #84]	; 2c0 <uart_enable_power+0xb8>
     268:	e1520003 	cmp	r2, r3
     26c:	1a000004 	bne	284 <uart_enable_power+0x7c>
	{
		/* Power */
		PCONP |= PCUART2;
     270:	e59f3040 	ldr	r3, [pc, #64]	; 2b8 <uart_enable_power+0xb0>
     274:	e59f203c 	ldr	r2, [pc, #60]	; 2b8 <uart_enable_power+0xb0>
     278:	e5922000 	ldr	r2, [r2]
     27c:	e3822401 	orr	r2, r2, #16777216	; 0x1000000
     280:	e5832000 	str	r2, [r3]
	}
	if(dev == LPC_UART3)
     284:	e51b2008 	ldr	r2, [fp, #-8]
     288:	e59f3034 	ldr	r3, [pc, #52]	; 2c4 <uart_enable_power+0xbc>
     28c:	e1520003 	cmp	r2, r3
     290:	1a000004 	bne	2a8 <uart_enable_power+0xa0>
	{
		/* Power */
		PCONP |= PCUART3;
     294:	e59f301c 	ldr	r3, [pc, #28]	; 2b8 <uart_enable_power+0xb0>
     298:	e59f2018 	ldr	r2, [pc, #24]	; 2b8 <uart_enable_power+0xb0>
     29c:	e5922000 	ldr	r2, [r2]
     2a0:	e3822402 	orr	r2, r2, #33554432	; 0x2000000
     2a4:	e5832000 	str	r2, [r3]
	}
}
     2a8:	e28bd000 	add	sp, fp, #0
     2ac:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
     2b0:	e12fff1e 	bx	lr
     2b4:	e000c000 	.word	0xe000c000
     2b8:	e01fc0c4 	.word	0xe01fc0c4
     2bc:	e0010000 	.word	0xe0010000
     2c0:	e0078000 	.word	0xe0078000
     2c4:	e007c000 	.word	0xe007c000

000002c8 <uart_set_clock>:
 * 					- LPC_UART3: UART3 peripheral
 * @param[in]	divisor - Divisor for the Core Clock
 * @return		None
 */
static void uart_set_clock(UART_T *dev, uint8_t divisor)
{
     2c8:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
     2cc:	e28db000 	add	fp, sp, #0
     2d0:	e24dd014 	sub	sp, sp, #20
     2d4:	e50b0010 	str	r0, [fp, #-16]
     2d8:	e1a03001 	mov	r3, r1
     2dc:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
	uint8_t uClk;

	switch (divisor)
     2e0:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
     2e4:	e2433001 	sub	r3, r3, #1
     2e8:	e3530007 	cmp	r3, #7
     2ec:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
     2f0:	ea000013 	b	344 <uart_set_clock+0x7c>
     2f4:	00000314 	.word	0x00000314
     2f8:	00000320 	.word	0x00000320
     2fc:	00000344 	.word	0x00000344
     300:	0000032c 	.word	0x0000032c
     304:	00000344 	.word	0x00000344
     308:	00000344 	.word	0x00000344
     30c:	00000344 	.word	0x00000344
     310:	00000338 	.word	0x00000338
	{
	case 1:
		uClk = 0x01;
     314:	e3a03001 	mov	r3, #1
     318:	e54b3005 	strb	r3, [fp, #-5]
		break;
     31c:	ea00000b 	b	350 <uart_set_clock+0x88>
	case 2:
		uClk = 0x02;
     320:	e3a03002 	mov	r3, #2
     324:	e54b3005 	strb	r3, [fp, #-5]
		break;
     328:	ea000008 	b	350 <uart_set_clock+0x88>
	case 4:
		uClk = 0x00;
     32c:	e3a03000 	mov	r3, #0
     330:	e54b3005 	strb	r3, [fp, #-5]
		break;
     334:	ea000005 	b	350 <uart_set_clock+0x88>
	case 8:
		uClk = 0x03;
     338:	e3a03003 	mov	r3, #3
     33c:	e54b3005 	strb	r3, [fp, #-5]
		break;
     340:	ea000002 	b	350 <uart_set_clock+0x88>
	default:
		uClk = 0x01;
     344:	e3a03001 	mov	r3, #1
     348:	e54b3005 	strb	r3, [fp, #-5]
		break;
     34c:	e1a00000 	nop			; (mov r0, r0)
	}

	/* Set up clock UART module */
	if(dev == LPC_UART0)
     350:	e51b2010 	ldr	r2, [fp, #-16]
     354:	e59f3100 	ldr	r3, [pc, #256]	; 45c <uart_set_clock+0x194>
     358:	e1520003 	cmp	r2, r3
     35c:	1a00000b 	bne	390 <uart_set_clock+0xc8>
	{
		/* Clock */
		PCLKSEL0 &= ~((uint32_t)(3<< PCLK_UART0));
     360:	e59f30f8 	ldr	r3, [pc, #248]	; 460 <uart_set_clock+0x198>
     364:	e59f20f4 	ldr	r2, [pc, #244]	; 460 <uart_set_clock+0x198>
     368:	e5922000 	ldr	r2, [r2]
     36c:	e3c220c0 	bic	r2, r2, #192	; 0xc0
     370:	e5832000 	str	r2, [r3]
		PCLKSEL0 |= ((uint32_t)(uClk << PCLK_UART0));
     374:	e59f30e4 	ldr	r3, [pc, #228]	; 460 <uart_set_clock+0x198>
     378:	e59f20e0 	ldr	r2, [pc, #224]	; 460 <uart_set_clock+0x198>
     37c:	e5921000 	ldr	r1, [r2]
     380:	e55b2005 	ldrb	r2, [fp, #-5]
     384:	e1a02302 	lsl	r2, r2, #6
     388:	e1812002 	orr	r2, r1, r2
     38c:	e5832000 	str	r2, [r3]
	}
	if(dev == LPC_UART1)
     390:	e51b2010 	ldr	r2, [fp, #-16]
     394:	e59f30c8 	ldr	r3, [pc, #200]	; 464 <uart_set_clock+0x19c>
     398:	e1520003 	cmp	r2, r3
     39c:	1a00000b 	bne	3d0 <uart_set_clock+0x108>
	{
		/* Clock */
		PCLKSEL0 &= ~((uint32_t)(3<< PCLK_UART1));
     3a0:	e59f30b8 	ldr	r3, [pc, #184]	; 460 <uart_set_clock+0x198>
     3a4:	e59f20b4 	ldr	r2, [pc, #180]	; 460 <uart_set_clock+0x198>
     3a8:	e5922000 	ldr	r2, [r2]
     3ac:	e3c22c03 	bic	r2, r2, #768	; 0x300
     3b0:	e5832000 	str	r2, [r3]
		PCLKSEL0 |= ((uint32_t)(uClk << PCLK_UART1));
     3b4:	e59f30a4 	ldr	r3, [pc, #164]	; 460 <uart_set_clock+0x198>
     3b8:	e59f20a0 	ldr	r2, [pc, #160]	; 460 <uart_set_clock+0x198>
     3bc:	e5921000 	ldr	r1, [r2]
     3c0:	e55b2005 	ldrb	r2, [fp, #-5]
     3c4:	e1a02402 	lsl	r2, r2, #8
     3c8:	e1812002 	orr	r2, r1, r2
     3cc:	e5832000 	str	r2, [r3]
	}
	if(dev == LPC_UART2)
     3d0:	e51b2010 	ldr	r2, [fp, #-16]
     3d4:	e59f308c 	ldr	r3, [pc, #140]	; 468 <uart_set_clock+0x1a0>
     3d8:	e1520003 	cmp	r2, r3
     3dc:	1a00000b 	bne	410 <uart_set_clock+0x148>
	{
		/* Clock */
		PCLKSEL1 &= ~((uint32_t)(3<< PCLK_UART2));
     3e0:	e59f3084 	ldr	r3, [pc, #132]	; 46c <uart_set_clock+0x1a4>
     3e4:	e59f2080 	ldr	r2, [pc, #128]	; 46c <uart_set_clock+0x1a4>
     3e8:	e5922000 	ldr	r2, [r2]
     3ec:	e3c22803 	bic	r2, r2, #196608	; 0x30000
     3f0:	e5832000 	str	r2, [r3]
		PCLKSEL1 |= ((uint32_t)(uClk << PCLK_UART2));
     3f4:	e59f3070 	ldr	r3, [pc, #112]	; 46c <uart_set_clock+0x1a4>
     3f8:	e59f206c 	ldr	r2, [pc, #108]	; 46c <uart_set_clock+0x1a4>
     3fc:	e5921000 	ldr	r1, [r2]
     400:	e55b2005 	ldrb	r2, [fp, #-5]
     404:	e1a02802 	lsl	r2, r2, #16
     408:	e1812002 	orr	r2, r1, r2
     40c:	e5832000 	str	r2, [r3]
	}
	if(dev == LPC_UART3)
     410:	e51b2010 	ldr	r2, [fp, #-16]
     414:	e59f3054 	ldr	r3, [pc, #84]	; 470 <uart_set_clock+0x1a8>
     418:	e1520003 	cmp	r2, r3
     41c:	1a00000b 	bne	450 <uart_set_clock+0x188>
	{
		/* Clock */
		PCLKSEL1 &= ~((uint32_t)(3<< PCLK_UART3));
     420:	e59f3044 	ldr	r3, [pc, #68]	; 46c <uart_set_clock+0x1a4>
     424:	e59f2040 	ldr	r2, [pc, #64]	; 46c <uart_set_clock+0x1a4>
     428:	e5922000 	ldr	r2, [r2]
     42c:	e3c22703 	bic	r2, r2, #786432	; 0xc0000
     430:	e5832000 	str	r2, [r3]
		PCLKSEL1 |= ((uint32_t)(uClk << PCLK_UART3));
     434:	e59f3030 	ldr	r3, [pc, #48]	; 46c <uart_set_clock+0x1a4>
     438:	e59f202c 	ldr	r2, [pc, #44]	; 46c <uart_set_clock+0x1a4>
     43c:	e5921000 	ldr	r1, [r2]
     440:	e55b2005 	ldrb	r2, [fp, #-5]
     444:	e1a02902 	lsl	r2, r2, #18
     448:	e1812002 	orr	r2, r1, r2
     44c:	e5832000 	str	r2, [r3]
	}
}
     450:	e28bd000 	add	sp, fp, #0
     454:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
     458:	e12fff1e 	bx	lr
     45c:	e000c000 	.word	0xe000c000
     460:	e01fc1a8 	.word	0xe01fc1a8
     464:	e0010000 	.word	0xe0010000
     468:	e0078000 	.word	0xe0078000
     46c:	e01fc1ac 	.word	0xe01fc1ac
     470:	e007c000 	.word	0xe007c000

00000474 <getFRval>:
 * @param[in]	mulval		- found register value in LUT
 *
 * @return		EOK if useful values are found in LUT
 * 				EINTERNAL if no useful value is stored in LUT
 */
static int getFRval(double FRest, float *divaddval, float *mulval) {
     474:	e92d4830 	push	{r4, r5, fp, lr}
     478:	e28db00c 	add	fp, sp, #12
     47c:	e24dd020 	sub	sp, sp, #32
     480:	e50b0024 	str	r0, [fp, #-36]	; 0xffffffdc
     484:	e50b1020 	str	r1, [fp, #-32]	; 0xffffffe0
     488:	e50b2028 	str	r2, [fp, #-40]	; 0xffffffd8
     48c:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4
	float lastdiff = -1;
     490:	e59f31b8 	ldr	r3, [pc, #440]	; 650 <getFRval+0x1dc>
     494:	e50b3010 	str	r3, [fp, #-16]
	float thisdiff;
	int index;

	for (index = 0; index<BR_LUT_SIZE; index++)
     498:	e3a03000 	mov	r3, #0
     49c:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
     4a0:	ea000062 	b	630 <getFRval+0x1bc>
	{
		/*Difference between LUT and estimated value*/
		if (FRest > FRLut[index])
     4a4:	e59f31a8 	ldr	r3, [pc, #424]	; 654 <getFRval+0x1e0>
     4a8:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
     4ac:	e7933102 	ldr	r3, [r3, r2, lsl #2]
     4b0:	e1a00003 	mov	r0, r3
     4b4:	eb000c77 	bl	3698 <__aeabi_f2d>
     4b8:	e1a03000 	mov	r3, r0
     4bc:	e1a04001 	mov	r4, r1
     4c0:	e3a02001 	mov	r2, #1
     4c4:	e1a05002 	mov	r5, r2
     4c8:	e1a00003 	mov	r0, r3
     4cc:	e1a01004 	mov	r1, r4
     4d0:	e24b3024 	sub	r3, fp, #36	; 0x24
     4d4:	e893000c 	ldm	r3, {r2, r3}
     4d8:	eb000cd4 	bl	3830 <__aeabi_dcmplt>
     4dc:	e1a03000 	mov	r3, r0
     4e0:	e3530000 	cmp	r3, #0
     4e4:	1a000001 	bne	4f0 <getFRval+0x7c>
     4e8:	e3a03000 	mov	r3, #0
     4ec:	e1a05003 	mov	r5, r3
     4f0:	e20530ff 	and	r3, r5, #255	; 0xff
     4f4:	e3530000 	cmp	r3, #0
     4f8:	0a000013 	beq	54c <getFRval+0xd8>
		{
			thisdiff = FRest - FRLut[index];
     4fc:	e59f3150 	ldr	r3, [pc, #336]	; 654 <getFRval+0x1e0>
     500:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
     504:	e7933102 	ldr	r3, [r3, r2, lsl #2]
     508:	e1a00003 	mov	r0, r3
     50c:	eb000c61 	bl	3698 <__aeabi_f2d>
     510:	e1a03000 	mov	r3, r0
     514:	e1a04001 	mov	r4, r1
     518:	e24b1024 	sub	r1, fp, #36	; 0x24
     51c:	e8910003 	ldm	r1, {r0, r1}
     520:	e1a02003 	mov	r2, r3
     524:	e1a03004 	mov	r3, r4
     528:	eb000b82 	bl	3338 <__aeabi_dsub>
     52c:	e1a03000 	mov	r3, r0
     530:	e1a04001 	mov	r4, r1
     534:	e1a00003 	mov	r0, r3
     538:	e1a01004 	mov	r1, r4
     53c:	eb000cd3 	bl	3890 <__aeabi_d2f>
     540:	e1a03000 	mov	r3, r0
     544:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
     548:	ea000012 	b	598 <getFRval+0x124>
		}
		else
		{
			thisdiff = FRLut[index] - FRest;
     54c:	e59f3100 	ldr	r3, [pc, #256]	; 654 <getFRval+0x1e0>
     550:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
     554:	e7933102 	ldr	r3, [r3, r2, lsl #2]
     558:	e1a00003 	mov	r0, r3
     55c:	eb000c4d 	bl	3698 <__aeabi_f2d>
     560:	e1a03000 	mov	r3, r0
     564:	e1a04001 	mov	r4, r1
     568:	e1a00003 	mov	r0, r3
     56c:	e1a01004 	mov	r1, r4
     570:	e24b3024 	sub	r3, fp, #36	; 0x24
     574:	e893000c 	ldm	r3, {r2, r3}
     578:	eb000b6e 	bl	3338 <__aeabi_dsub>
     57c:	e1a03000 	mov	r3, r0
     580:	e1a04001 	mov	r4, r1
     584:	e1a00003 	mov	r0, r3
     588:	e1a01004 	mov	r1, r4
     58c:	eb000cbf 	bl	3890 <__aeabi_d2f>
     590:	e1a03000 	mov	r3, r0
     594:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
		* index=2 FR=1.071 thisdiff=0.004 lastdiff=0.008
		* index=3 FR=1.077 thisdiff=0.002 lastdiff=0.004
		* index=4 FR=1.083 thisdiff=0.008 lastdiff=0.002
		*
		*/
		if (lastdiff != -1 && thisdiff > lastdiff)
     598:	e51b0010 	ldr	r0, [fp, #-16]
     59c:	e59f10ac 	ldr	r1, [pc, #172]	; 650 <getFRval+0x1dc>
     5a0:	eb000e72 	bl	3f70 <__aeabi_fcmpeq>
     5a4:	e1a03000 	mov	r3, r0
     5a8:	e3530000 	cmp	r3, #0
     5ac:	1a00001a 	bne	61c <getFRval+0x1a8>
     5b0:	e3a03001 	mov	r3, #1
     5b4:	e1a04003 	mov	r4, r3
     5b8:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
     5bc:	e51b1010 	ldr	r1, [fp, #-16]
     5c0:	eb000e82 	bl	3fd0 <__aeabi_fcmpgt>
     5c4:	e1a03000 	mov	r3, r0
     5c8:	e3530000 	cmp	r3, #0
     5cc:	1a000001 	bne	5d8 <getFRval+0x164>
     5d0:	e3a03000 	mov	r3, #0
     5d4:	e1a04003 	mov	r4, r3
     5d8:	e20430ff 	and	r3, r4, #255	; 0xff
     5dc:	e3530000 	cmp	r3, #0
     5e0:	0a00000d 	beq	61c <getFRval+0x1a8>
		{
			/* return fractional calc values */
			*divaddval = DIVADDVALLut[index - 1];
     5e4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
     5e8:	e2432001 	sub	r2, r3, #1
     5ec:	e59f3064 	ldr	r3, [pc, #100]	; 658 <getFRval+0x1e4>
     5f0:	e7932102 	ldr	r2, [r3, r2, lsl #2]
     5f4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
     5f8:	e5832000 	str	r2, [r3]
			*mulval = MULVALLut[index - 1];
     5fc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
     600:	e2432001 	sub	r2, r3, #1
     604:	e59f3050 	ldr	r3, [pc, #80]	; 65c <getFRval+0x1e8>
     608:	e7932102 	ldr	r2, [r3, r2, lsl #2]
     60c:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
     610:	e5832000 	str	r2, [r3]
			return EOK;
     614:	e3a03000 	mov	r3, #0
     618:	ea000008 	b	640 <getFRval+0x1cc>
		}
		lastdiff = thisdiff;
     61c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
     620:	e50b3010 	str	r3, [fp, #-16]
static int getFRval(double FRest, float *divaddval, float *mulval) {
	float lastdiff = -1;
	float thisdiff;
	int index;

	for (index = 0; index<BR_LUT_SIZE; index++)
     624:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
     628:	e2833001 	add	r3, r3, #1
     62c:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
     630:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
     634:	e3530047 	cmp	r3, #71	; 0x47
     638:	daffff99 	ble	4a4 <getFRval+0x30>
			*mulval = MULVALLut[index - 1];
			return EOK;
		}
		lastdiff = thisdiff;
	}
	return EINTERNAL;
     63c:	e3e03000 	mvn	r3, #0
}
     640:	e1a00003 	mov	r0, r3
     644:	e24bd00c 	sub	sp, fp, #12
     648:	e8bd4830 	pop	{r4, r5, fp, lr}
     64c:	e12fff1e 	bx	lr
     650:	bf800000 	.word	0xbf800000
     654:	00004e54 	.word	0x00004e54
     658:	00004f74 	.word	0x00004f74
     65c:	00005094 	.word	0x00005094

00000660 <uart_set_divisors>:
 *
 * @return		EOK if successful
 * 				EINTERNAL if not successful
 */
static int32_t uart_set_divisors(UART_T *dev, uint32_t baudrate, uint8_t udivisor)
{
     660:	e92d4830 	push	{r4, r5, fp, lr}
     664:	e28db00c 	add	fp, sp, #12
     668:	e24dd028 	sub	sp, sp, #40	; 0x28
     66c:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
     670:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
     674:	e1a03002 	mov	r3, r2
     678:	e54b302d 	strb	r3, [fp, #-45]	; 0xffffffd3
	uint16_t DLest;
#ifdef DEBUG
	uint16_t uartBaudRate;
#endif
	float  divaddval, mulval;
	uint8_t dlm=0, dll=0;
     67c:	e3a03000 	mov	r3, #0
     680:	e54b300f 	strb	r3, [fp, #-15]
     684:	e3a03000 	mov	r3, #0
     688:	e54b3010 	strb	r3, [fp, #-16]
	uint8_t	 cnt;

	/* calculate peripheral clock */
	PCLK = CLK_HZ / udivisor;
     68c:	e55b302d 	ldrb	r3, [fp, #-45]	; 0xffffffd3
     690:	e59f0360 	ldr	r0, [pc, #864]	; 9f8 <uart_set_divisors+0x398>
     694:	e1a01003 	mov	r1, r3
     698:	eb000ad1 	bl	31e4 <__aeabi_idiv>
     69c:	e1a03000 	mov	r3, r0
     6a0:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4

	/* check if result of DLest calculation
	 *  is an integer, then DIVADDVAL = 0, MULVAL = 1 */
	if( ( PCLK % ( 16 * baudrate ) ) == 0)
     6a4:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
     6a8:	e1a03203 	lsl	r3, r3, #4
     6ac:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
     6b0:	e1a00002 	mov	r0, r2
     6b4:	e1a01003 	mov	r1, r3
     6b8:	eb000ac1 	bl	31c4 <__aeabi_uidivmod>
     6bc:	e1a03001 	mov	r3, r1
     6c0:	e3530000 	cmp	r3, #0
     6c4:	1a00001b 	bne	738 <uart_set_divisors+0xd8>
	{
		divaddval = 0;
     6c8:	e59f332c 	ldr	r3, [pc, #812]	; 9fc <uart_set_divisors+0x39c>
     6cc:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
		mulval = 1;
     6d0:	e59f3328 	ldr	r3, [pc, #808]	; a00 <uart_set_divisors+0x3a0>
     6d4:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
		DLest = (uint32_t)(PCLK / (float)(16 * baudrate));
     6d8:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
     6dc:	eb000d05 	bl	3af8 <__aeabi_ui2f>
     6e0:	e1a04000 	mov	r4, r0
     6e4:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
     6e8:	e1a03203 	lsl	r3, r3, #4
     6ec:	e1a00003 	mov	r0, r3
     6f0:	eb000d00 	bl	3af8 <__aeabi_ui2f>
     6f4:	e1a03000 	mov	r3, r0
     6f8:	e1a00004 	mov	r0, r4
     6fc:	e1a01003 	mov	r1, r3
     700:	eb000d9b 	bl	3d74 <__aeabi_fdiv>
     704:	e1a03000 	mov	r3, r0
     708:	e1a00003 	mov	r0, r3
     70c:	eb000e35 	bl	3fe8 <__aeabi_f2uiz>
     710:	e1a03000 	mov	r3, r0
     714:	e14b30be 	strh	r3, [fp, #-14]
		dlm = DLest / 256;
     718:	e15b30be 	ldrh	r3, [fp, #-14]
     71c:	e1a03423 	lsr	r3, r3, #8
     720:	e1a03803 	lsl	r3, r3, #16
     724:	e1a03823 	lsr	r3, r3, #16
     728:	e54b300f 	strb	r3, [fp, #-15]
		dll = DLest % 256;
     72c:	e15b30be 	ldrh	r3, [fp, #-14]
     730:	e54b3010 	strb	r3, [fp, #-16]
     734:	ea000083 	b	948 <uart_set_divisors+0x2e8>
	}
	else
	{
		float FRest = 1.5;
     738:	e59f32c4 	ldr	r3, [pc, #708]	; a04 <uart_set_divisors+0x3a4>
     73c:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8

		for(cnt = 0; cnt < 9; cnt++)
     740:	e3a03000 	mov	r3, #0
     744:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
     748:	ea000065 	b	8e4 <uart_set_divisors+0x284>
		{
			/* calculate DLest */
			DLest = (uint32_t)(PCLK / (float)(16 * baudrate * FRest));
     74c:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
     750:	eb000ce8 	bl	3af8 <__aeabi_ui2f>
     754:	e1a04000 	mov	r4, r0
     758:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
     75c:	e1a03203 	lsl	r3, r3, #4
     760:	e1a00003 	mov	r0, r3
     764:	eb000ce3 	bl	3af8 <__aeabi_ui2f>
     768:	e1a03000 	mov	r3, r0
     76c:	e1a00003 	mov	r0, r3
     770:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
     774:	eb000d18 	bl	3bdc <__aeabi_fmul>
     778:	e1a03000 	mov	r3, r0
     77c:	e1a00004 	mov	r0, r4
     780:	e1a01003 	mov	r1, r3
     784:	eb000d7a 	bl	3d74 <__aeabi_fdiv>
     788:	e1a03000 	mov	r3, r0
     78c:	e1a00003 	mov	r0, r3
     790:	eb000e14 	bl	3fe8 <__aeabi_f2uiz>
     794:	e1a03000 	mov	r3, r0
     798:	e14b30be 	strh	r3, [fp, #-14]
			FRest = (float)((float)PCLK / (float)(16 * baudrate * DLest));
     79c:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
     7a0:	eb000cd4 	bl	3af8 <__aeabi_ui2f>
     7a4:	e1a04000 	mov	r4, r0
     7a8:	e15b30be 	ldrh	r3, [fp, #-14]
     7ac:	e51b202c 	ldr	r2, [fp, #-44]	; 0xffffffd4
     7b0:	e0030392 	mul	r3, r2, r3
     7b4:	e1a03203 	lsl	r3, r3, #4
     7b8:	e1a00003 	mov	r0, r3
     7bc:	eb000ccd 	bl	3af8 <__aeabi_ui2f>
     7c0:	e1a03000 	mov	r3, r0
     7c4:	e1a00004 	mov	r0, r4
     7c8:	e1a01003 	mov	r1, r3
     7cc:	eb000d68 	bl	3d74 <__aeabi_fdiv>
     7d0:	e1a03000 	mov	r3, r0
     7d4:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8

			/* if FRest is out of range */
			if( (FRest>1.9) || (FRest<1.1) )
     7d8:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
     7dc:	eb000bad 	bl	3698 <__aeabi_f2d>
     7e0:	e1a03000 	mov	r3, r0
     7e4:	e1a04001 	mov	r4, r1
     7e8:	e3a02001 	mov	r2, #1
     7ec:	e1a05002 	mov	r5, r2
     7f0:	e1a00003 	mov	r0, r3
     7f4:	e1a01004 	mov	r1, r4
     7f8:	e28f3f7a 	add	r3, pc, #488	; 0x1e8
     7fc:	e893000c 	ldm	r3, {r2, r3}
     800:	eb000c1c 	bl	3878 <__aeabi_dcmpgt>
     804:	e1a03000 	mov	r3, r0
     808:	e3530000 	cmp	r3, #0
     80c:	1a000001 	bne	818 <uart_set_divisors+0x1b8>
     810:	e3a03000 	mov	r3, #0
     814:	e1a05003 	mov	r5, r3
     818:	e20530ff 	and	r3, r5, #255	; 0xff
     81c:	e3530000 	cmp	r3, #0
     820:	1a000012 	bne	870 <uart_set_divisors+0x210>
     824:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
     828:	eb000b9a 	bl	3698 <__aeabi_f2d>
     82c:	e1a03000 	mov	r3, r0
     830:	e1a04001 	mov	r4, r1
     834:	e3a02001 	mov	r2, #1
     838:	e1a05002 	mov	r5, r2
     83c:	e1a00003 	mov	r0, r3
     840:	e1a01004 	mov	r1, r4
     844:	e28f3f69 	add	r3, pc, #420	; 0x1a4
     848:	e893000c 	ldm	r3, {r2, r3}
     84c:	eb000bf7 	bl	3830 <__aeabi_dcmplt>
     850:	e1a03000 	mov	r3, r0
     854:	e3530000 	cmp	r3, #0
     858:	1a000001 	bne	864 <uart_set_divisors+0x204>
     85c:	e3a03000 	mov	r3, #0
     860:	e1a05003 	mov	r5, r3
     864:	e20530ff 	and	r3, r5, #255	; 0xff
     868:	e3530000 	cmp	r3, #0
     86c:	0a00001f 	beq	8f0 <uart_set_divisors+0x290>
			{
				/* choose another FRest from 1.1 to 1.9 */
				FRest = 1.1 + (cnt / 10);
     870:	e55b2011 	ldrb	r2, [fp, #-17]	; 0xffffffef
     874:	e59f318c 	ldr	r3, [pc, #396]	; a08 <uart_set_divisors+0x3a8>
     878:	e0831392 	umull	r1, r3, r2, r3
     87c:	e1a031a3 	lsr	r3, r3, #3
     880:	e20330ff 	and	r3, r3, #255	; 0xff
     884:	e1a00003 	mov	r0, r3
     888:	eb000b78 	bl	3670 <__aeabi_i2d>
     88c:	e1a03000 	mov	r3, r0
     890:	e1a04001 	mov	r4, r1
     894:	e1a00003 	mov	r0, r3
     898:	e1a01004 	mov	r1, r4
     89c:	e28f3f53 	add	r3, pc, #332	; 0x14c
     8a0:	e893000c 	ldm	r3, {r2, r3}
     8a4:	eb000aa4 	bl	333c <__adddf3>
     8a8:	e1a03000 	mov	r3, r0
     8ac:	e1a04001 	mov	r4, r1
     8b0:	e1a00003 	mov	r0, r3
     8b4:	e1a01004 	mov	r1, r4
     8b8:	eb000bf4 	bl	3890 <__aeabi_d2f>
     8bc:	e1a03000 	mov	r3, r0
     8c0:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
				/* if FRest above 1.9, then end with an error */
				if(cnt == 9)
     8c4:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
     8c8:	e3530009 	cmp	r3, #9
     8cc:	1a000001 	bne	8d8 <uart_set_divisors+0x278>
				{
					/* cannot find correct values */
					return ECALCBAUD;
     8d0:	e3e03002 	mvn	r3, #2
     8d4:	ea00003f 	b	9d8 <uart_set_divisors+0x378>
	}
	else
	{
		float FRest = 1.5;

		for(cnt = 0; cnt < 9; cnt++)
     8d8:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
     8dc:	e2833001 	add	r3, r3, #1
     8e0:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
     8e4:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
     8e8:	e3530008 	cmp	r3, #8
     8ec:	9affff96 	bls	74c <uart_set_divisors+0xec>
				break;
			}
		}

		/* found FRest ,lookup Table from Datasheet p.440*/
		if(getFRval(FRest, &divaddval, &mulval)!=EOK)
     8f0:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
     8f4:	eb000b67 	bl	3698 <__aeabi_f2d>
     8f8:	e1a03000 	mov	r3, r0
     8fc:	e1a04001 	mov	r4, r1
     900:	e24b2020 	sub	r2, fp, #32
     904:	e24bc024 	sub	ip, fp, #36	; 0x24
     908:	e1a00003 	mov	r0, r3
     90c:	e1a01004 	mov	r1, r4
     910:	e1a0300c 	mov	r3, ip
     914:	ebfffed6 	bl	474 <getFRval>
     918:	e1a03000 	mov	r3, r0
     91c:	e3530000 	cmp	r3, #0
     920:	0a000001 	beq	92c <uart_set_divisors+0x2cc>
		{
			return EINTERNAL;
     924:	e3e03000 	mvn	r3, #0
     928:	ea00002a 	b	9d8 <uart_set_divisors+0x378>
		/*Calc actual baud rate achieved*/
		uartBaudRate = (uint16_t)(PCLK/ (16 * DLest*(1 + (divaddval / mulval))));
#endif

		/* DLM = DLest[15:8] and DLL = DLest[7:0] */
		dlm = (DLest & 0xFF00) >> 8;
     92c:	e15b30be 	ldrh	r3, [fp, #-14]
     930:	e1a03423 	lsr	r3, r3, #8
     934:	e1a03803 	lsl	r3, r3, #16
     938:	e1a03823 	lsr	r3, r3, #16
     93c:	e54b300f 	strb	r3, [fp, #-15]
		dll = (DLest & 0x00FF);
     940:	e15b30be 	ldrh	r3, [fp, #-14]
     944:	e54b3010 	strb	r3, [fp, #-16]
	}

	/* Set up fractional UART module */
	dev->LCR = UART_LCR_DLAB_EN; /*Enable access to DLM,DLL and FDR*/
     948:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
     94c:	e3e0207f 	mvn	r2, #127	; 0x7f
     950:	e5c3200c 	strb	r2, [r3, #12]
    dev->REG2.DLM = dlm;
     954:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
     958:	e55b200f 	ldrb	r2, [fp, #-15]
     95c:	e5c32004 	strb	r2, [r3, #4]
	dev->REG1.DLL = dll;
     960:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
     964:	e55b2010 	ldrb	r2, [fp, #-16]
     968:	e5c32000 	strb	r2, [r3]
	dev->FDR = (((uint8_t)mulval) << 4) | (uint8_t)divaddval;
     96c:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
     970:	e1a00003 	mov	r0, r3
     974:	eb000d9b 	bl	3fe8 <__aeabi_f2uiz>
     978:	e1a03000 	mov	r3, r0
     97c:	e20330ff 	and	r3, r3, #255	; 0xff
     980:	e1a03203 	lsl	r3, r3, #4
     984:	e20340ff 	and	r4, r3, #255	; 0xff
     988:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
     98c:	e1a00003 	mov	r0, r3
     990:	eb000d94 	bl	3fe8 <__aeabi_f2uiz>
     994:	e1a03000 	mov	r3, r0
     998:	e20330ff 	and	r3, r3, #255	; 0xff
     99c:	e20330ff 	and	r3, r3, #255	; 0xff
     9a0:	e1a02004 	mov	r2, r4
     9a4:	e1823003 	orr	r3, r2, r3
     9a8:	e20330ff 	and	r3, r3, #255	; 0xff
     9ac:	e20320ff 	and	r2, r3, #255	; 0xff
     9b0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
     9b4:	e5c32028 	strb	r2, [r3, #40]	; 0x28
	dev->LCR &= ~UART_LCR_DLAB_EN; /*DLAB = 0*/
     9b8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
     9bc:	e5d3300c 	ldrb	r3, [r3, #12]
     9c0:	e20330ff 	and	r3, r3, #255	; 0xff
     9c4:	e203307f 	and	r3, r3, #127	; 0x7f
     9c8:	e20320ff 	and	r2, r3, #255	; 0xff
     9cc:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
     9d0:	e5c3200c 	strb	r2, [r3, #12]

	return EOK;
     9d4:	e3a03000 	mov	r3, #0
}
     9d8:	e1a00003 	mov	r0, r3
     9dc:	e24bd00c 	sub	sp, fp, #12
     9e0:	e8bd4830 	pop	{r4, r5, fp, lr}
     9e4:	e12fff1e 	bx	lr
     9e8:	66666666 	.word	0x66666666
     9ec:	3ffe6666 	.word	0x3ffe6666
     9f0:	9999999a 	.word	0x9999999a
     9f4:	3ff19999 	.word	0x3ff19999
     9f8:	02dc6c00 	.word	0x02dc6c00
     9fc:	00000000 	.word	0x00000000
     a00:	3f800000 	.word	0x3f800000
     a04:	3fc00000 	.word	0x3fc00000
     a08:	cccccccd 	.word	0xcccccccd

00000a0c <uart_installIrq>:

static int32_t uart_installIrq(UART_T *dev, void(*callback)(void))
{
     a0c:	e92d4800 	push	{fp, lr}
     a10:	e28db004 	add	fp, sp, #4
     a14:	e24dd008 	sub	sp, sp, #8
     a18:	e50b0008 	str	r0, [fp, #-8]
     a1c:	e50b100c 	str	r1, [fp, #-12]
	if(dev == LPC_UART0)
     a20:	e51b2008 	ldr	r2, [fp, #-8]
     a24:	e59f3108 	ldr	r3, [pc, #264]	; b34 <uart_installIrq+0x128>
     a28:	e1520003 	cmp	r2, r3
     a2c:	1a00000b 	bne	a60 <uart_installIrq+0x54>
		{
			if ( install_irq( UART0_INT, UART0Handler, 5  ) == FALSE )
     a30:	e3a00006 	mov	r0, #6
     a34:	e59f10fc 	ldr	r1, [pc, #252]	; b38 <uart_installIrq+0x12c>
     a38:	e3a02005 	mov	r2, #5
     a3c:	eb000778 	bl	2824 <install_irq>
     a40:	e1a03000 	mov	r3, r0
     a44:	e3530000 	cmp	r3, #0
     a48:	1a000001 	bne	a54 <uart_installIrq+0x48>
			{
				return EINTERNAL;
     a4c:	e3e03000 	mvn	r3, #0
     a50:	ea000033 	b	b24 <uart_installIrq+0x118>
			}
			UART_STAT[0].callback_UART = callback;
     a54:	e59f30e0 	ldr	r3, [pc, #224]	; b3c <uart_installIrq+0x130>
     a58:	e51b200c 	ldr	r2, [fp, #-12]
     a5c:	e5832028 	str	r2, [r3, #40]	; 0x28
		}
		if(dev == LPC_UART1)
     a60:	e51b2008 	ldr	r2, [fp, #-8]
     a64:	e59f30d4 	ldr	r3, [pc, #212]	; b40 <uart_installIrq+0x134>
     a68:	e1520003 	cmp	r2, r3
     a6c:	1a00000b 	bne	aa0 <uart_installIrq+0x94>
		{
			if ( install_irq( UART1_INT, UART1Handler, 3  ) == FALSE )
     a70:	e3a00007 	mov	r0, #7
     a74:	e59f10c8 	ldr	r1, [pc, #200]	; b44 <uart_installIrq+0x138>
     a78:	e3a02003 	mov	r2, #3
     a7c:	eb000768 	bl	2824 <install_irq>
     a80:	e1a03000 	mov	r3, r0
     a84:	e3530000 	cmp	r3, #0
     a88:	1a000001 	bne	a94 <uart_installIrq+0x88>
			{
				return EINTERNAL;
     a8c:	e3e03000 	mvn	r3, #0
     a90:	ea000023 	b	b24 <uart_installIrq+0x118>
			}
			UART_STAT[1].callback_UART = callback;
     a94:	e59f30a0 	ldr	r3, [pc, #160]	; b3c <uart_installIrq+0x130>
     a98:	e51b200c 	ldr	r2, [fp, #-12]
     a9c:	e5832054 	str	r2, [r3, #84]	; 0x54
		}
		if(dev == LPC_UART2)
     aa0:	e51b2008 	ldr	r2, [fp, #-8]
     aa4:	e59f309c 	ldr	r3, [pc, #156]	; b48 <uart_installIrq+0x13c>
     aa8:	e1520003 	cmp	r2, r3
     aac:	1a00000b 	bne	ae0 <uart_installIrq+0xd4>
		{
			if ( install_irq( UART2_INT, UART2Handler, 4  ) == FALSE )
     ab0:	e3a0001c 	mov	r0, #28
     ab4:	e59f1090 	ldr	r1, [pc, #144]	; b4c <uart_installIrq+0x140>
     ab8:	e3a02004 	mov	r2, #4
     abc:	eb000758 	bl	2824 <install_irq>
     ac0:	e1a03000 	mov	r3, r0
     ac4:	e3530000 	cmp	r3, #0
     ac8:	1a000001 	bne	ad4 <uart_installIrq+0xc8>
			{
				return EINTERNAL;
     acc:	e3e03000 	mvn	r3, #0
     ad0:	ea000013 	b	b24 <uart_installIrq+0x118>
			}
			UART_STAT[2].callback_UART = callback;
     ad4:	e59f3060 	ldr	r3, [pc, #96]	; b3c <uart_installIrq+0x130>
     ad8:	e51b200c 	ldr	r2, [fp, #-12]
     adc:	e5832080 	str	r2, [r3, #128]	; 0x80
		}
		if(dev == LPC_UART3)
     ae0:	e51b2008 	ldr	r2, [fp, #-8]
     ae4:	e59f3064 	ldr	r3, [pc, #100]	; b50 <uart_installIrq+0x144>
     ae8:	e1520003 	cmp	r2, r3
     aec:	1a00000b 	bne	b20 <uart_installIrq+0x114>
		{
			if ( install_irq( UART3_INT, UART3Handler, HIGHEST_PRIORITY  ) == FALSE )
     af0:	e3a0001d 	mov	r0, #29
     af4:	e59f1058 	ldr	r1, [pc, #88]	; b54 <uart_installIrq+0x148>
     af8:	e3a02001 	mov	r2, #1
     afc:	eb000748 	bl	2824 <install_irq>
     b00:	e1a03000 	mov	r3, r0
     b04:	e3530000 	cmp	r3, #0
     b08:	1a000001 	bne	b14 <uart_installIrq+0x108>
			{
				return EINTERNAL;
     b0c:	e3e03000 	mvn	r3, #0
     b10:	ea000003 	b	b24 <uart_installIrq+0x118>
			}
			UART_STAT[3].callback_UART = callback;
     b14:	e59f3020 	ldr	r3, [pc, #32]	; b3c <uart_installIrq+0x130>
     b18:	e51b200c 	ldr	r2, [fp, #-12]
     b1c:	e58320ac 	str	r2, [r3, #172]	; 0xac
		}

		return EOK;
     b20:	e3a03000 	mov	r3, #0
}
     b24:	e1a00003 	mov	r0, r3
     b28:	e24bd004 	sub	sp, fp, #4
     b2c:	e8bd4800 	pop	{fp, lr}
     b30:	e12fff1e 	bx	lr
     b34:	e000c000 	.word	0xe000c000
     b38:	00000048 	.word	0x00000048
     b3c:	40000884 	.word	0x40000884
     b40:	e0010000 	.word	0xe0010000
     b44:	000000b8 	.word	0x000000b8
     b48:	e0078000 	.word	0xe0078000
     b4c:	00000128 	.word	0x00000128
     b50:	e007c000 	.word	0xe007c000
     b54:	00000198 	.word	0x00000198

00000b58 <uart_init>:
 *
 * @return		EOK if successful
 * 				EINTERNAL if not successful
 */
int32_t uart_init(UART_T *dev, UART_CFG_T *cfg, void(*callback)(void))
{
     b58:	e92d4800 	push	{fp, lr}
     b5c:	e28db004 	add	fp, sp, #4
     b60:	e24dd018 	sub	sp, sp, #24
     b64:	e50b0010 	str	r0, [fp, #-16]
     b68:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
     b6c:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
	uint32_t tmp;
	uint8_t divisor = 1;
     b70:	e3a03001 	mov	r3, #1
     b74:	e54b3009 	strb	r3, [fp, #-9]

	/* Check input parameter */
	if(PARAM_UARTx(dev)==EPARAM)
     b78:	e51b2010 	ldr	r2, [fp, #-16]
     b7c:	e59f3250 	ldr	r3, [pc, #592]	; dd4 <uart_init+0x27c>
     b80:	e1520003 	cmp	r2, r3
     b84:	0a00000d 	beq	bc0 <uart_init+0x68>
     b88:	e51b2010 	ldr	r2, [fp, #-16]
     b8c:	e59f3244 	ldr	r3, [pc, #580]	; dd8 <uart_init+0x280>
     b90:	e1520003 	cmp	r2, r3
     b94:	0a000009 	beq	bc0 <uart_init+0x68>
     b98:	e51b2010 	ldr	r2, [fp, #-16]
     b9c:	e59f3238 	ldr	r3, [pc, #568]	; ddc <uart_init+0x284>
     ba0:	e1520003 	cmp	r2, r3
     ba4:	0a000005 	beq	bc0 <uart_init+0x68>
     ba8:	e51b2010 	ldr	r2, [fp, #-16]
     bac:	e59f322c 	ldr	r3, [pc, #556]	; de0 <uart_init+0x288>
     bb0:	e1520003 	cmp	r2, r3
     bb4:	0a000001 	beq	bc0 <uart_init+0x68>
	{
		return EPARAM;
     bb8:	e3e03001 	mvn	r3, #1
     bbc:	ea000080 	b	dc4 <uart_init+0x26c>
	}

	/* set up power */
	uart_enable_power(dev);
     bc0:	e51b0010 	ldr	r0, [fp, #-16]
     bc4:	ebfffd8f 	bl	208 <uart_enable_power>

	/* set up clock */
	uart_set_clock(dev, divisor);
     bc8:	e55b3009 	ldrb	r3, [fp, #-9]
     bcc:	e51b0010 	ldr	r0, [fp, #-16]
     bd0:	e1a01003 	mov	r1, r3
     bd4:	ebfffdbb 	bl	2c8 <uart_set_clock>

	/* set all unused registers to 0 when the specific
	 * module is used, otherwise -> don't touch
	 */
	if(dev == LPC_UART1)
     bd8:	e51b2010 	ldr	r2, [fp, #-16]
     bdc:	e59f31f4 	ldr	r3, [pc, #500]	; dd8 <uart_init+0x280>
     be0:	e1520003 	cmp	r2, r3
     be4:	1a000002 	bne	bf4 <uart_init+0x9c>
	{
		dev->MCR = 0;
     be8:	e51b3010 	ldr	r3, [fp, #-16]
     bec:	e3a02000 	mov	r2, #0
     bf0:	e5c32010 	strb	r2, [r3, #16]
	}
	if(dev == LPC_UART3)
     bf4:	e51b2010 	ldr	r2, [fp, #-16]
     bf8:	e59f31e0 	ldr	r3, [pc, #480]	; de0 <uart_init+0x288>
     bfc:	e1520003 	cmp	r2, r3
     c00:	1a000002 	bne	c10 <uart_init+0xb8>
	{
		dev->ICR = 0;
     c04:	e51b3010 	ldr	r3, [fp, #-16]
     c08:	e3a02000 	mov	r2, #0
     c0c:	e5c32024 	strb	r2, [r3, #36]	; 0x24
	}

	/* calculate accurate values for best baudrate */
	if(uart_set_divisors(dev, cfg->Baud_rate, divisor)!=EOK)
     c10:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
     c14:	e5932000 	ldr	r2, [r3]
     c18:	e55b3009 	ldrb	r3, [fp, #-9]
     c1c:	e51b0010 	ldr	r0, [fp, #-16]
     c20:	e1a01002 	mov	r1, r2
     c24:	e1a02003 	mov	r2, r3
     c28:	ebfffe8c 	bl	660 <uart_set_divisors>
     c2c:	e1a03000 	mov	r3, r0
     c30:	e3530000 	cmp	r3, #0
     c34:	0a000001 	beq	c40 <uart_init+0xe8>
	{
		return EINTERNAL;
     c38:	e3e03000 	mvn	r3, #0
     c3c:	ea000060 	b	dc4 <uart_init+0x26c>
	}

	tmp = (dev->LCR & (UART_LCR_DLAB_EN | UART_LCR_BREAK_EN)) & UART_LCR_BITMASK;
     c40:	e51b3010 	ldr	r3, [fp, #-16]
     c44:	e5d3300c 	ldrb	r3, [r3, #12]
     c48:	e20330ff 	and	r3, r3, #255	; 0xff
     c4c:	e20330c0 	and	r3, r3, #192	; 0xc0
     c50:	e50b3008 	str	r3, [fp, #-8]

	/* set Databits */
	switch (cfg->Databits){
     c54:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
     c58:	e5d33005 	ldrb	r3, [r3, #5]
     c5c:	e3530001 	cmp	r3, #1
     c60:	0a000004 	beq	c78 <uart_init+0x120>
     c64:	e3530002 	cmp	r3, #2
     c68:	0a000006 	beq	c88 <uart_init+0x130>
     c6c:	e3530000 	cmp	r3, #0
     c70:	0a00000c 	beq	ca8 <uart_init+0x150>
     c74:	ea000007 	b	c98 <uart_init+0x140>
	case UART_DATABIT_5:
		tmp |= UART_LCR_WLEN5;
		break;
	case UART_DATABIT_6:
		tmp |= UART_LCR_WLEN6;
     c78:	e51b3008 	ldr	r3, [fp, #-8]
     c7c:	e3833001 	orr	r3, r3, #1
     c80:	e50b3008 	str	r3, [fp, #-8]
		break;
     c84:	ea000008 	b	cac <uart_init+0x154>
	case UART_DATABIT_7:
		tmp |= UART_LCR_WLEN7;
     c88:	e51b3008 	ldr	r3, [fp, #-8]
     c8c:	e3833002 	orr	r3, r3, #2
     c90:	e50b3008 	str	r3, [fp, #-8]
		break;
     c94:	ea000004 	b	cac <uart_init+0x154>
	case UART_DATABIT_8:
	default:
		tmp |= UART_LCR_WLEN8;
     c98:	e51b3008 	ldr	r3, [fp, #-8]
     c9c:	e3833003 	orr	r3, r3, #3
     ca0:	e50b3008 	str	r3, [fp, #-8]
		break;
     ca4:	ea000000 	b	cac <uart_init+0x154>

	/* set Databits */
	switch (cfg->Databits){
	case UART_DATABIT_5:
		tmp |= UART_LCR_WLEN5;
		break;
     ca8:	e1a00000 	nop			; (mov r0, r0)
		tmp |= UART_LCR_WLEN8;
		break;
	}

	/* set Parity mode */
	if (cfg->Parity == UART_PARITY_NONE)
     cac:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
     cb0:	e5d33004 	ldrb	r3, [r3, #4]
     cb4:	e3530000 	cmp	r3, #0
     cb8:	0a000019 	beq	d24 <uart_init+0x1cc>
	{
		/* Do nothing... */
	}
	else
	{
		tmp |= UART_LCR_PARITY_EN;
     cbc:	e51b3008 	ldr	r3, [fp, #-8]
     cc0:	e3833008 	orr	r3, r3, #8
     cc4:	e50b3008 	str	r3, [fp, #-8]
		switch (cfg->Parity)
     cc8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
     ccc:	e5d33004 	ldrb	r3, [r3, #4]
     cd0:	e2433001 	sub	r3, r3, #1
     cd4:	e3530003 	cmp	r3, #3
     cd8:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
     cdc:	ea00000f 	b	d20 <uart_init+0x1c8>
     ce0:	00000d20 	.word	0x00000d20
     ce4:	00000cf0 	.word	0x00000cf0
     ce8:	00000d00 	.word	0x00000d00
     cec:	00000d10 	.word	0x00000d10
		case UART_PARITY_ODD:
			tmp |= UART_LCR_PARITY_ODD;
			break;

		case UART_PARITY_EVEN:
			tmp |= UART_LCR_PARITY_EVEN;
     cf0:	e51b3008 	ldr	r3, [fp, #-8]
     cf4:	e3833010 	orr	r3, r3, #16
     cf8:	e50b3008 	str	r3, [fp, #-8]
			break;
     cfc:	ea000008 	b	d24 <uart_init+0x1cc>

		case UART_PARITY_SP1:
			tmp |= UART_LCR_PARITY_F_1;
     d00:	e51b3008 	ldr	r3, [fp, #-8]
     d04:	e3833020 	orr	r3, r3, #32
     d08:	e50b3008 	str	r3, [fp, #-8]
			break;
     d0c:	ea000004 	b	d24 <uart_init+0x1cc>

		case UART_PARITY_SP0:
			tmp |= UART_LCR_PARITY_F_0;
     d10:	e51b3008 	ldr	r3, [fp, #-8]
     d14:	e3833030 	orr	r3, r3, #48	; 0x30
     d18:	e50b3008 	str	r3, [fp, #-8]
			break;
     d1c:	ea000000 	b	d24 <uart_init+0x1cc>
		default:
			break;
     d20:	e1a00000 	nop			; (mov r0, r0)
		}
	}

	/* set stop bits */
	switch (cfg->Stopbits){
     d24:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
     d28:	e5d33006 	ldrb	r3, [r3, #6]
     d2c:	e3530001 	cmp	r3, #1
     d30:	1a000003 	bne	d44 <uart_init+0x1ec>
	case UART_STOPBIT_2:
		tmp |= UART_LCR_STOPBIT_SEL;
     d34:	e51b3008 	ldr	r3, [fp, #-8]
     d38:	e3833004 	orr	r3, r3, #4
     d3c:	e50b3008 	str	r3, [fp, #-8]
		break;
     d40:	ea000000 	b	d48 <uart_init+0x1f0>
	case UART_STOPBIT_1:
	default:
		/* Do no thing... */
		break;
     d44:	e1a00000 	nop			; (mov r0, r0)
	}

	/* write back to LCR, configure FIFO and disable Tx */
	dev->LCR = (uint8_t)(tmp & UART_LCR_BITMASK);
     d48:	e51b3008 	ldr	r3, [fp, #-8]
     d4c:	e20320ff 	and	r2, r3, #255	; 0xff
     d50:	e51b3010 	ldr	r3, [fp, #-16]
     d54:	e5c3200c 	strb	r2, [r3, #12]

	/* check wich buffer should be used */
	if(cfg->Buffer==UART_SW_BUF)	/* Software buffer when selected */
     d58:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
     d5c:	e5d33007 	ldrb	r3, [r3, #7]
     d60:	e3530001 	cmp	r3, #1
     d64:	1a000005 	bne	d80 <uart_init+0x228>
	{
		initCB(dev);
     d68:	e51b0010 	ldr	r0, [fp, #-16]
     d6c:	eb00035e 	bl	1aec <initCB>
		dev->REG3.FCR = 0x00;
     d70:	e51b3010 	ldr	r3, [fp, #-16]
     d74:	e3a02000 	mov	r2, #0
     d78:	e5c32008 	strb	r2, [r3, #8]
     d7c:	ea000002 	b	d8c <uart_init+0x234>
	}
	else 	/* otherwise always hardware buffer are used */
	{
		/* Enable and reset TX and RX FIFO. */
		dev->REG3.FCR = 0x07;
     d80:	e51b3010 	ldr	r3, [fp, #-16]
     d84:	e3a02007 	mov	r2, #7
     d88:	e5c32008 	strb	r2, [r3, #8]
	}

	/* install irq routine */
	if(uart_installIrq(dev, callback)!=EOK)
     d8c:	e51b0010 	ldr	r0, [fp, #-16]
     d90:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
     d94:	ebffff1c 	bl	a0c <uart_installIrq>
     d98:	e1a03000 	mov	r3, r0
     d9c:	e3530000 	cmp	r3, #0
     da0:	0a000001 	beq	dac <uart_init+0x254>
	{
		return EINTERNAL;
     da4:	e3e03000 	mvn	r3, #0
     da8:	ea000005 	b	dc4 <uart_init+0x26c>
	}

	/*  enable IRQs: Receive Data Available and THR Empty Interrupt */
	dev->REG2.IER = (UART_IER_RBRINT_EN|UART_IER_THREINT_EN);
     dac:	e51b3010 	ldr	r3, [fp, #-16]
     db0:	e1d320b4 	ldrh	r2, [r3, #4]
     db4:	e3a02000 	mov	r2, #0
     db8:	e3822003 	orr	r2, r2, #3
     dbc:	e1c320b4 	strh	r2, [r3, #4]

	return EOK;
     dc0:	e3a03000 	mov	r3, #0
}
     dc4:	e1a00003 	mov	r0, r3
     dc8:	e24bd004 	sub	sp, fp, #4
     dcc:	e8bd4800 	pop	{fp, lr}
     dd0:	e12fff1e 	bx	lr
     dd4:	e000c000 	.word	0xe000c000
     dd8:	e0010000 	.word	0xe0010000
     ddc:	e0078000 	.word	0xe0078000
     de0:	e007c000 	.word	0xe007c000

00000de4 <uart_enable>:
 * 					RX enable
 *
 * @return		None
 */
void uart_enable(UART_T *dev, uint8_t flag)
{
     de4:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
     de8:	e28db000 	add	fp, sp, #0
     dec:	e24dd00c 	sub	sp, sp, #12
     df0:	e50b0008 	str	r0, [fp, #-8]
     df4:	e1a03001 	mov	r3, r1
     df8:	e54b3009 	strb	r3, [fp, #-9]
	if(dev == LPC_UART0)
     dfc:	e51b2008 	ldr	r2, [fp, #-8]
     e00:	e59f31e0 	ldr	r3, [pc, #480]	; fe8 <uart_enable+0x204>
     e04:	e1520003 	cmp	r2, r3
     e08:	1a000019 	bne	e74 <uart_enable+0x90>
	{
		if(flag && PIN_RX_ENABLE)
     e0c:	e55b3009 	ldrb	r3, [fp, #-9]
     e10:	e3530000 	cmp	r3, #0
     e14:	0a000009 	beq	e40 <uart_enable+0x5c>
		{
			PINSEL0 &= ~((uint32_t)(PIN_FUNC_MASK<<PIN_RX_UART0));
     e18:	e59f31cc 	ldr	r3, [pc, #460]	; fec <uart_enable+0x208>
     e1c:	e59f21c8 	ldr	r2, [pc, #456]	; fec <uart_enable+0x208>
     e20:	e5922000 	ldr	r2, [r2]
     e24:	e3c220c0 	bic	r2, r2, #192	; 0xc0
     e28:	e5832000 	str	r2, [r3]
			PINSEL0 |= ((uint32_t)(PIN_FUNC_SEL_1<<PIN_RX_UART0));
     e2c:	e59f31b8 	ldr	r3, [pc, #440]	; fec <uart_enable+0x208>
     e30:	e59f21b4 	ldr	r2, [pc, #436]	; fec <uart_enable+0x208>
     e34:	e5922000 	ldr	r2, [r2]
     e38:	e3822040 	orr	r2, r2, #64	; 0x40
     e3c:	e5832000 	str	r2, [r3]
		}
		if(flag && PIN_TX_ENABLE)
     e40:	e55b3009 	ldrb	r3, [fp, #-9]
     e44:	e3530000 	cmp	r3, #0
     e48:	0a000009 	beq	e74 <uart_enable+0x90>
		{
			PINSEL0 &= ~((uint32_t)(PIN_FUNC_MASK<<PIN_TX_UART0));
     e4c:	e59f3198 	ldr	r3, [pc, #408]	; fec <uart_enable+0x208>
     e50:	e59f2194 	ldr	r2, [pc, #404]	; fec <uart_enable+0x208>
     e54:	e5922000 	ldr	r2, [r2]
     e58:	e3c22030 	bic	r2, r2, #48	; 0x30
     e5c:	e5832000 	str	r2, [r3]
			PINSEL0 |= ((uint32_t)(PIN_FUNC_SEL_1<<PIN_TX_UART0));
     e60:	e59f3184 	ldr	r3, [pc, #388]	; fec <uart_enable+0x208>
     e64:	e59f2180 	ldr	r2, [pc, #384]	; fec <uart_enable+0x208>
     e68:	e5922000 	ldr	r2, [r2]
     e6c:	e3822010 	orr	r2, r2, #16
     e70:	e5832000 	str	r2, [r3]
		}
	}
	if(dev == LPC_UART1)
     e74:	e51b2008 	ldr	r2, [fp, #-8]
     e78:	e59f3170 	ldr	r3, [pc, #368]	; ff0 <uart_enable+0x20c>
     e7c:	e1520003 	cmp	r2, r3
     e80:	1a000019 	bne	eec <uart_enable+0x108>
	{
		if(flag && PIN_RX_ENABLE)
     e84:	e55b3009 	ldrb	r3, [fp, #-9]
     e88:	e3530000 	cmp	r3, #0
     e8c:	0a000009 	beq	eb8 <uart_enable+0xd4>
		{
			PINSEL0 &= ~((uint32_t)(PIN_FUNC_MASK<<PIN_RX_UART1));
     e90:	e59f3154 	ldr	r3, [pc, #340]	; fec <uart_enable+0x208>
     e94:	e59f2150 	ldr	r2, [pc, #336]	; fec <uart_enable+0x208>
     e98:	e5922000 	ldr	r2, [r2]
     e9c:	e3c22003 	bic	r2, r2, #3
     ea0:	e5832000 	str	r2, [r3]
			PINSEL0 |= ((uint32_t)(PIN_FUNC_SEL_1<<PIN_RX_UART1));
     ea4:	e59f3140 	ldr	r3, [pc, #320]	; fec <uart_enable+0x208>
     ea8:	e59f213c 	ldr	r2, [pc, #316]	; fec <uart_enable+0x208>
     eac:	e5922000 	ldr	r2, [r2]
     eb0:	e3822001 	orr	r2, r2, #1
     eb4:	e5832000 	str	r2, [r3]
		}
		if(flag && PIN_TX_ENABLE)
     eb8:	e55b3009 	ldrb	r3, [fp, #-9]
     ebc:	e3530000 	cmp	r3, #0
     ec0:	0a000009 	beq	eec <uart_enable+0x108>
		{
			PINSEL1 &= ~((uint32_t)(PIN_FUNC_MASK<<PIN_TX_UART1));
     ec4:	e59f3128 	ldr	r3, [pc, #296]	; ff4 <uart_enable+0x210>
     ec8:	e59f2124 	ldr	r2, [pc, #292]	; ff4 <uart_enable+0x210>
     ecc:	e5922000 	ldr	r2, [r2]
     ed0:	e3c22103 	bic	r2, r2, #-1073741824	; 0xc0000000
     ed4:	e5832000 	str	r2, [r3]
			PINSEL1 |= ((uint32_t)(PIN_FUNC_SEL_1<<PIN_TX_UART1));
     ed8:	e59f3114 	ldr	r3, [pc, #276]	; ff4 <uart_enable+0x210>
     edc:	e59f2110 	ldr	r2, [pc, #272]	; ff4 <uart_enable+0x210>
     ee0:	e5922000 	ldr	r2, [r2]
     ee4:	e3822101 	orr	r2, r2, #1073741824	; 0x40000000
     ee8:	e5832000 	str	r2, [r3]
		}
	}
	if(dev == LPC_UART2)
     eec:	e51b2008 	ldr	r2, [fp, #-8]
     ef0:	e59f3100 	ldr	r3, [pc, #256]	; ff8 <uart_enable+0x214>
     ef4:	e1520003 	cmp	r2, r3
     ef8:	1a000019 	bne	f64 <uart_enable+0x180>
	{
		if(flag && PIN_RX_ENABLE)
     efc:	e55b3009 	ldrb	r3, [fp, #-9]
     f00:	e3530000 	cmp	r3, #0
     f04:	0a000009 	beq	f30 <uart_enable+0x14c>
		{
			PINSEL0 &= ~((uint32_t)(PIN_FUNC_MASK<<PIN_RX_UART2));
     f08:	e59f30dc 	ldr	r3, [pc, #220]	; fec <uart_enable+0x208>
     f0c:	e59f20d8 	ldr	r2, [pc, #216]	; fec <uart_enable+0x208>
     f10:	e5922000 	ldr	r2, [r2]
     f14:	e3c22503 	bic	r2, r2, #12582912	; 0xc00000
     f18:	e5832000 	str	r2, [r3]
			PINSEL0 |= ((uint32_t)(PIN_FUNC_SEL_1<<PIN_RX_UART2));
     f1c:	e59f30c8 	ldr	r3, [pc, #200]	; fec <uart_enable+0x208>
     f20:	e59f20c4 	ldr	r2, [pc, #196]	; fec <uart_enable+0x208>
     f24:	e5922000 	ldr	r2, [r2]
     f28:	e3822501 	orr	r2, r2, #4194304	; 0x400000
     f2c:	e5832000 	str	r2, [r3]
		}
		if(flag && PIN_TX_ENABLE)
     f30:	e55b3009 	ldrb	r3, [fp, #-9]
     f34:	e3530000 	cmp	r3, #0
     f38:	0a000009 	beq	f64 <uart_enable+0x180>
		{
			PINSEL0 &= ~((uint32_t)(PIN_FUNC_MASK<<PIN_TX_UART2));
     f3c:	e59f30a8 	ldr	r3, [pc, #168]	; fec <uart_enable+0x208>
     f40:	e59f20a4 	ldr	r2, [pc, #164]	; fec <uart_enable+0x208>
     f44:	e5922000 	ldr	r2, [r2]
     f48:	e3c22603 	bic	r2, r2, #3145728	; 0x300000
     f4c:	e5832000 	str	r2, [r3]
			PINSEL0 |= ((uint32_t)(PIN_FUNC_SEL_1<<PIN_TX_UART2));
     f50:	e59f3094 	ldr	r3, [pc, #148]	; fec <uart_enable+0x208>
     f54:	e59f2090 	ldr	r2, [pc, #144]	; fec <uart_enable+0x208>
     f58:	e5922000 	ldr	r2, [r2]
     f5c:	e3822601 	orr	r2, r2, #1048576	; 0x100000
     f60:	e5832000 	str	r2, [r3]
		}
	}
	if(dev == LPC_UART3)
     f64:	e51b2008 	ldr	r2, [fp, #-8]
     f68:	e59f308c 	ldr	r3, [pc, #140]	; ffc <uart_enable+0x218>
     f6c:	e1520003 	cmp	r2, r3
     f70:	1a000019 	bne	fdc <uart_enable+0x1f8>
	{
		if(flag && PIN_RX_ENABLE)
     f74:	e55b3009 	ldrb	r3, [fp, #-9]
     f78:	e3530000 	cmp	r3, #0
     f7c:	0a000009 	beq	fa8 <uart_enable+0x1c4>
		{
			PINSEL0 &= ~((uint32_t)(PIN_FUNC_MASK<<PIN_RX_UART3));
     f80:	e59f3064 	ldr	r3, [pc, #100]	; fec <uart_enable+0x208>
     f84:	e59f2060 	ldr	r2, [pc, #96]	; fec <uart_enable+0x208>
     f88:	e5922000 	ldr	r2, [r2]
     f8c:	e3c2200c 	bic	r2, r2, #12
     f90:	e5832000 	str	r2, [r3]
			PINSEL0 |= ((uint32_t)(PIN_FUNC_SEL_2<<PIN_RX_UART3));
     f94:	e59f3050 	ldr	r3, [pc, #80]	; fec <uart_enable+0x208>
     f98:	e59f204c 	ldr	r2, [pc, #76]	; fec <uart_enable+0x208>
     f9c:	e5922000 	ldr	r2, [r2]
     fa0:	e3822008 	orr	r2, r2, #8
     fa4:	e5832000 	str	r2, [r3]
		}
		if(flag && PIN_TX_ENABLE)
     fa8:	e55b3009 	ldrb	r3, [fp, #-9]
     fac:	e3530000 	cmp	r3, #0
     fb0:	0a000009 	beq	fdc <uart_enable+0x1f8>
		{
			PINSEL0 &= ~((uint32_t)(PIN_FUNC_MASK<<PIN_TX_UART3));
     fb4:	e59f3030 	ldr	r3, [pc, #48]	; fec <uart_enable+0x208>
     fb8:	e59f202c 	ldr	r2, [pc, #44]	; fec <uart_enable+0x208>
     fbc:	e5922000 	ldr	r2, [r2]
     fc0:	e3c22003 	bic	r2, r2, #3
     fc4:	e5832000 	str	r2, [r3]
			PINSEL0 |= ((uint32_t)(PIN_FUNC_SEL_2<<PIN_TX_UART3));
     fc8:	e59f301c 	ldr	r3, [pc, #28]	; fec <uart_enable+0x208>
     fcc:	e59f2018 	ldr	r2, [pc, #24]	; fec <uart_enable+0x208>
     fd0:	e5922000 	ldr	r2, [r2]
     fd4:	e3822002 	orr	r2, r2, #2
     fd8:	e5832000 	str	r2, [r3]
		}
	}
}
     fdc:	e28bd000 	add	sp, fp, #0
     fe0:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
     fe4:	e12fff1e 	bx	lr
     fe8:	e000c000 	.word	0xe000c000
     fec:	e002c000 	.word	0xe002c000
     ff0:	e0010000 	.word	0xe0010000
     ff4:	e002c004 	.word	0xe002c004
     ff8:	e0078000 	.word	0xe0078000
     ffc:	e007c000 	.word	0xe007c000

00001000 <uart_disable>:
 * 					enable flags.
 *
 * @return		None
 */
void uart_disable(UART_T *dev, uint8_t flag)
{
    1000:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
    1004:	e28db000 	add	fp, sp, #0
    1008:	e24dd00c 	sub	sp, sp, #12
    100c:	e50b0008 	str	r0, [fp, #-8]
    1010:	e1a03001 	mov	r3, r1
    1014:	e54b3009 	strb	r3, [fp, #-9]
	if(dev == LPC_UART0)
    1018:	e51b2008 	ldr	r2, [fp, #-8]
    101c:	e59f3140 	ldr	r3, [pc, #320]	; 1164 <uart_disable+0x164>
    1020:	e1520003 	cmp	r2, r3
    1024:	1a00000f 	bne	1068 <uart_disable+0x68>
	{
		if(flag && PIN_RX_DISABLE)
    1028:	e55b3009 	ldrb	r3, [fp, #-9]
    102c:	e3530000 	cmp	r3, #0
    1030:	0a000004 	beq	1048 <uart_disable+0x48>
		{
			PINSEL0 &= ~((uint32_t)(PIN_FUNC_MASK<<PIN_RX_UART0));
    1034:	e59f312c 	ldr	r3, [pc, #300]	; 1168 <uart_disable+0x168>
    1038:	e59f2128 	ldr	r2, [pc, #296]	; 1168 <uart_disable+0x168>
    103c:	e5922000 	ldr	r2, [r2]
    1040:	e3c220c0 	bic	r2, r2, #192	; 0xc0
    1044:	e5832000 	str	r2, [r3]
		}
		if(flag && PIN_TX_DISABLE)
    1048:	e55b3009 	ldrb	r3, [fp, #-9]
    104c:	e3530000 	cmp	r3, #0
    1050:	0a000004 	beq	1068 <uart_disable+0x68>
		{
			PINSEL0 &= ~((uint32_t)(PIN_FUNC_MASK<<PIN_TX_UART0));
    1054:	e59f310c 	ldr	r3, [pc, #268]	; 1168 <uart_disable+0x168>
    1058:	e59f2108 	ldr	r2, [pc, #264]	; 1168 <uart_disable+0x168>
    105c:	e5922000 	ldr	r2, [r2]
    1060:	e3c22030 	bic	r2, r2, #48	; 0x30
    1064:	e5832000 	str	r2, [r3]
		}
	}
	if(dev == LPC_UART1)
    1068:	e51b2008 	ldr	r2, [fp, #-8]
    106c:	e59f30f8 	ldr	r3, [pc, #248]	; 116c <uart_disable+0x16c>
    1070:	e1520003 	cmp	r2, r3
    1074:	1a00000f 	bne	10b8 <uart_disable+0xb8>
	{
		if(flag && PIN_RX_DISABLE)
    1078:	e55b3009 	ldrb	r3, [fp, #-9]
    107c:	e3530000 	cmp	r3, #0
    1080:	0a000004 	beq	1098 <uart_disable+0x98>
		{
			PINSEL0 &= ~((uint32_t)(PIN_FUNC_MASK<<PIN_RX_UART1));
    1084:	e59f30dc 	ldr	r3, [pc, #220]	; 1168 <uart_disable+0x168>
    1088:	e59f20d8 	ldr	r2, [pc, #216]	; 1168 <uart_disable+0x168>
    108c:	e5922000 	ldr	r2, [r2]
    1090:	e3c22003 	bic	r2, r2, #3
    1094:	e5832000 	str	r2, [r3]
		}
		if(flag && PIN_TX_DISABLE)
    1098:	e55b3009 	ldrb	r3, [fp, #-9]
    109c:	e3530000 	cmp	r3, #0
    10a0:	0a000004 	beq	10b8 <uart_disable+0xb8>
		{
			PINSEL1 &= ~((uint32_t)(PIN_FUNC_MASK<<PIN_TX_UART1));
    10a4:	e59f30c4 	ldr	r3, [pc, #196]	; 1170 <uart_disable+0x170>
    10a8:	e59f20c0 	ldr	r2, [pc, #192]	; 1170 <uart_disable+0x170>
    10ac:	e5922000 	ldr	r2, [r2]
    10b0:	e3c22103 	bic	r2, r2, #-1073741824	; 0xc0000000
    10b4:	e5832000 	str	r2, [r3]
		}
	}
	if(dev == LPC_UART2)
    10b8:	e51b2008 	ldr	r2, [fp, #-8]
    10bc:	e59f30b0 	ldr	r3, [pc, #176]	; 1174 <uart_disable+0x174>
    10c0:	e1520003 	cmp	r2, r3
    10c4:	1a00000f 	bne	1108 <uart_disable+0x108>
	{
		if(flag && PIN_RX_DISABLE)
    10c8:	e55b3009 	ldrb	r3, [fp, #-9]
    10cc:	e3530000 	cmp	r3, #0
    10d0:	0a000004 	beq	10e8 <uart_disable+0xe8>
		{
			PINSEL0 &= ~((uint32_t)(PIN_FUNC_MASK<<PIN_RX_UART2));
    10d4:	e59f308c 	ldr	r3, [pc, #140]	; 1168 <uart_disable+0x168>
    10d8:	e59f2088 	ldr	r2, [pc, #136]	; 1168 <uart_disable+0x168>
    10dc:	e5922000 	ldr	r2, [r2]
    10e0:	e3c22503 	bic	r2, r2, #12582912	; 0xc00000
    10e4:	e5832000 	str	r2, [r3]
		}
		if(flag && PIN_TX_DISABLE)
    10e8:	e55b3009 	ldrb	r3, [fp, #-9]
    10ec:	e3530000 	cmp	r3, #0
    10f0:	0a000004 	beq	1108 <uart_disable+0x108>
		{
			PINSEL0 &= ~((uint32_t)(PIN_FUNC_MASK<<PIN_TX_UART2));
    10f4:	e59f306c 	ldr	r3, [pc, #108]	; 1168 <uart_disable+0x168>
    10f8:	e59f2068 	ldr	r2, [pc, #104]	; 1168 <uart_disable+0x168>
    10fc:	e5922000 	ldr	r2, [r2]
    1100:	e3c22603 	bic	r2, r2, #3145728	; 0x300000
    1104:	e5832000 	str	r2, [r3]
		}
	}
	if(dev == LPC_UART3)
    1108:	e51b2008 	ldr	r2, [fp, #-8]
    110c:	e59f3064 	ldr	r3, [pc, #100]	; 1178 <uart_disable+0x178>
    1110:	e1520003 	cmp	r2, r3
    1114:	1a00000f 	bne	1158 <uart_disable+0x158>
	{
		if(flag && PIN_RX_DISABLE)
    1118:	e55b3009 	ldrb	r3, [fp, #-9]
    111c:	e3530000 	cmp	r3, #0
    1120:	0a000004 	beq	1138 <uart_disable+0x138>
		{
			PINSEL0 &= ~((uint32_t)(PIN_FUNC_MASK<<PIN_RX_UART3));
    1124:	e59f303c 	ldr	r3, [pc, #60]	; 1168 <uart_disable+0x168>
    1128:	e59f2038 	ldr	r2, [pc, #56]	; 1168 <uart_disable+0x168>
    112c:	e5922000 	ldr	r2, [r2]
    1130:	e3c2200c 	bic	r2, r2, #12
    1134:	e5832000 	str	r2, [r3]
		}
		if(flag && PIN_TX_DISABLE)
    1138:	e55b3009 	ldrb	r3, [fp, #-9]
    113c:	e3530000 	cmp	r3, #0
    1140:	0a000004 	beq	1158 <uart_disable+0x158>
		{
			PINSEL0 &= ~((uint32_t)(PIN_FUNC_MASK<<PIN_TX_UART3));
    1144:	e59f301c 	ldr	r3, [pc, #28]	; 1168 <uart_disable+0x168>
    1148:	e59f2018 	ldr	r2, [pc, #24]	; 1168 <uart_disable+0x168>
    114c:	e5922000 	ldr	r2, [r2]
    1150:	e3c22003 	bic	r2, r2, #3
    1154:	e5832000 	str	r2, [r3]
		}
	}
}
    1158:	e28bd000 	add	sp, fp, #0
    115c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
    1160:	e12fff1e 	bx	lr
    1164:	e000c000 	.word	0xe000c000
    1168:	e002c000 	.word	0xe002c000
    116c:	e0010000 	.word	0xe0010000
    1170:	e002c004 	.word	0xe002c004
    1174:	e0078000 	.word	0xe0078000
    1178:	e007c000 	.word	0xe007c000

0000117c <get_char>:
 * 				- LPC_UART2: UART2 peripheral
 * 				- LPC_UART3: UART3 peripheral
 * @return 		Data received
 */
uint8_t get_char(UART_T *dev)
{
    117c:	e92d4800 	push	{fp, lr}
    1180:	e28db004 	add	fp, sp, #4
    1184:	e24dd010 	sub	sp, sp, #16
    1188:	e50b0010 	str	r0, [fp, #-16]
	unsigned char ret;
	uint8_t udev;

	udev = uart_getDevInInt(dev);	/* get device number */
    118c:	e51b0010 	ldr	r0, [fp, #-16]
    1190:	eb00017a 	bl	1780 <uart_getDevInInt>
    1194:	e1a03000 	mov	r3, r0
    1198:	e54b3005 	strb	r3, [fp, #-5]
	if(udev >= 4)					/* error */
    119c:	e55b3005 	ldrb	r3, [fp, #-5]
    11a0:	e3530003 	cmp	r3, #3
    11a4:	9a000001 	bls	11b0 <get_char+0x34>
	{
		/* ERROR, *dev is wrong */
		return EINTERNAL;
    11a8:	e3a030ff 	mov	r3, #255	; 0xff
    11ac:	ea000019 	b	1218 <get_char+0x9c>
	}

	while (UART_STAT[udev].recv.RecvCB_Empty == TRUE); /* Nothing received so just block */
    11b0:	e1a00000 	nop			; (mov r0, r0)
    11b4:	e55b2005 	ldrb	r2, [fp, #-5]
    11b8:	e59f0068 	ldr	r0, [pc, #104]	; 1228 <get_char+0xac>
    11bc:	e3a01020 	mov	r1, #32
    11c0:	e1a03002 	mov	r3, r2
    11c4:	e1a03103 	lsl	r3, r3, #2
    11c8:	e0833002 	add	r3, r3, r2
    11cc:	e1a03083 	lsl	r3, r3, #1
    11d0:	e0833002 	add	r3, r3, r2
    11d4:	e1a03103 	lsl	r3, r3, #2
    11d8:	e0803003 	add	r3, r0, r3
    11dc:	e0833001 	add	r3, r3, r1
    11e0:	e5d33007 	ldrb	r3, [r3, #7]
    11e4:	e20330ff 	and	r3, r3, #255	; 0xff
    11e8:	e3530001 	cmp	r3, #1
    11ec:	0afffff0 	beq	11b4 <get_char+0x38>

	if(getRecvCB(dev, &ret)!=EOK)
    11f0:	e24b3006 	sub	r3, fp, #6
    11f4:	e51b0010 	ldr	r0, [fp, #-16]
    11f8:	e1a01003 	mov	r1, r3
    11fc:	eb00041b 	bl	2270 <getRecvCB>
    1200:	e1a03000 	mov	r3, r0
    1204:	e3530000 	cmp	r3, #0
    1208:	0a000001 	beq	1214 <get_char+0x98>
	{
		/* empty */
		return EINTERNAL;
    120c:	e3a030ff 	mov	r3, #255	; 0xff
    1210:	ea000000 	b	1218 <get_char+0x9c>
	}

	return ret;
    1214:	e55b3006 	ldrb	r3, [fp, #-6]
}
    1218:	e1a00003 	mov	r0, r3
    121c:	e24bd004 	sub	sp, fp, #4
    1220:	e8bd4800 	pop	{fp, lr}
    1224:	e12fff1e 	bx	lr
    1228:	40000884 	.word	0x40000884

0000122c <uart_startTransmit>:
 * 				- LPC_UART2: UART2 peripheral
 * 				- LPC_UART3: UART3 peripheral
 * @return 		None
 */
static void uart_startTransmit(UART_T *dev)
{
    122c:	e92d4800 	push	{fp, lr}
    1230:	e28db004 	add	fp, sp, #4
    1234:	e24dd010 	sub	sp, sp, #16
    1238:	e50b0010 	str	r0, [fp, #-16]
	unsigned char i;

	if(getSendCB(dev, &i)==EOK)
    123c:	e24b3005 	sub	r3, fp, #5
    1240:	e51b0010 	ldr	r0, [fp, #-16]
    1244:	e1a01003 	mov	r1, r3
    1248:	eb0002d4 	bl	1da0 <getSendCB>
    124c:	e1a03000 	mov	r3, r0
    1250:	e3530000 	cmp	r3, #0
    1254:	1a000002 	bne	1264 <uart_startTransmit+0x38>
	{
		dev->REG1.THR = i;
    1258:	e55b2005 	ldrb	r2, [fp, #-5]
    125c:	e51b3010 	ldr	r3, [fp, #-16]
    1260:	e5c32000 	strb	r2, [r3]
	}
}
    1264:	e24bd004 	sub	sp, fp, #4
    1268:	e8bd4800 	pop	{fp, lr}
    126c:	e12fff1e 	bx	lr

00001270 <put_char>:
 * 				- LPC_UART3: UART3 peripheral
 * @param[in]	c	Data to transmit (must be 8-bit long)
 * @return 		None
 */
void put_char(UART_T *dev, unsigned char c)
{
    1270:	e92d4800 	push	{fp, lr}
    1274:	e28db004 	add	fp, sp, #4
    1278:	e24dd008 	sub	sp, sp, #8
    127c:	e50b0008 	str	r0, [fp, #-8]
    1280:	e1a03001 	mov	r3, r1
    1284:	e54b3009 	strb	r3, [fp, #-9]
	if(putSendCB(dev, c)==EOK)
    1288:	e55b3009 	ldrb	r3, [fp, #-9]
    128c:	e51b0008 	ldr	r0, [fp, #-8]
    1290:	e1a01003 	mov	r1, r3
    1294:	eb000228 	bl	1b3c <putSendCB>
    1298:	e1a03000 	mov	r3, r0
    129c:	e3530000 	cmp	r3, #0
    12a0:	1a000001 	bne	12ac <put_char+0x3c>
	{
		uart_startTransmit(dev);
    12a4:	e51b0008 	ldr	r0, [fp, #-8]
    12a8:	ebffffdf 	bl	122c <uart_startTransmit>
	}
}
    12ac:	e24bd004 	sub	sp, fp, #4
    12b0:	e8bd4800 	pop	{fp, lr}
    12b4:	e12fff1e 	bx	lr

000012b8 <send_string>:
 * 				- LPC_UART3: UART3 peripheral
 * @param[in]	str		String to transmit
 * @return 		EOK if nothing gone wrong
 */
int32_t send_string(UART_T *dev, char *str)
{
    12b8:	e92d4800 	push	{fp, lr}
    12bc:	e28db004 	add	fp, sp, #4
    12c0:	e24dd010 	sub	sp, sp, #16
    12c4:	e50b0010 	str	r0, [fp, #-16]
    12c8:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
	uint32_t bSent = 0;
    12cc:	e3a03000 	mov	r3, #0
    12d0:	e50b3008 	str	r3, [fp, #-8]
	uint8_t udev;

	udev = uart_getDevInInt(dev);	/* get device number */
    12d4:	e51b0010 	ldr	r0, [fp, #-16]
    12d8:	eb000128 	bl	1780 <uart_getDevInInt>
    12dc:	e1a03000 	mov	r3, r0
    12e0:	e54b3009 	strb	r3, [fp, #-9]
	if(udev >= 4)					/* error */
    12e4:	e55b3009 	ldrb	r3, [fp, #-9]
    12e8:	e3530003 	cmp	r3, #3
    12ec:	9a000001 	bls	12f8 <send_string+0x40>
	{
		/* ERROR, *dev is wrong */
		return EINTERNAL;
    12f0:	e3e03000 	mvn	r3, #0
    12f4:	ea00003c 	b	13ec <send_string+0x134>
	}

	/* wait for THR empty */
	while(!(dev->LSR & UART_LSR_THRE));
    12f8:	e1a00000 	nop			; (mov r0, r0)
    12fc:	e51b3010 	ldr	r3, [fp, #-16]
    1300:	e5d33014 	ldrb	r3, [r3, #20]
    1304:	e20330ff 	and	r3, r3, #255	; 0xff
    1308:	e2033020 	and	r3, r3, #32
    130c:	e3530000 	cmp	r3, #0
    1310:	0afffff9 	beq	12fc <send_string+0x44>

	while(*str) {
    1314:	ea000015 	b	1370 <send_string+0xb8>
		put_char(dev, *str);
    1318:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
    131c:	e5d33000 	ldrb	r3, [r3]
    1320:	e51b0010 	ldr	r0, [fp, #-16]
    1324:	e1a01003 	mov	r1, r3
    1328:	ebffffd0 	bl	1270 <put_char>
		str++;
    132c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
    1330:	e2833001 	add	r3, r3, #1
    1334:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
		bSent++;
    1338:	e51b3008 	ldr	r3, [fp, #-8]
    133c:	e2833001 	add	r3, r3, #1
    1340:	e50b3008 	str	r3, [fp, #-8]
		/* if buffer is full, wait for emptiing the buffer and
		 * resume writting string into buffer
		 */
		if(((bSent) % CB_SIZE)==0)
    1344:	e51b3008 	ldr	r3, [fp, #-8]
    1348:	e203300f 	and	r3, r3, #15
    134c:	e3530000 	cmp	r3, #0
    1350:	1a000006 	bne	1370 <send_string+0xb8>
		{
			/* wait for THR empty */
			while(!(dev->LSR & UART_LSR_THRE));
    1354:	e1a00000 	nop			; (mov r0, r0)
    1358:	e51b3010 	ldr	r3, [fp, #-16]
    135c:	e5d33014 	ldrb	r3, [r3, #20]
    1360:	e20330ff 	and	r3, r3, #255	; 0xff
    1364:	e2033020 	and	r3, r3, #32
    1368:	e3530000 	cmp	r3, #0
    136c:	0afffff9 	beq	1358 <send_string+0xa0>
	}

	/* wait for THR empty */
	while(!(dev->LSR & UART_LSR_THRE));

	while(*str) {
    1370:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
    1374:	e5d33000 	ldrb	r3, [r3]
    1378:	e3530000 	cmp	r3, #0
    137c:	1affffe5 	bne	1318 <send_string+0x60>
			while(!(dev->LSR & UART_LSR_THRE));
		}
	}

	/* if string does not end with next line character */
	if(*(--str)!='\n')
    1380:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
    1384:	e2433001 	sub	r3, r3, #1
    1388:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    138c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
    1390:	e5d33000 	ldrb	r3, [r3]
    1394:	e353000a 	cmp	r3, #10
    1398:	0a000002 	beq	13a8 <send_string+0xf0>
	{
		put_char(dev, '\n');
    139c:	e51b0010 	ldr	r0, [fp, #-16]
    13a0:	e3a0100a 	mov	r1, #10
    13a4:	ebffffb1 	bl	1270 <put_char>
	}

	while(UART_STAT[udev].send.SendCB_Empty==FALSE);
    13a8:	e1a00000 	nop			; (mov r0, r0)
    13ac:	e55b2009 	ldrb	r2, [fp, #-9]
    13b0:	e59f0044 	ldr	r0, [pc, #68]	; 13fc <send_string+0x144>
    13b4:	e3a01010 	mov	r1, #16
    13b8:	e1a03002 	mov	r3, r2
    13bc:	e1a03103 	lsl	r3, r3, #2
    13c0:	e0833002 	add	r3, r3, r2
    13c4:	e1a03083 	lsl	r3, r3, #1
    13c8:	e0833002 	add	r3, r3, r2
    13cc:	e1a03103 	lsl	r3, r3, #2
    13d0:	e0803003 	add	r3, r0, r3
    13d4:	e0833001 	add	r3, r3, r1
    13d8:	e5d33003 	ldrb	r3, [r3, #3]
    13dc:	e20330ff 	and	r3, r3, #255	; 0xff
    13e0:	e3530000 	cmp	r3, #0
    13e4:	0afffff0 	beq	13ac <send_string+0xf4>

	return EOK;
    13e8:	e3a03000 	mov	r3, #0
}
    13ec:	e1a00003 	mov	r0, r3
    13f0:	e24bd004 	sub	sp, fp, #4
    13f4:	e8bd4800 	pop	{fp, lr}
    13f8:	e12fff1e 	bx	lr
    13fc:	40000884 	.word	0x40000884

00001400 <send_buf>:
 * @param[in]	buf		Pointer to Buffer
 * 				len		Number of Bytes to send
 * @return 		EOK if nothing gone wrong
 */
int32_t send_buf(UART_T *dev, uint8_t *buf, uint32_t len)
{
    1400:	e92d4800 	push	{fp, lr}
    1404:	e28db004 	add	fp, sp, #4
    1408:	e24dd020 	sub	sp, sp, #32
    140c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
    1410:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
    1414:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
	uint32_t bToSend, bSent;
	uint8_t udev;

	udev = uart_getDevInInt(dev);	/* get device number */
    1418:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
    141c:	eb0000d7 	bl	1780 <uart_getDevInInt>
    1420:	e1a03000 	mov	r3, r0
    1424:	e54b300d 	strb	r3, [fp, #-13]
	if(udev >= 4)					/* error */
    1428:	e55b300d 	ldrb	r3, [fp, #-13]
    142c:	e3530003 	cmp	r3, #3
    1430:	9a000001 	bls	143c <send_buf+0x3c>
	{
		/* ERROR, *dev is wrong */
		return EINTERNAL;
    1434:	e3e03000 	mvn	r3, #0
    1438:	ea000038 	b	1520 <send_buf+0x120>
	}

	/* wait for THR empty */
	while(!(dev->LSR & UART_LSR_THRE));
    143c:	e1a00000 	nop			; (mov r0, r0)
    1440:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
    1444:	e5d33014 	ldrb	r3, [r3, #20]
    1448:	e20330ff 	and	r3, r3, #255	; 0xff
    144c:	e2033020 	and	r3, r3, #32
    1450:	e3530000 	cmp	r3, #0
    1454:	0afffff9 	beq	1440 <send_buf+0x40>

	bToSend = len;
    1458:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
    145c:	e50b3008 	str	r3, [fp, #-8]
	bSent = 0;
    1460:	e3a03000 	mov	r3, #0
    1464:	e50b300c 	str	r3, [fp, #-12]
	while(bToSend) {
    1468:	ea000018 	b	14d0 <send_buf+0xd0>
		put_char(dev, (*buf++));
    146c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
    1470:	e5d33000 	ldrb	r3, [r3]
    1474:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
    1478:	e2822001 	add	r2, r2, #1
    147c:	e50b201c 	str	r2, [fp, #-28]	; 0xffffffe4
    1480:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
    1484:	e1a01003 	mov	r1, r3
    1488:	ebffff78 	bl	1270 <put_char>
		bSent++;
    148c:	e51b300c 	ldr	r3, [fp, #-12]
    1490:	e2833001 	add	r3, r3, #1
    1494:	e50b300c 	str	r3, [fp, #-12]
		bToSend--;
    1498:	e51b3008 	ldr	r3, [fp, #-8]
    149c:	e2433001 	sub	r3, r3, #1
    14a0:	e50b3008 	str	r3, [fp, #-8]

		if(((bSent) % CB_SIZE)==0)
    14a4:	e51b300c 	ldr	r3, [fp, #-12]
    14a8:	e203300f 	and	r3, r3, #15
    14ac:	e3530000 	cmp	r3, #0
    14b0:	1a000006 	bne	14d0 <send_buf+0xd0>
		{
			/* wait for THR empty */
			while(!(dev->LSR & UART_LSR_THRE));
    14b4:	e1a00000 	nop			; (mov r0, r0)
    14b8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
    14bc:	e5d33014 	ldrb	r3, [r3, #20]
    14c0:	e20330ff 	and	r3, r3, #255	; 0xff
    14c4:	e2033020 	and	r3, r3, #32
    14c8:	e3530000 	cmp	r3, #0
    14cc:	0afffff9 	beq	14b8 <send_buf+0xb8>
	/* wait for THR empty */
	while(!(dev->LSR & UART_LSR_THRE));

	bToSend = len;
	bSent = 0;
	while(bToSend) {
    14d0:	e51b3008 	ldr	r3, [fp, #-8]
    14d4:	e3530000 	cmp	r3, #0
    14d8:	1affffe3 	bne	146c <send_buf+0x6c>
			/* wait for THR empty */
			while(!(dev->LSR & UART_LSR_THRE));
		}
	}

	while(UART_STAT[udev].send.SendCB_Empty==FALSE);
    14dc:	e1a00000 	nop			; (mov r0, r0)
    14e0:	e55b200d 	ldrb	r2, [fp, #-13]
    14e4:	e59f0044 	ldr	r0, [pc, #68]	; 1530 <send_buf+0x130>
    14e8:	e3a01010 	mov	r1, #16
    14ec:	e1a03002 	mov	r3, r2
    14f0:	e1a03103 	lsl	r3, r3, #2
    14f4:	e0833002 	add	r3, r3, r2
    14f8:	e1a03083 	lsl	r3, r3, #1
    14fc:	e0833002 	add	r3, r3, r2
    1500:	e1a03103 	lsl	r3, r3, #2
    1504:	e0803003 	add	r3, r0, r3
    1508:	e0833001 	add	r3, r3, r1
    150c:	e5d33003 	ldrb	r3, [r3, #3]
    1510:	e20330ff 	and	r3, r3, #255	; 0xff
    1514:	e3530000 	cmp	r3, #0
    1518:	0afffff0 	beq	14e0 <send_buf+0xe0>

	return EOK;
    151c:	e3a03000 	mov	r3, #0
}
    1520:	e1a00003 	mov	r0, r3
    1524:	e24bd004 	sub	sp, fp, #4
    1528:	e8bd4800 	pop	{fp, lr}
    152c:	e12fff1e 	bx	lr
    1530:	40000884 	.word	0x40000884

00001534 <recv_string>:
 * @param[out]	str 	Pointer to String
 * @param[in]	len 	Length of String including and \n at the end.
 * @return 		EOK if nothing gone wrong
 */
int32_t recv_string(UART_T *dev, char *str, uint32_t len)
{
    1534:	e92d4800 	push	{fp, lr}
    1538:	e28db004 	add	fp, sp, #4
    153c:	e24dd018 	sub	sp, sp, #24
    1540:	e50b0010 	str	r0, [fp, #-16]
    1544:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    1548:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
	uint32_t bToRecv;

	bToRecv = len;
    154c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
    1550:	e50b3008 	str	r3, [fp, #-8]

	while(bToRecv-1)
    1554:	ea00000b 	b	1588 <recv_string+0x54>
	{
		(*str++) = (char)get_char(dev);
    1558:	e51b0010 	ldr	r0, [fp, #-16]
    155c:	ebffff06 	bl	117c <get_char>
    1560:	e1a03000 	mov	r3, r0
    1564:	e1a02003 	mov	r2, r3
    1568:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
    156c:	e5c32000 	strb	r2, [r3]
    1570:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
    1574:	e2833001 	add	r3, r3, #1
    1578:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
		bToRecv--;
    157c:	e51b3008 	ldr	r3, [fp, #-8]
    1580:	e2433001 	sub	r3, r3, #1
    1584:	e50b3008 	str	r3, [fp, #-8]
{
	uint32_t bToRecv;

	bToRecv = len;

	while(bToRecv-1)
    1588:	e51b3008 	ldr	r3, [fp, #-8]
    158c:	e3530001 	cmp	r3, #1
    1590:	1afffff0 	bne	1558 <recv_string+0x24>
	{
		(*str++) = (char)get_char(dev);
		bToRecv--;
	}

	*str = '\0';
    1594:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
    1598:	e3a02000 	mov	r2, #0
    159c:	e5c32000 	strb	r2, [r3]

	return EOK;
    15a0:	e3a03000 	mov	r3, #0
}
    15a4:	e1a00003 	mov	r0, r3
    15a8:	e24bd004 	sub	sp, fp, #4
    15ac:	e8bd4800 	pop	{fp, lr}
    15b0:	e12fff1e 	bx	lr

000015b4 <recv_buf>:
 * @param[out]	buf 	Pointer to Received buffer
 * @param[in]	len 	Length of Received buffer
 * @return 		EOK if nothing gone wrong
 */
int32_t recv_buf(UART_T *dev, uint8_t *buf, uint32_t len)
{
    15b4:	e92d4800 	push	{fp, lr}
    15b8:	e28db004 	add	fp, sp, #4
    15bc:	e24dd018 	sub	sp, sp, #24
    15c0:	e50b0010 	str	r0, [fp, #-16]
    15c4:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    15c8:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
	uint32_t bToRecv;

	bToRecv = len;
    15cc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
    15d0:	e50b3008 	str	r3, [fp, #-8]

	while(bToRecv)
    15d4:	ea00000b 	b	1608 <recv_buf+0x54>
	{
		(*buf++) = get_char(dev);
    15d8:	e51b0010 	ldr	r0, [fp, #-16]
    15dc:	ebfffee6 	bl	117c <get_char>
    15e0:	e1a03000 	mov	r3, r0
    15e4:	e1a02003 	mov	r2, r3
    15e8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
    15ec:	e5c32000 	strb	r2, [r3]
    15f0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
    15f4:	e2833001 	add	r3, r3, #1
    15f8:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
		bToRecv--;
    15fc:	e51b3008 	ldr	r3, [fp, #-8]
    1600:	e2433001 	sub	r3, r3, #1
    1604:	e50b3008 	str	r3, [fp, #-8]
{
	uint32_t bToRecv;

	bToRecv = len;

	while(bToRecv)
    1608:	e51b3008 	ldr	r3, [fp, #-8]
    160c:	e3530000 	cmp	r3, #0
    1610:	1afffff0 	bne	15d8 <recv_buf+0x24>
	{
		(*buf++) = get_char(dev);
		bToRecv--;
	}

	return EOK;
    1614:	e3a03000 	mov	r3, #0
}
    1618:	e1a00003 	mov	r0, r3
    161c:	e24bd004 	sub	sp, fp, #4
    1620:	e8bd4800 	pop	{fp, lr}
    1624:	e12fff1e 	bx	lr

00001628 <uart_isready>:
 *
 * @return		BUSY if the UART is sendig
 * 				NOTBUSY if the UART is waiting
 */
int32_t uart_isready(UART_T *dev)
{
    1628:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
    162c:	e28db000 	add	fp, sp, #0
    1630:	e24dd00c 	sub	sp, sp, #12
    1634:	e50b0008 	str	r0, [fp, #-8]
	if(dev->LSR & UART_LSR_TEMT)
    1638:	e51b3008 	ldr	r3, [fp, #-8]
    163c:	e5d33014 	ldrb	r3, [r3, #20]
    1640:	e20330ff 	and	r3, r3, #255	; 0xff
    1644:	e2033040 	and	r3, r3, #64	; 0x40
    1648:	e3530000 	cmp	r3, #0
    164c:	0a000001 	beq	1658 <uart_isready+0x30>
	{
		return NOTBUSY;
    1650:	e3a03001 	mov	r3, #1
    1654:	ea000000 	b	165c <uart_isready+0x34>
	}
	else
	{
		return BUSY;
    1658:	e3a03000 	mov	r3, #0
	}
}
    165c:	e1a00003 	mov	r0, r3
    1660:	e28bd000 	add	sp, fp, #0
    1664:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
    1668:	e12fff1e 	bx	lr

0000166c <uart_sendchar>:
 * @param[in]   c Character to send
 *
 * @return		None
 */
void uart_sendchar(UART_T *dev, char c)
{
    166c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
    1670:	e28db000 	add	fp, sp, #0
    1674:	e24dd00c 	sub	sp, sp, #12
    1678:	e50b0008 	str	r0, [fp, #-8]
    167c:	e1a03001 	mov	r3, r1
    1680:	e54b3009 	strb	r3, [fp, #-9]
	while (!(dev->LSR & UART_LSR_THRE)); /* Block until tx empty */
    1684:	e1a00000 	nop			; (mov r0, r0)
    1688:	e51b3008 	ldr	r3, [fp, #-8]
    168c:	e5d33014 	ldrb	r3, [r3, #20]
    1690:	e20330ff 	and	r3, r3, #255	; 0xff
    1694:	e2033020 	and	r3, r3, #32
    1698:	e3530000 	cmp	r3, #0
    169c:	0afffff9 	beq	1688 <uart_sendchar+0x1c>
	dev->REG1.THR = c;
    16a0:	e51b3008 	ldr	r3, [fp, #-8]
    16a4:	e55b2009 	ldrb	r2, [fp, #-9]
    16a8:	e5c32000 	strb	r2, [r3]
}
    16ac:	e28bd000 	add	sp, fp, #0
    16b0:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
    16b4:	e12fff1e 	bx	lr

000016b8 <uart_getchar>:
 * 					- LPC_UART3: UART3 peripheral
 *
 * @return		c	return the received character
 */
char uart_getchar(UART_T *dev)
{
    16b8:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
    16bc:	e28db000 	add	fp, sp, #0
    16c0:	e24dd014 	sub	sp, sp, #20
    16c4:	e50b0010 	str	r0, [fp, #-16]
	char c;
	while ((dev->LSR & UART_LSR_RDR) == 0); /* Nothing received so just block */
    16c8:	e1a00000 	nop			; (mov r0, r0)
    16cc:	e51b3010 	ldr	r3, [fp, #-16]
    16d0:	e5d33014 	ldrb	r3, [r3, #20]
    16d4:	e20330ff 	and	r3, r3, #255	; 0xff
    16d8:	e2033001 	and	r3, r3, #1
    16dc:	e3530000 	cmp	r3, #0
    16e0:	0afffff9 	beq	16cc <uart_getchar+0x14>
	c = dev->REG1.RBR; /* Read Receiver buffer register */
    16e4:	e51b3010 	ldr	r3, [fp, #-16]
    16e8:	e5d33000 	ldrb	r3, [r3]
    16ec:	e54b3005 	strb	r3, [fp, #-5]
	return c;
    16f0:	e55b3005 	ldrb	r3, [fp, #-5]
}
    16f4:	e1a00003 	mov	r0, r3
    16f8:	e28bd000 	add	sp, fp, #0
    16fc:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
    1700:	e12fff1e 	bx	lr

00001704 <uart_puts>:
 * @param[in]   s String to send
 *
 * @return		None
 */
void uart_puts(UART_T *dev, char *s)
{
    1704:	e92d4800 	push	{fp, lr}
    1708:	e28db004 	add	fp, sp, #4
    170c:	e24dd008 	sub	sp, sp, #8
    1710:	e50b0008 	str	r0, [fp, #-8]
    1714:	e50b100c 	str	r1, [fp, #-12]
	while(*s) {
    1718:	ea000007 	b	173c <uart_puts+0x38>
		uart_sendchar(dev, *s);
    171c:	e51b300c 	ldr	r3, [fp, #-12]
    1720:	e5d33000 	ldrb	r3, [r3]
    1724:	e51b0008 	ldr	r0, [fp, #-8]
    1728:	e1a01003 	mov	r1, r3
    172c:	ebffffce 	bl	166c <uart_sendchar>
		s++;
    1730:	e51b300c 	ldr	r3, [fp, #-12]
    1734:	e2833001 	add	r3, r3, #1
    1738:	e50b300c 	str	r3, [fp, #-12]
 *
 * @return		None
 */
void uart_puts(UART_T *dev, char *s)
{
	while(*s) {
    173c:	e51b300c 	ldr	r3, [fp, #-12]
    1740:	e5d33000 	ldrb	r3, [r3]
    1744:	e3530000 	cmp	r3, #0
    1748:	1afffff3 	bne	171c <uart_puts+0x18>
		uart_sendchar(dev, *s);
		s++;
	}

	/* if string does not end with next line character */
	if(*(--s)!='\n')
    174c:	e51b300c 	ldr	r3, [fp, #-12]
    1750:	e2433001 	sub	r3, r3, #1
    1754:	e50b300c 	str	r3, [fp, #-12]
    1758:	e51b300c 	ldr	r3, [fp, #-12]
    175c:	e5d33000 	ldrb	r3, [r3]
    1760:	e353000a 	cmp	r3, #10
    1764:	0a000002 	beq	1774 <uart_puts+0x70>
	{
		uart_sendchar(dev, '\n');
    1768:	e51b0008 	ldr	r0, [fp, #-8]
    176c:	e3a0100a 	mov	r1, #10
    1770:	ebffffbd 	bl	166c <uart_sendchar>
	}
}
    1774:	e24bd004 	sub	sp, fp, #4
    1778:	e8bd4800 	pop	{fp, lr}
    177c:	e12fff1e 	bx	lr

00001780 <uart_getDevInInt>:
 * 				uint8_t 1 if LPC_UART1
 * 				uint8_t 2 if LPC_UART2
 * 				uint8_t 3 if LPC_UART3
 */
uint8_t uart_getDevInInt(UART_T *dev)
{
    1780:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
    1784:	e28db000 	add	fp, sp, #0
    1788:	e24dd014 	sub	sp, sp, #20
    178c:	e50b0010 	str	r0, [fp, #-16]
	uint8_t ret = 255;
    1790:	e3e03000 	mvn	r3, #0
    1794:	e54b3005 	strb	r3, [fp, #-5]
	if(dev == LPC_UART0)
    1798:	e51b2010 	ldr	r2, [fp, #-16]
    179c:	e59f3074 	ldr	r3, [pc, #116]	; 1818 <uart_getDevInInt+0x98>
    17a0:	e1520003 	cmp	r2, r3
    17a4:	1a000002 	bne	17b4 <uart_getDevInInt+0x34>
	{
		ret = 0;
    17a8:	e3a03000 	mov	r3, #0
    17ac:	e54b3005 	strb	r3, [fp, #-5]
    17b0:	ea000013 	b	1804 <uart_getDevInInt+0x84>
	} else if(dev == LPC_UART1)
    17b4:	e51b2010 	ldr	r2, [fp, #-16]
    17b8:	e59f305c 	ldr	r3, [pc, #92]	; 181c <uart_getDevInInt+0x9c>
    17bc:	e1520003 	cmp	r2, r3
    17c0:	1a000002 	bne	17d0 <uart_getDevInInt+0x50>
	{
		ret = 1;
    17c4:	e3a03001 	mov	r3, #1
    17c8:	e54b3005 	strb	r3, [fp, #-5]
    17cc:	ea00000c 	b	1804 <uart_getDevInInt+0x84>
	} else if(dev == LPC_UART2)
    17d0:	e51b2010 	ldr	r2, [fp, #-16]
    17d4:	e59f3044 	ldr	r3, [pc, #68]	; 1820 <uart_getDevInInt+0xa0>
    17d8:	e1520003 	cmp	r2, r3
    17dc:	1a000002 	bne	17ec <uart_getDevInInt+0x6c>
	{
		ret = 2;
    17e0:	e3a03002 	mov	r3, #2
    17e4:	e54b3005 	strb	r3, [fp, #-5]
    17e8:	ea000005 	b	1804 <uart_getDevInInt+0x84>
	} else if(dev == LPC_UART3)
    17ec:	e51b2010 	ldr	r2, [fp, #-16]
    17f0:	e59f302c 	ldr	r3, [pc, #44]	; 1824 <uart_getDevInInt+0xa4>
    17f4:	e1520003 	cmp	r2, r3
    17f8:	1a000001 	bne	1804 <uart_getDevInInt+0x84>
	{
		ret = 3;
    17fc:	e3a03003 	mov	r3, #3
    1800:	e54b3005 	strb	r3, [fp, #-5]
	}

	return ret;
    1804:	e55b3005 	ldrb	r3, [fp, #-5]
}
    1808:	e1a00003 	mov	r0, r3
    180c:	e28bd000 	add	sp, fp, #0
    1810:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
    1814:	e12fff1e 	bx	lr
    1818:	e000c000 	.word	0xe000c000
    181c:	e0010000 	.word	0xe0010000
    1820:	e0078000 	.word	0xe0078000
    1824:	e007c000 	.word	0xe007c000

00001828 <start>:
_mainCRTStartup:

	/* Setup a stack for each mode - note that this only sets up a usable stack
	for system/user, SWI and IRQ modes.   Also each mode is setup with
	interrupts initially disabled. */
    ldr   r0, .LC6
    1828:	e59f00d0 	ldr	r0, [pc, #208]	; 1900 <endless_loop+0x18>
    msr   CPSR_c, #MODE_UND|I_BIT|F_BIT /* Undefined Instruction Mode */
    182c:	e321f0db 	msr	CPSR_c, #219	; 0xdb
    mov   sp, r0
    1830:	e1a0d000 	mov	sp, r0
    sub   r0, r0, #UND_STACK_SIZE
    1834:	e2400004 	sub	r0, r0, #4
    msr   CPSR_c, #MODE_ABT|I_BIT|F_BIT /* Abort Mode */
    1838:	e321f0d7 	msr	CPSR_c, #215	; 0xd7
    mov   sp, r0
    183c:	e1a0d000 	mov	sp, r0
    sub   r0, r0, #ABT_STACK_SIZE
    1840:	e2400004 	sub	r0, r0, #4
    msr   CPSR_c, #MODE_FIQ|I_BIT|F_BIT /* FIQ Mode */
    1844:	e321f0d1 	msr	CPSR_c, #209	; 0xd1
    mov   sp, r0
    1848:	e1a0d000 	mov	sp, r0
    sub   r0, r0, #FIQ_STACK_SIZE
    184c:	e2400004 	sub	r0, r0, #4
    msr   CPSR_c, #MODE_IRQ|I_BIT|F_BIT /* IRQ Mode */
    1850:	e321f0d2 	msr	CPSR_c, #210	; 0xd2
    mov   sp, r0
    1854:	e1a0d000 	mov	sp, r0
    sub   r0, r0, #IRQ_STACK_SIZE
    1858:	e2400c01 	sub	r0, r0, #256	; 0x100
    msr   CPSR_c, #MODE_SVC|I_BIT|F_BIT /* Supervisor Mode */
    185c:	e321f0d3 	msr	CPSR_c, #211	; 0xd3
    mov   sp, r0
    1860:	e1a0d000 	mov	sp, r0
    sub   r0, r0, #SVC_STACK_SIZE
    1864:	e2400c01 	sub	r0, r0, #256	; 0x100
    msr   CPSR_c, #MODE_SYS|I_BIT|F_BIT /* System Mode */
    1868:	e321f0df 	msr	CPSR_c, #223	; 0xdf
    mov   sp, r0
    186c:	e1a0d000 	mov	sp, r0
	/* We want to start in supervisor mode.  Operation will switch to system
	mode when the first task starts. */
/* pamo exchanged
	msr   CPSR_c, #MODE_SYS //|F_BIT|I_BIT*/

	msr	  CPSR_c, #MODE_SVC	/* enable interrupts */
    1870:	e321f013 	msr	CPSR_c, #19
/* end pamo exchanged*/

	/* Clear BSS. */

	mov     a2, #0			/* Fill value */
    1874:	e3a01000 	mov	r1, #0
	mov		fp, a2			/* Null frame pointer */
    1878:	e1a0b001 	mov	fp, r1
	mov		r7, a2			/* Null frame pointer for Thumb */
    187c:	e1a07001 	mov	r7, r1

	ldr		r1, .LC1		/* Start of memory block */
    1880:	e59f1064 	ldr	r1, [pc, #100]	; 18ec <endless_loop+0x4>
	ldr		r3, .LC2		/* End of memory block */
    1884:	e59f3064 	ldr	r3, [pc, #100]	; 18f0 <endless_loop+0x8>
	subs	r3, r3, r1      /* Length of block */
    1888:	e0533001 	subs	r3, r3, r1
	beq		.end_clear_loop
    188c:	0a000003 	beq	18a0 <.end_clear_loop>
	mov		r2, #0
    1890:	e3a02000 	mov	r2, #0

00001894 <.clear_loop>:

.clear_loop:
	strb	r2, [r1], #1
    1894:	e4c12001 	strb	r2, [r1], #1
	subs	r3, r3, #1
    1898:	e2533001 	subs	r3, r3, #1
	bgt		.clear_loop
    189c:	cafffffc 	bgt	1894 <.clear_loop>

000018a0 <.end_clear_loop>:

.end_clear_loop:

	/* Initialise data. */

	ldr		r1, .LC3			/* Start of memory block in RAM */
    18a0:	e59f104c 	ldr	r1, [pc, #76]	; 18f4 <endless_loop+0xc>
	ldr		r2, .LC4			/* Start of memory block in program code*/
    18a4:	e59f204c 	ldr	r2, [pc, #76]	; 18f8 <endless_loop+0x10>
	and		r5, r2, #4
    18a8:	e2025004 	and	r5, r2, #4
	subs	r5, r5, #0
    18ac:	e2555000 	subs	r5, r5, #0
	beq		.cont_calc
    18b0:	0a000000 	beq	18b8 <.cont_calc>
	add		r2, r2, #4
    18b4:	e2822004 	add	r2, r2, #4

000018b8 <.cont_calc>:

.cont_calc:
	sub		r2, r2, r1
    18b8:	e0422001 	sub	r2, r2, r1
	ldr		r3, .LC5			/* size of memory block */
    18bc:	e59f3038 	ldr	r3, [pc, #56]	; 18fc <endless_loop+0x14>
	subs	r3, r3, r1			/* Length of block */ /* !!! DATA ABORT || DAC failed !!! */
    18c0:	e0533001 	subs	r3, r3, r1
	beq		.end_set_loop
    18c4:	0a000003 	beq	18d8 <.end_set_loop>

000018c8 <.set_loop>:

.set_loop:
	ldrb	r4, [r2], #1
    18c8:	e4d24001 	ldrb	r4, [r2], #1
	strb	r4, [r1], #1
    18cc:	e4c14001 	strb	r4, [r1], #1
	subs	r3, r3, #1
    18d0:	e2533001 	subs	r3, r3, #1
	bgt		.set_loop
    18d4:	cafffffb 	bgt	18c8 <.set_loop>

000018d8 <.end_set_loop>:

.end_set_loop:

	mov		r0, #0          /* no arguments  */
    18d8:	e3a00000 	mov	r0, #0
	mov		r1, #0          /* no argv either */
    18dc:	e3a01000 	mov	r1, #0

	bl		SystemInit
    18e0:	eb0002fd 	bl	24dc <SystemInit>

	bl		main
    18e4:	eb000571 	bl	2eb0 <main>

000018e8 <endless_loop>:

endless_loop:
	b               endless_loop
    18e8:	eafffffe 	b	18e8 <endless_loop>
    18ec:	40000848 	.word	0x40000848
    18f0:	40000938 	.word	0x40000938
    18f4:	40000000 	.word	0x40000000
    18f8:	400052d8 	.word	0x400052d8
    18fc:	40000848 	.word	0x40000848
    1900:	4000fffc 	.word	0x4000fffc

00001904 <initSendCB>:
 * 					- LPC_UART3: UART3 peripheral
 *
 * @return		None
 */
static void initSendCB(uint8_t udev)
{
    1904:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
    1908:	e28db000 	add	fp, sp, #0
    190c:	e24dd00c 	sub	sp, sp, #12
    1910:	e1a03000 	mov	r3, r0
    1914:	e54b3005 	strb	r3, [fp, #-5]
	UART_STAT[udev].send.SendCB_Full  = FALSE;
    1918:	e55b2005 	ldrb	r2, [fp, #-5]
    191c:	e59f00d0 	ldr	r0, [pc, #208]	; 19f4 <initSendCB+0xf0>
    1920:	e3a01010 	mov	r1, #16
    1924:	e1a03002 	mov	r3, r2
    1928:	e1a03103 	lsl	r3, r3, #2
    192c:	e0833002 	add	r3, r3, r2
    1930:	e1a03083 	lsl	r3, r3, #1
    1934:	e0833002 	add	r3, r3, r2
    1938:	e1a03103 	lsl	r3, r3, #2
    193c:	e0803003 	add	r3, r0, r3
    1940:	e0833001 	add	r3, r3, r1
    1944:	e3a02000 	mov	r2, #0
    1948:	e5c32002 	strb	r2, [r3, #2]
	UART_STAT[udev].send.SendCB_Empty = TRUE;
    194c:	e55b2005 	ldrb	r2, [fp, #-5]
    1950:	e59f009c 	ldr	r0, [pc, #156]	; 19f4 <initSendCB+0xf0>
    1954:	e3a01010 	mov	r1, #16
    1958:	e1a03002 	mov	r3, r2
    195c:	e1a03103 	lsl	r3, r3, #2
    1960:	e0833002 	add	r3, r3, r2
    1964:	e1a03083 	lsl	r3, r3, #1
    1968:	e0833002 	add	r3, r3, r2
    196c:	e1a03103 	lsl	r3, r3, #2
    1970:	e0803003 	add	r3, r0, r3
    1974:	e0833001 	add	r3, r3, r1
    1978:	e3a02001 	mov	r2, #1
    197c:	e5c32003 	strb	r2, [r3, #3]
	UART_STAT[udev].send.SendCB_In	 = 0;
    1980:	e55b2005 	ldrb	r2, [fp, #-5]
    1984:	e59f0068 	ldr	r0, [pc, #104]	; 19f4 <initSendCB+0xf0>
    1988:	e3a01010 	mov	r1, #16
    198c:	e1a03002 	mov	r3, r2
    1990:	e1a03103 	lsl	r3, r3, #2
    1994:	e0833002 	add	r3, r3, r2
    1998:	e1a03083 	lsl	r3, r3, #1
    199c:	e0833002 	add	r3, r3, r2
    19a0:	e1a03103 	lsl	r3, r3, #2
    19a4:	e0803003 	add	r3, r0, r3
    19a8:	e0833001 	add	r3, r3, r1
    19ac:	e3a02000 	mov	r2, #0
    19b0:	e5c32000 	strb	r2, [r3]
	UART_STAT[udev].send.SendCB_Out	 = 0;
    19b4:	e55b2005 	ldrb	r2, [fp, #-5]
    19b8:	e59f0034 	ldr	r0, [pc, #52]	; 19f4 <initSendCB+0xf0>
    19bc:	e3a01010 	mov	r1, #16
    19c0:	e1a03002 	mov	r3, r2
    19c4:	e1a03103 	lsl	r3, r3, #2
    19c8:	e0833002 	add	r3, r3, r2
    19cc:	e1a03083 	lsl	r3, r3, #1
    19d0:	e0833002 	add	r3, r3, r2
    19d4:	e1a03103 	lsl	r3, r3, #2
    19d8:	e0803003 	add	r3, r0, r3
    19dc:	e0833001 	add	r3, r3, r1
    19e0:	e3a02000 	mov	r2, #0
    19e4:	e5c32001 	strb	r2, [r3, #1]
}
    19e8:	e28bd000 	add	sp, fp, #0
    19ec:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
    19f0:	e12fff1e 	bx	lr
    19f4:	40000884 	.word	0x40000884

000019f8 <initRecvCB>:
 * 					- LPC_UART3: UART3 peripheral
 *
 * @return		None
 */
static void initRecvCB(uint8_t udev)
{
    19f8:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
    19fc:	e28db000 	add	fp, sp, #0
    1a00:	e24dd00c 	sub	sp, sp, #12
    1a04:	e1a03000 	mov	r3, r0
    1a08:	e54b3005 	strb	r3, [fp, #-5]
	UART_STAT[udev].recv.RecvCB_Full  = FALSE;
    1a0c:	e55b2005 	ldrb	r2, [fp, #-5]
    1a10:	e59f00d0 	ldr	r0, [pc, #208]	; 1ae8 <initRecvCB+0xf0>
    1a14:	e3a01020 	mov	r1, #32
    1a18:	e1a03002 	mov	r3, r2
    1a1c:	e1a03103 	lsl	r3, r3, #2
    1a20:	e0833002 	add	r3, r3, r2
    1a24:	e1a03083 	lsl	r3, r3, #1
    1a28:	e0833002 	add	r3, r3, r2
    1a2c:	e1a03103 	lsl	r3, r3, #2
    1a30:	e0803003 	add	r3, r0, r3
    1a34:	e0833001 	add	r3, r3, r1
    1a38:	e3a02000 	mov	r2, #0
    1a3c:	e5c32006 	strb	r2, [r3, #6]
	UART_STAT[udev].recv.RecvCB_Empty = TRUE;
    1a40:	e55b2005 	ldrb	r2, [fp, #-5]
    1a44:	e59f009c 	ldr	r0, [pc, #156]	; 1ae8 <initRecvCB+0xf0>
    1a48:	e3a01020 	mov	r1, #32
    1a4c:	e1a03002 	mov	r3, r2
    1a50:	e1a03103 	lsl	r3, r3, #2
    1a54:	e0833002 	add	r3, r3, r2
    1a58:	e1a03083 	lsl	r3, r3, #1
    1a5c:	e0833002 	add	r3, r3, r2
    1a60:	e1a03103 	lsl	r3, r3, #2
    1a64:	e0803003 	add	r3, r0, r3
    1a68:	e0833001 	add	r3, r3, r1
    1a6c:	e3a02001 	mov	r2, #1
    1a70:	e5c32007 	strb	r2, [r3, #7]
	UART_STAT[udev].recv.RecvCB_In	 = 0;
    1a74:	e55b2005 	ldrb	r2, [fp, #-5]
    1a78:	e59f0068 	ldr	r0, [pc, #104]	; 1ae8 <initRecvCB+0xf0>
    1a7c:	e3a01020 	mov	r1, #32
    1a80:	e1a03002 	mov	r3, r2
    1a84:	e1a03103 	lsl	r3, r3, #2
    1a88:	e0833002 	add	r3, r3, r2
    1a8c:	e1a03083 	lsl	r3, r3, #1
    1a90:	e0833002 	add	r3, r3, r2
    1a94:	e1a03103 	lsl	r3, r3, #2
    1a98:	e0803003 	add	r3, r0, r3
    1a9c:	e0833001 	add	r3, r3, r1
    1aa0:	e3a02000 	mov	r2, #0
    1aa4:	e5c32004 	strb	r2, [r3, #4]
	UART_STAT[udev].recv.RecvCB_Out	 = 0;
    1aa8:	e55b2005 	ldrb	r2, [fp, #-5]
    1aac:	e59f0034 	ldr	r0, [pc, #52]	; 1ae8 <initRecvCB+0xf0>
    1ab0:	e3a01020 	mov	r1, #32
    1ab4:	e1a03002 	mov	r3, r2
    1ab8:	e1a03103 	lsl	r3, r3, #2
    1abc:	e0833002 	add	r3, r3, r2
    1ac0:	e1a03083 	lsl	r3, r3, #1
    1ac4:	e0833002 	add	r3, r3, r2
    1ac8:	e1a03103 	lsl	r3, r3, #2
    1acc:	e0803003 	add	r3, r0, r3
    1ad0:	e0833001 	add	r3, r3, r1
    1ad4:	e3a02000 	mov	r2, #0
    1ad8:	e5c32005 	strb	r2, [r3, #5]
}
    1adc:	e28bd000 	add	sp, fp, #0
    1ae0:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
    1ae4:	e12fff1e 	bx	lr
    1ae8:	40000884 	.word	0x40000884

00001aec <initCB>:
 * 					- LPC_UART3: UART3 peripheral
 *
 * @return		None
 */
void initCB(UART_T *dev)
{
    1aec:	e92d4800 	push	{fp, lr}
    1af0:	e28db004 	add	fp, sp, #4
    1af4:	e24dd010 	sub	sp, sp, #16
    1af8:	e50b0010 	str	r0, [fp, #-16]
	uint8_t udev;

	udev = uart_getDevInInt(dev);	/* get device number */
    1afc:	e51b0010 	ldr	r0, [fp, #-16]
    1b00:	ebffff1e 	bl	1780 <uart_getDevInInt>
    1b04:	e1a03000 	mov	r3, r0
    1b08:	e54b3005 	strb	r3, [fp, #-5]
	if(udev < 4)					/* between 0 and 3 */
    1b0c:	e55b3005 	ldrb	r3, [fp, #-5]
    1b10:	e3530003 	cmp	r3, #3
    1b14:	8a000005 	bhi	1b30 <initCB+0x44>
	{
		initSendCB(udev);
    1b18:	e55b3005 	ldrb	r3, [fp, #-5]
    1b1c:	e1a00003 	mov	r0, r3
    1b20:	ebffff77 	bl	1904 <initSendCB>
		initRecvCB(udev);
    1b24:	e55b3005 	ldrb	r3, [fp, #-5]
    1b28:	e1a00003 	mov	r0, r3
    1b2c:	ebffffb1 	bl	19f8 <initRecvCB>
	}
}
    1b30:	e24bd004 	sub	sp, fp, #4
    1b34:	e8bd4800 	pop	{fp, lr}
    1b38:	e12fff1e 	bx	lr

00001b3c <putSendCB>:
 * 					- LPC_UART3: UART3 peripheral
 *
 * @return		EOK if successful otherwise ECB!
 */
int32_t putSendCB(UART_T *dev, unsigned char c)
{
    1b3c:	e92d4800 	push	{fp, lr}
    1b40:	e28db004 	add	fp, sp, #4
    1b44:	e24dd010 	sub	sp, sp, #16
    1b48:	e50b0010 	str	r0, [fp, #-16]
    1b4c:	e1a03001 	mov	r3, r1
    1b50:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
	int32_t ret = ECB;
    1b54:	e3e03003 	mvn	r3, #3
    1b58:	e50b3008 	str	r3, [fp, #-8]
	uint8_t udev;

	udev = uart_getDevInInt(dev);	/* get device number */
    1b5c:	e51b0010 	ldr	r0, [fp, #-16]
    1b60:	ebffff06 	bl	1780 <uart_getDevInInt>
    1b64:	e1a03000 	mov	r3, r0
    1b68:	e54b3009 	strb	r3, [fp, #-9]
	if(udev >= 4)					/* error */
    1b6c:	e55b3009 	ldrb	r3, [fp, #-9]
    1b70:	e3530003 	cmp	r3, #3
    1b74:	9a000001 	bls	1b80 <putSendCB+0x44>
	{
		/* ERROR, *dev is wrong */
		return EINTERNAL;
    1b78:	e3e03000 	mvn	r3, #0
    1b7c:	ea000082 	b	1d8c <putSendCB+0x250>
	}

	if(UART_STAT[udev].send.SendCB_Full == FALSE){
    1b80:	e55b2009 	ldrb	r2, [fp, #-9]
    1b84:	e59f0210 	ldr	r0, [pc, #528]	; 1d9c <putSendCB+0x260>
    1b88:	e3a01010 	mov	r1, #16
    1b8c:	e1a03002 	mov	r3, r2
    1b90:	e1a03103 	lsl	r3, r3, #2
    1b94:	e0833002 	add	r3, r3, r2
    1b98:	e1a03083 	lsl	r3, r3, #1
    1b9c:	e0833002 	add	r3, r3, r2
    1ba0:	e1a03103 	lsl	r3, r3, #2
    1ba4:	e0803003 	add	r3, r0, r3
    1ba8:	e0833001 	add	r3, r3, r1
    1bac:	e5d33002 	ldrb	r3, [r3, #2]
    1bb0:	e20330ff 	and	r3, r3, #255	; 0xff
    1bb4:	e3530000 	cmp	r3, #0
    1bb8:	1a000065 	bne	1d54 <putSendCB+0x218>
		UART_STAT[udev].send.SendCB_Array[UART_STAT[udev].send.SendCB_In] = c;
    1bbc:	e55b2009 	ldrb	r2, [fp, #-9]
    1bc0:	e55b1009 	ldrb	r1, [fp, #-9]
    1bc4:	e59fc1d0 	ldr	ip, [pc, #464]	; 1d9c <putSendCB+0x260>
    1bc8:	e3a00010 	mov	r0, #16
    1bcc:	e1a03001 	mov	r3, r1
    1bd0:	e1a03103 	lsl	r3, r3, #2
    1bd4:	e0833001 	add	r3, r3, r1
    1bd8:	e1a03083 	lsl	r3, r3, #1
    1bdc:	e0833001 	add	r3, r3, r1
    1be0:	e1a03103 	lsl	r3, r3, #2
    1be4:	e08c3003 	add	r3, ip, r3
    1be8:	e0833000 	add	r3, r3, r0
    1bec:	e5d33000 	ldrb	r3, [r3]
    1bf0:	e20330ff 	and	r3, r3, #255	; 0xff
    1bf4:	e1a00003 	mov	r0, r3
    1bf8:	e59f119c 	ldr	r1, [pc, #412]	; 1d9c <putSendCB+0x260>
    1bfc:	e1a03002 	mov	r3, r2
    1c00:	e1a03103 	lsl	r3, r3, #2
    1c04:	e0833002 	add	r3, r3, r2
    1c08:	e1a03083 	lsl	r3, r3, #1
    1c0c:	e0833002 	add	r3, r3, r2
    1c10:	e1a03103 	lsl	r3, r3, #2
    1c14:	e0833000 	add	r3, r3, r0
    1c18:	e0813003 	add	r3, r1, r3
    1c1c:	e55b2011 	ldrb	r2, [fp, #-17]	; 0xffffffef
    1c20:	e5c32000 	strb	r2, [r3]
		UART_STAT[udev].send.SendCB_In = (UART_STAT[udev].send.SendCB_In + 1) % CB_SIZE;
    1c24:	e55b2009 	ldrb	r2, [fp, #-9]
    1c28:	e55b1009 	ldrb	r1, [fp, #-9]
    1c2c:	e59fc168 	ldr	ip, [pc, #360]	; 1d9c <putSendCB+0x260>
    1c30:	e3a00010 	mov	r0, #16
    1c34:	e1a03001 	mov	r3, r1
    1c38:	e1a03103 	lsl	r3, r3, #2
    1c3c:	e0833001 	add	r3, r3, r1
    1c40:	e1a03083 	lsl	r3, r3, #1
    1c44:	e0833001 	add	r3, r3, r1
    1c48:	e1a03103 	lsl	r3, r3, #2
    1c4c:	e08c3003 	add	r3, ip, r3
    1c50:	e0833000 	add	r3, r3, r0
    1c54:	e5d33000 	ldrb	r3, [r3]
    1c58:	e20330ff 	and	r3, r3, #255	; 0xff
    1c5c:	e2831001 	add	r1, r3, #1
    1c60:	e1a03fc1 	asr	r3, r1, #31
    1c64:	e1a03e23 	lsr	r3, r3, #28
    1c68:	e0811003 	add	r1, r1, r3
    1c6c:	e201100f 	and	r1, r1, #15
    1c70:	e0633001 	rsb	r3, r3, r1
    1c74:	e20310ff 	and	r1, r3, #255	; 0xff
    1c78:	e59fc11c 	ldr	ip, [pc, #284]	; 1d9c <putSendCB+0x260>
    1c7c:	e3a00010 	mov	r0, #16
    1c80:	e1a03002 	mov	r3, r2
    1c84:	e1a03103 	lsl	r3, r3, #2
    1c88:	e0833002 	add	r3, r3, r2
    1c8c:	e1a03083 	lsl	r3, r3, #1
    1c90:	e0833002 	add	r3, r3, r2
    1c94:	e1a03103 	lsl	r3, r3, #2
    1c98:	e08c3003 	add	r3, ip, r3
    1c9c:	e0833000 	add	r3, r3, r0
    1ca0:	e1a02001 	mov	r2, r1
    1ca4:	e5c32000 	strb	r2, [r3]
		if(UART_STAT[udev].send.SendCB_In == UART_STAT[udev].send.SendCB_Out){
    1ca8:	e55b2009 	ldrb	r2, [fp, #-9]
    1cac:	e59f00e8 	ldr	r0, [pc, #232]	; 1d9c <putSendCB+0x260>
    1cb0:	e3a01010 	mov	r1, #16
    1cb4:	e1a03002 	mov	r3, r2
    1cb8:	e1a03103 	lsl	r3, r3, #2
    1cbc:	e0833002 	add	r3, r3, r2
    1cc0:	e1a03083 	lsl	r3, r3, #1
    1cc4:	e0833002 	add	r3, r3, r2
    1cc8:	e1a03103 	lsl	r3, r3, #2
    1ccc:	e0803003 	add	r3, r0, r3
    1cd0:	e0833001 	add	r3, r3, r1
    1cd4:	e5d33000 	ldrb	r3, [r3]
    1cd8:	e20310ff 	and	r1, r3, #255	; 0xff
    1cdc:	e55b2009 	ldrb	r2, [fp, #-9]
    1ce0:	e59fc0b4 	ldr	ip, [pc, #180]	; 1d9c <putSendCB+0x260>
    1ce4:	e3a00010 	mov	r0, #16
    1ce8:	e1a03002 	mov	r3, r2
    1cec:	e1a03103 	lsl	r3, r3, #2
    1cf0:	e0833002 	add	r3, r3, r2
    1cf4:	e1a03083 	lsl	r3, r3, #1
    1cf8:	e0833002 	add	r3, r3, r2
    1cfc:	e1a03103 	lsl	r3, r3, #2
    1d00:	e08c3003 	add	r3, ip, r3
    1d04:	e0833000 	add	r3, r3, r0
    1d08:	e5d33001 	ldrb	r3, [r3, #1]
    1d0c:	e20330ff 	and	r3, r3, #255	; 0xff
    1d10:	e1510003 	cmp	r1, r3
    1d14:	1a00000c 	bne	1d4c <putSendCB+0x210>
			UART_STAT[udev].send.SendCB_Full = TRUE;
    1d18:	e55b2009 	ldrb	r2, [fp, #-9]
    1d1c:	e59f0078 	ldr	r0, [pc, #120]	; 1d9c <putSendCB+0x260>
    1d20:	e3a01010 	mov	r1, #16
    1d24:	e1a03002 	mov	r3, r2
    1d28:	e1a03103 	lsl	r3, r3, #2
    1d2c:	e0833002 	add	r3, r3, r2
    1d30:	e1a03083 	lsl	r3, r3, #1
    1d34:	e0833002 	add	r3, r3, r2
    1d38:	e1a03103 	lsl	r3, r3, #2
    1d3c:	e0803003 	add	r3, r0, r3
    1d40:	e0833001 	add	r3, r3, r1
    1d44:	e3a02001 	mov	r2, #1
    1d48:	e5c32002 	strb	r2, [r3, #2]
		}
		ret = EOK;
    1d4c:	e3a03000 	mov	r3, #0
    1d50:	e50b3008 	str	r3, [fp, #-8]
	}
	UART_STAT[udev].send.SendCB_Empty = FALSE;
    1d54:	e55b2009 	ldrb	r2, [fp, #-9]
    1d58:	e59f003c 	ldr	r0, [pc, #60]	; 1d9c <putSendCB+0x260>
    1d5c:	e3a01010 	mov	r1, #16
    1d60:	e1a03002 	mov	r3, r2
    1d64:	e1a03103 	lsl	r3, r3, #2
    1d68:	e0833002 	add	r3, r3, r2
    1d6c:	e1a03083 	lsl	r3, r3, #1
    1d70:	e0833002 	add	r3, r3, r2
    1d74:	e1a03103 	lsl	r3, r3, #2
    1d78:	e0803003 	add	r3, r0, r3
    1d7c:	e0833001 	add	r3, r3, r1
    1d80:	e3a02000 	mov	r2, #0
    1d84:	e5c32003 	strb	r2, [r3, #3]
	return ret;
    1d88:	e51b3008 	ldr	r3, [fp, #-8]
}
    1d8c:	e1a00003 	mov	r0, r3
    1d90:	e24bd004 	sub	sp, fp, #4
    1d94:	e8bd4800 	pop	{fp, lr}
    1d98:	e12fff1e 	bx	lr
    1d9c:	40000884 	.word	0x40000884

00001da0 <getSendCB>:
 * 					- LPC_UART3: UART3 peripheral
 *
 * @return		EOK if successful otherwise ECB!
 */
int32_t getSendCB(UART_T *dev, unsigned char *i)
{
    1da0:	e92d4800 	push	{fp, lr}
    1da4:	e28db004 	add	fp, sp, #4
    1da8:	e24dd010 	sub	sp, sp, #16
    1dac:	e50b0010 	str	r0, [fp, #-16]
    1db0:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
	int32_t ret = ECB;
    1db4:	e3e03003 	mvn	r3, #3
    1db8:	e50b3008 	str	r3, [fp, #-8]
	uint8_t udev;

	udev = uart_getDevInInt(dev);	/* get device number */
    1dbc:	e51b0010 	ldr	r0, [fp, #-16]
    1dc0:	ebfffe6e 	bl	1780 <uart_getDevInInt>
    1dc4:	e1a03000 	mov	r3, r0
    1dc8:	e54b3009 	strb	r3, [fp, #-9]
	if(udev >= 4)					/* error */
    1dcc:	e55b3009 	ldrb	r3, [fp, #-9]
    1dd0:	e3530003 	cmp	r3, #3
    1dd4:	9a000001 	bls	1de0 <getSendCB+0x40>
	{
		/* ERROR, *dev is wrong */
		return EINTERNAL;
    1dd8:	e3e03000 	mvn	r3, #0
    1ddc:	ea000083 	b	1ff0 <getSendCB+0x250>
	}

	if(UART_STAT[udev].send.SendCB_Empty == FALSE){
    1de0:	e55b2009 	ldrb	r2, [fp, #-9]
    1de4:	e59f0214 	ldr	r0, [pc, #532]	; 2000 <getSendCB+0x260>
    1de8:	e3a01010 	mov	r1, #16
    1dec:	e1a03002 	mov	r3, r2
    1df0:	e1a03103 	lsl	r3, r3, #2
    1df4:	e0833002 	add	r3, r3, r2
    1df8:	e1a03083 	lsl	r3, r3, #1
    1dfc:	e0833002 	add	r3, r3, r2
    1e00:	e1a03103 	lsl	r3, r3, #2
    1e04:	e0803003 	add	r3, r0, r3
    1e08:	e0833001 	add	r3, r3, r1
    1e0c:	e5d33003 	ldrb	r3, [r3, #3]
    1e10:	e20330ff 	and	r3, r3, #255	; 0xff
    1e14:	e3530000 	cmp	r3, #0
    1e18:	1a000066 	bne	1fb8 <getSendCB+0x218>
		*i = UART_STAT[udev].send.SendCB_Array[UART_STAT[udev].send.SendCB_Out];
    1e1c:	e55b2009 	ldrb	r2, [fp, #-9]
    1e20:	e55b1009 	ldrb	r1, [fp, #-9]
    1e24:	e59fc1d4 	ldr	ip, [pc, #468]	; 2000 <getSendCB+0x260>
    1e28:	e3a00010 	mov	r0, #16
    1e2c:	e1a03001 	mov	r3, r1
    1e30:	e1a03103 	lsl	r3, r3, #2
    1e34:	e0833001 	add	r3, r3, r1
    1e38:	e1a03083 	lsl	r3, r3, #1
    1e3c:	e0833001 	add	r3, r3, r1
    1e40:	e1a03103 	lsl	r3, r3, #2
    1e44:	e08c3003 	add	r3, ip, r3
    1e48:	e0833000 	add	r3, r3, r0
    1e4c:	e5d33001 	ldrb	r3, [r3, #1]
    1e50:	e20330ff 	and	r3, r3, #255	; 0xff
    1e54:	e1a00003 	mov	r0, r3
    1e58:	e59f11a0 	ldr	r1, [pc, #416]	; 2000 <getSendCB+0x260>
    1e5c:	e1a03002 	mov	r3, r2
    1e60:	e1a03103 	lsl	r3, r3, #2
    1e64:	e0833002 	add	r3, r3, r2
    1e68:	e1a03083 	lsl	r3, r3, #1
    1e6c:	e0833002 	add	r3, r3, r2
    1e70:	e1a03103 	lsl	r3, r3, #2
    1e74:	e0833000 	add	r3, r3, r0
    1e78:	e0813003 	add	r3, r1, r3
    1e7c:	e5d32000 	ldrb	r2, [r3]
    1e80:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
    1e84:	e5c32000 	strb	r2, [r3]
		UART_STAT[udev].send.SendCB_Out = (UART_STAT[udev].send.SendCB_Out + 1) % CB_SIZE;
    1e88:	e55b2009 	ldrb	r2, [fp, #-9]
    1e8c:	e55b1009 	ldrb	r1, [fp, #-9]
    1e90:	e59fc168 	ldr	ip, [pc, #360]	; 2000 <getSendCB+0x260>
    1e94:	e3a00010 	mov	r0, #16
    1e98:	e1a03001 	mov	r3, r1
    1e9c:	e1a03103 	lsl	r3, r3, #2
    1ea0:	e0833001 	add	r3, r3, r1
    1ea4:	e1a03083 	lsl	r3, r3, #1
    1ea8:	e0833001 	add	r3, r3, r1
    1eac:	e1a03103 	lsl	r3, r3, #2
    1eb0:	e08c3003 	add	r3, ip, r3
    1eb4:	e0833000 	add	r3, r3, r0
    1eb8:	e5d33001 	ldrb	r3, [r3, #1]
    1ebc:	e20330ff 	and	r3, r3, #255	; 0xff
    1ec0:	e2831001 	add	r1, r3, #1
    1ec4:	e1a03fc1 	asr	r3, r1, #31
    1ec8:	e1a03e23 	lsr	r3, r3, #28
    1ecc:	e0811003 	add	r1, r1, r3
    1ed0:	e201100f 	and	r1, r1, #15
    1ed4:	e0633001 	rsb	r3, r3, r1
    1ed8:	e20310ff 	and	r1, r3, #255	; 0xff
    1edc:	e59fc11c 	ldr	ip, [pc, #284]	; 2000 <getSendCB+0x260>
    1ee0:	e3a00010 	mov	r0, #16
    1ee4:	e1a03002 	mov	r3, r2
    1ee8:	e1a03103 	lsl	r3, r3, #2
    1eec:	e0833002 	add	r3, r3, r2
    1ef0:	e1a03083 	lsl	r3, r3, #1
    1ef4:	e0833002 	add	r3, r3, r2
    1ef8:	e1a03103 	lsl	r3, r3, #2
    1efc:	e08c3003 	add	r3, ip, r3
    1f00:	e0833000 	add	r3, r3, r0
    1f04:	e1a02001 	mov	r2, r1
    1f08:	e5c32001 	strb	r2, [r3, #1]
		if(UART_STAT[udev].send.SendCB_In == UART_STAT[udev].send.SendCB_Out){
    1f0c:	e55b2009 	ldrb	r2, [fp, #-9]
    1f10:	e59f00e8 	ldr	r0, [pc, #232]	; 2000 <getSendCB+0x260>
    1f14:	e3a01010 	mov	r1, #16
    1f18:	e1a03002 	mov	r3, r2
    1f1c:	e1a03103 	lsl	r3, r3, #2
    1f20:	e0833002 	add	r3, r3, r2
    1f24:	e1a03083 	lsl	r3, r3, #1
    1f28:	e0833002 	add	r3, r3, r2
    1f2c:	e1a03103 	lsl	r3, r3, #2
    1f30:	e0803003 	add	r3, r0, r3
    1f34:	e0833001 	add	r3, r3, r1
    1f38:	e5d33000 	ldrb	r3, [r3]
    1f3c:	e20310ff 	and	r1, r3, #255	; 0xff
    1f40:	e55b2009 	ldrb	r2, [fp, #-9]
    1f44:	e59fc0b4 	ldr	ip, [pc, #180]	; 2000 <getSendCB+0x260>
    1f48:	e3a00010 	mov	r0, #16
    1f4c:	e1a03002 	mov	r3, r2
    1f50:	e1a03103 	lsl	r3, r3, #2
    1f54:	e0833002 	add	r3, r3, r2
    1f58:	e1a03083 	lsl	r3, r3, #1
    1f5c:	e0833002 	add	r3, r3, r2
    1f60:	e1a03103 	lsl	r3, r3, #2
    1f64:	e08c3003 	add	r3, ip, r3
    1f68:	e0833000 	add	r3, r3, r0
    1f6c:	e5d33001 	ldrb	r3, [r3, #1]
    1f70:	e20330ff 	and	r3, r3, #255	; 0xff
    1f74:	e1510003 	cmp	r1, r3
    1f78:	1a00000c 	bne	1fb0 <getSendCB+0x210>
			UART_STAT[udev].send.SendCB_Empty = TRUE;
    1f7c:	e55b2009 	ldrb	r2, [fp, #-9]
    1f80:	e59f0078 	ldr	r0, [pc, #120]	; 2000 <getSendCB+0x260>
    1f84:	e3a01010 	mov	r1, #16
    1f88:	e1a03002 	mov	r3, r2
    1f8c:	e1a03103 	lsl	r3, r3, #2
    1f90:	e0833002 	add	r3, r3, r2
    1f94:	e1a03083 	lsl	r3, r3, #1
    1f98:	e0833002 	add	r3, r3, r2
    1f9c:	e1a03103 	lsl	r3, r3, #2
    1fa0:	e0803003 	add	r3, r0, r3
    1fa4:	e0833001 	add	r3, r3, r1
    1fa8:	e3a02001 	mov	r2, #1
    1fac:	e5c32003 	strb	r2, [r3, #3]
		}
		ret = EOK;
    1fb0:	e3a03000 	mov	r3, #0
    1fb4:	e50b3008 	str	r3, [fp, #-8]
	}
	UART_STAT[udev].send.SendCB_Full = FALSE;
    1fb8:	e55b2009 	ldrb	r2, [fp, #-9]
    1fbc:	e59f003c 	ldr	r0, [pc, #60]	; 2000 <getSendCB+0x260>
    1fc0:	e3a01010 	mov	r1, #16
    1fc4:	e1a03002 	mov	r3, r2
    1fc8:	e1a03103 	lsl	r3, r3, #2
    1fcc:	e0833002 	add	r3, r3, r2
    1fd0:	e1a03083 	lsl	r3, r3, #1
    1fd4:	e0833002 	add	r3, r3, r2
    1fd8:	e1a03103 	lsl	r3, r3, #2
    1fdc:	e0803003 	add	r3, r0, r3
    1fe0:	e0833001 	add	r3, r3, r1
    1fe4:	e3a02000 	mov	r2, #0
    1fe8:	e5c32002 	strb	r2, [r3, #2]
	return ret;
    1fec:	e51b3008 	ldr	r3, [fp, #-8]
}
    1ff0:	e1a00003 	mov	r0, r3
    1ff4:	e24bd004 	sub	sp, fp, #4
    1ff8:	e8bd4800 	pop	{fp, lr}
    1ffc:	e12fff1e 	bx	lr
    2000:	40000884 	.word	0x40000884

00002004 <putRecvCB>:
 * 					- LPC_UART3: UART3 peripheral
 *
 * @return		EOK if successful otherwise ECB!
 */
int32_t putRecvCB(UART_T *dev, unsigned char c)
{
    2004:	e92d4800 	push	{fp, lr}
    2008:	e28db004 	add	fp, sp, #4
    200c:	e24dd010 	sub	sp, sp, #16
    2010:	e50b0010 	str	r0, [fp, #-16]
    2014:	e1a03001 	mov	r3, r1
    2018:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
	int32_t ret = ECB;
    201c:	e3e03003 	mvn	r3, #3
    2020:	e50b3008 	str	r3, [fp, #-8]
	uint8_t udev;

	udev = uart_getDevInInt(dev);	/* get device number */
    2024:	e51b0010 	ldr	r0, [fp, #-16]
    2028:	ebfffdd4 	bl	1780 <uart_getDevInInt>
    202c:	e1a03000 	mov	r3, r0
    2030:	e54b3009 	strb	r3, [fp, #-9]
	if(udev >= 4)					/* error */
    2034:	e55b3009 	ldrb	r3, [fp, #-9]
    2038:	e3530003 	cmp	r3, #3
    203c:	9a000001 	bls	2048 <putRecvCB+0x44>
	{
		/* ERROR, *dev is wrong */
		return EINTERNAL;
    2040:	e3e03000 	mvn	r3, #0
    2044:	ea000084 	b	225c <putRecvCB+0x258>
	}

	if(UART_STAT[udev].recv.RecvCB_Full == FALSE){
    2048:	e55b2009 	ldrb	r2, [fp, #-9]
    204c:	e59f0218 	ldr	r0, [pc, #536]	; 226c <putRecvCB+0x268>
    2050:	e3a01020 	mov	r1, #32
    2054:	e1a03002 	mov	r3, r2
    2058:	e1a03103 	lsl	r3, r3, #2
    205c:	e0833002 	add	r3, r3, r2
    2060:	e1a03083 	lsl	r3, r3, #1
    2064:	e0833002 	add	r3, r3, r2
    2068:	e1a03103 	lsl	r3, r3, #2
    206c:	e0803003 	add	r3, r0, r3
    2070:	e0833001 	add	r3, r3, r1
    2074:	e5d33006 	ldrb	r3, [r3, #6]
    2078:	e20330ff 	and	r3, r3, #255	; 0xff
    207c:	e3530000 	cmp	r3, #0
    2080:	1a000067 	bne	2224 <putRecvCB+0x220>
		UART_STAT[udev].recv.RecvCB_Array[UART_STAT[udev].recv.RecvCB_In] = c;
    2084:	e55b2009 	ldrb	r2, [fp, #-9]
    2088:	e55b1009 	ldrb	r1, [fp, #-9]
    208c:	e59fc1d8 	ldr	ip, [pc, #472]	; 226c <putRecvCB+0x268>
    2090:	e3a00020 	mov	r0, #32
    2094:	e1a03001 	mov	r3, r1
    2098:	e1a03103 	lsl	r3, r3, #2
    209c:	e0833001 	add	r3, r3, r1
    20a0:	e1a03083 	lsl	r3, r3, #1
    20a4:	e0833001 	add	r3, r3, r1
    20a8:	e1a03103 	lsl	r3, r3, #2
    20ac:	e08c3003 	add	r3, ip, r3
    20b0:	e0833000 	add	r3, r3, r0
    20b4:	e5d33004 	ldrb	r3, [r3, #4]
    20b8:	e20330ff 	and	r3, r3, #255	; 0xff
    20bc:	e1a00003 	mov	r0, r3
    20c0:	e59fc1a4 	ldr	ip, [pc, #420]	; 226c <putRecvCB+0x268>
    20c4:	e3a01010 	mov	r1, #16
    20c8:	e1a03002 	mov	r3, r2
    20cc:	e1a03103 	lsl	r3, r3, #2
    20d0:	e0833002 	add	r3, r3, r2
    20d4:	e1a03083 	lsl	r3, r3, #1
    20d8:	e0833002 	add	r3, r3, r2
    20dc:	e1a03103 	lsl	r3, r3, #2
    20e0:	e08c3003 	add	r3, ip, r3
    20e4:	e0833000 	add	r3, r3, r0
    20e8:	e0833001 	add	r3, r3, r1
    20ec:	e55b2011 	ldrb	r2, [fp, #-17]	; 0xffffffef
    20f0:	e5c32004 	strb	r2, [r3, #4]
		UART_STAT[udev].recv.RecvCB_In = (UART_STAT[udev].recv.RecvCB_In + 1) % CB_SIZE;
    20f4:	e55b2009 	ldrb	r2, [fp, #-9]
    20f8:	e55b1009 	ldrb	r1, [fp, #-9]
    20fc:	e59fc168 	ldr	ip, [pc, #360]	; 226c <putRecvCB+0x268>
    2100:	e3a00020 	mov	r0, #32
    2104:	e1a03001 	mov	r3, r1
    2108:	e1a03103 	lsl	r3, r3, #2
    210c:	e0833001 	add	r3, r3, r1
    2110:	e1a03083 	lsl	r3, r3, #1
    2114:	e0833001 	add	r3, r3, r1
    2118:	e1a03103 	lsl	r3, r3, #2
    211c:	e08c3003 	add	r3, ip, r3
    2120:	e0833000 	add	r3, r3, r0
    2124:	e5d33004 	ldrb	r3, [r3, #4]
    2128:	e20330ff 	and	r3, r3, #255	; 0xff
    212c:	e2831001 	add	r1, r3, #1
    2130:	e1a03fc1 	asr	r3, r1, #31
    2134:	e1a03e23 	lsr	r3, r3, #28
    2138:	e0811003 	add	r1, r1, r3
    213c:	e201100f 	and	r1, r1, #15
    2140:	e0633001 	rsb	r3, r3, r1
    2144:	e20310ff 	and	r1, r3, #255	; 0xff
    2148:	e59fc11c 	ldr	ip, [pc, #284]	; 226c <putRecvCB+0x268>
    214c:	e3a00020 	mov	r0, #32
    2150:	e1a03002 	mov	r3, r2
    2154:	e1a03103 	lsl	r3, r3, #2
    2158:	e0833002 	add	r3, r3, r2
    215c:	e1a03083 	lsl	r3, r3, #1
    2160:	e0833002 	add	r3, r3, r2
    2164:	e1a03103 	lsl	r3, r3, #2
    2168:	e08c3003 	add	r3, ip, r3
    216c:	e0833000 	add	r3, r3, r0
    2170:	e1a02001 	mov	r2, r1
    2174:	e5c32004 	strb	r2, [r3, #4]
		if(UART_STAT[udev].recv.RecvCB_In == UART_STAT[udev].recv.RecvCB_Out){
    2178:	e55b2009 	ldrb	r2, [fp, #-9]
    217c:	e59f00e8 	ldr	r0, [pc, #232]	; 226c <putRecvCB+0x268>
    2180:	e3a01020 	mov	r1, #32
    2184:	e1a03002 	mov	r3, r2
    2188:	e1a03103 	lsl	r3, r3, #2
    218c:	e0833002 	add	r3, r3, r2
    2190:	e1a03083 	lsl	r3, r3, #1
    2194:	e0833002 	add	r3, r3, r2
    2198:	e1a03103 	lsl	r3, r3, #2
    219c:	e0803003 	add	r3, r0, r3
    21a0:	e0833001 	add	r3, r3, r1
    21a4:	e5d33004 	ldrb	r3, [r3, #4]
    21a8:	e20310ff 	and	r1, r3, #255	; 0xff
    21ac:	e55b2009 	ldrb	r2, [fp, #-9]
    21b0:	e59fc0b4 	ldr	ip, [pc, #180]	; 226c <putRecvCB+0x268>
    21b4:	e3a00020 	mov	r0, #32
    21b8:	e1a03002 	mov	r3, r2
    21bc:	e1a03103 	lsl	r3, r3, #2
    21c0:	e0833002 	add	r3, r3, r2
    21c4:	e1a03083 	lsl	r3, r3, #1
    21c8:	e0833002 	add	r3, r3, r2
    21cc:	e1a03103 	lsl	r3, r3, #2
    21d0:	e08c3003 	add	r3, ip, r3
    21d4:	e0833000 	add	r3, r3, r0
    21d8:	e5d33005 	ldrb	r3, [r3, #5]
    21dc:	e20330ff 	and	r3, r3, #255	; 0xff
    21e0:	e1510003 	cmp	r1, r3
    21e4:	1a00000c 	bne	221c <putRecvCB+0x218>
			UART_STAT[udev].recv.RecvCB_Full = TRUE;
    21e8:	e55b2009 	ldrb	r2, [fp, #-9]
    21ec:	e59f0078 	ldr	r0, [pc, #120]	; 226c <putRecvCB+0x268>
    21f0:	e3a01020 	mov	r1, #32
    21f4:	e1a03002 	mov	r3, r2
    21f8:	e1a03103 	lsl	r3, r3, #2
    21fc:	e0833002 	add	r3, r3, r2
    2200:	e1a03083 	lsl	r3, r3, #1
    2204:	e0833002 	add	r3, r3, r2
    2208:	e1a03103 	lsl	r3, r3, #2
    220c:	e0803003 	add	r3, r0, r3
    2210:	e0833001 	add	r3, r3, r1
    2214:	e3a02001 	mov	r2, #1
    2218:	e5c32006 	strb	r2, [r3, #6]
		}
		ret = EOK;
    221c:	e3a03000 	mov	r3, #0
    2220:	e50b3008 	str	r3, [fp, #-8]
	}
	UART_STAT[udev].recv.RecvCB_Empty = FALSE;
    2224:	e55b2009 	ldrb	r2, [fp, #-9]
    2228:	e59f003c 	ldr	r0, [pc, #60]	; 226c <putRecvCB+0x268>
    222c:	e3a01020 	mov	r1, #32
    2230:	e1a03002 	mov	r3, r2
    2234:	e1a03103 	lsl	r3, r3, #2
    2238:	e0833002 	add	r3, r3, r2
    223c:	e1a03083 	lsl	r3, r3, #1
    2240:	e0833002 	add	r3, r3, r2
    2244:	e1a03103 	lsl	r3, r3, #2
    2248:	e0803003 	add	r3, r0, r3
    224c:	e0833001 	add	r3, r3, r1
    2250:	e3a02000 	mov	r2, #0
    2254:	e5c32007 	strb	r2, [r3, #7]
	return ret;
    2258:	e51b3008 	ldr	r3, [fp, #-8]
}
    225c:	e1a00003 	mov	r0, r3
    2260:	e24bd004 	sub	sp, fp, #4
    2264:	e8bd4800 	pop	{fp, lr}
    2268:	e12fff1e 	bx	lr
    226c:	40000884 	.word	0x40000884

00002270 <getRecvCB>:
 * 					- LPC_UART3: UART3 peripheral
 *
 * @return		EOK if successful otherwise ECB!
 */
int32_t getRecvCB(UART_T *dev, unsigned char *i)
{
    2270:	e92d4800 	push	{fp, lr}
    2274:	e28db004 	add	fp, sp, #4
    2278:	e24dd010 	sub	sp, sp, #16
    227c:	e50b0010 	str	r0, [fp, #-16]
    2280:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
	int32_t ret = ECB;
    2284:	e3e03003 	mvn	r3, #3
    2288:	e50b3008 	str	r3, [fp, #-8]
	uint8_t udev;

	udev = uart_getDevInInt(dev);	/* get device number */
    228c:	e51b0010 	ldr	r0, [fp, #-16]
    2290:	ebfffd3a 	bl	1780 <uart_getDevInInt>
    2294:	e1a03000 	mov	r3, r0
    2298:	e54b3009 	strb	r3, [fp, #-9]
	if(udev >= 4)					/* error */
    229c:	e55b3009 	ldrb	r3, [fp, #-9]
    22a0:	e3530003 	cmp	r3, #3
    22a4:	9a000001 	bls	22b0 <getRecvCB+0x40>
	{
		/* ERROR, *dev is wrong */
		return EINTERNAL;
    22a8:	e3e03000 	mvn	r3, #0
    22ac:	ea000085 	b	24c8 <getRecvCB+0x258>
	}

	if(UART_STAT[udev].recv.RecvCB_Empty == FALSE){
    22b0:	e55b2009 	ldrb	r2, [fp, #-9]
    22b4:	e59f021c 	ldr	r0, [pc, #540]	; 24d8 <getRecvCB+0x268>
    22b8:	e3a01020 	mov	r1, #32
    22bc:	e1a03002 	mov	r3, r2
    22c0:	e1a03103 	lsl	r3, r3, #2
    22c4:	e0833002 	add	r3, r3, r2
    22c8:	e1a03083 	lsl	r3, r3, #1
    22cc:	e0833002 	add	r3, r3, r2
    22d0:	e1a03103 	lsl	r3, r3, #2
    22d4:	e0803003 	add	r3, r0, r3
    22d8:	e0833001 	add	r3, r3, r1
    22dc:	e5d33007 	ldrb	r3, [r3, #7]
    22e0:	e20330ff 	and	r3, r3, #255	; 0xff
    22e4:	e3530000 	cmp	r3, #0
    22e8:	1a000068 	bne	2490 <getRecvCB+0x220>
		*i = UART_STAT[udev].recv.RecvCB_Array[UART_STAT[udev].recv.RecvCB_Out];
    22ec:	e55b2009 	ldrb	r2, [fp, #-9]
    22f0:	e55b1009 	ldrb	r1, [fp, #-9]
    22f4:	e59fc1dc 	ldr	ip, [pc, #476]	; 24d8 <getRecvCB+0x268>
    22f8:	e3a00020 	mov	r0, #32
    22fc:	e1a03001 	mov	r3, r1
    2300:	e1a03103 	lsl	r3, r3, #2
    2304:	e0833001 	add	r3, r3, r1
    2308:	e1a03083 	lsl	r3, r3, #1
    230c:	e0833001 	add	r3, r3, r1
    2310:	e1a03103 	lsl	r3, r3, #2
    2314:	e08c3003 	add	r3, ip, r3
    2318:	e0833000 	add	r3, r3, r0
    231c:	e5d33005 	ldrb	r3, [r3, #5]
    2320:	e20330ff 	and	r3, r3, #255	; 0xff
    2324:	e1a00003 	mov	r0, r3
    2328:	e59fc1a8 	ldr	ip, [pc, #424]	; 24d8 <getRecvCB+0x268>
    232c:	e3a01010 	mov	r1, #16
    2330:	e1a03002 	mov	r3, r2
    2334:	e1a03103 	lsl	r3, r3, #2
    2338:	e0833002 	add	r3, r3, r2
    233c:	e1a03083 	lsl	r3, r3, #1
    2340:	e0833002 	add	r3, r3, r2
    2344:	e1a03103 	lsl	r3, r3, #2
    2348:	e08c3003 	add	r3, ip, r3
    234c:	e0833000 	add	r3, r3, r0
    2350:	e0833001 	add	r3, r3, r1
    2354:	e5d32004 	ldrb	r2, [r3, #4]
    2358:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
    235c:	e5c32000 	strb	r2, [r3]
		UART_STAT[udev].recv.RecvCB_Out = (UART_STAT[udev].recv.RecvCB_Out + 1) % CB_SIZE;
    2360:	e55b2009 	ldrb	r2, [fp, #-9]
    2364:	e55b1009 	ldrb	r1, [fp, #-9]
    2368:	e59fc168 	ldr	ip, [pc, #360]	; 24d8 <getRecvCB+0x268>
    236c:	e3a00020 	mov	r0, #32
    2370:	e1a03001 	mov	r3, r1
    2374:	e1a03103 	lsl	r3, r3, #2
    2378:	e0833001 	add	r3, r3, r1
    237c:	e1a03083 	lsl	r3, r3, #1
    2380:	e0833001 	add	r3, r3, r1
    2384:	e1a03103 	lsl	r3, r3, #2
    2388:	e08c3003 	add	r3, ip, r3
    238c:	e0833000 	add	r3, r3, r0
    2390:	e5d33005 	ldrb	r3, [r3, #5]
    2394:	e20330ff 	and	r3, r3, #255	; 0xff
    2398:	e2831001 	add	r1, r3, #1
    239c:	e1a03fc1 	asr	r3, r1, #31
    23a0:	e1a03e23 	lsr	r3, r3, #28
    23a4:	e0811003 	add	r1, r1, r3
    23a8:	e201100f 	and	r1, r1, #15
    23ac:	e0633001 	rsb	r3, r3, r1
    23b0:	e20310ff 	and	r1, r3, #255	; 0xff
    23b4:	e59fc11c 	ldr	ip, [pc, #284]	; 24d8 <getRecvCB+0x268>
    23b8:	e3a00020 	mov	r0, #32
    23bc:	e1a03002 	mov	r3, r2
    23c0:	e1a03103 	lsl	r3, r3, #2
    23c4:	e0833002 	add	r3, r3, r2
    23c8:	e1a03083 	lsl	r3, r3, #1
    23cc:	e0833002 	add	r3, r3, r2
    23d0:	e1a03103 	lsl	r3, r3, #2
    23d4:	e08c3003 	add	r3, ip, r3
    23d8:	e0833000 	add	r3, r3, r0
    23dc:	e1a02001 	mov	r2, r1
    23e0:	e5c32005 	strb	r2, [r3, #5]
		if(UART_STAT[udev].recv.RecvCB_In == UART_STAT[udev].recv.RecvCB_Out){
    23e4:	e55b2009 	ldrb	r2, [fp, #-9]
    23e8:	e59f00e8 	ldr	r0, [pc, #232]	; 24d8 <getRecvCB+0x268>
    23ec:	e3a01020 	mov	r1, #32
    23f0:	e1a03002 	mov	r3, r2
    23f4:	e1a03103 	lsl	r3, r3, #2
    23f8:	e0833002 	add	r3, r3, r2
    23fc:	e1a03083 	lsl	r3, r3, #1
    2400:	e0833002 	add	r3, r3, r2
    2404:	e1a03103 	lsl	r3, r3, #2
    2408:	e0803003 	add	r3, r0, r3
    240c:	e0833001 	add	r3, r3, r1
    2410:	e5d33004 	ldrb	r3, [r3, #4]
    2414:	e20310ff 	and	r1, r3, #255	; 0xff
    2418:	e55b2009 	ldrb	r2, [fp, #-9]
    241c:	e59fc0b4 	ldr	ip, [pc, #180]	; 24d8 <getRecvCB+0x268>
    2420:	e3a00020 	mov	r0, #32
    2424:	e1a03002 	mov	r3, r2
    2428:	e1a03103 	lsl	r3, r3, #2
    242c:	e0833002 	add	r3, r3, r2
    2430:	e1a03083 	lsl	r3, r3, #1
    2434:	e0833002 	add	r3, r3, r2
    2438:	e1a03103 	lsl	r3, r3, #2
    243c:	e08c3003 	add	r3, ip, r3
    2440:	e0833000 	add	r3, r3, r0
    2444:	e5d33005 	ldrb	r3, [r3, #5]
    2448:	e20330ff 	and	r3, r3, #255	; 0xff
    244c:	e1510003 	cmp	r1, r3
    2450:	1a00000c 	bne	2488 <getRecvCB+0x218>
			UART_STAT[udev].recv.RecvCB_Empty = TRUE;
    2454:	e55b2009 	ldrb	r2, [fp, #-9]
    2458:	e59f0078 	ldr	r0, [pc, #120]	; 24d8 <getRecvCB+0x268>
    245c:	e3a01020 	mov	r1, #32
    2460:	e1a03002 	mov	r3, r2
    2464:	e1a03103 	lsl	r3, r3, #2
    2468:	e0833002 	add	r3, r3, r2
    246c:	e1a03083 	lsl	r3, r3, #1
    2470:	e0833002 	add	r3, r3, r2
    2474:	e1a03103 	lsl	r3, r3, #2
    2478:	e0803003 	add	r3, r0, r3
    247c:	e0833001 	add	r3, r3, r1
    2480:	e3a02001 	mov	r2, #1
    2484:	e5c32007 	strb	r2, [r3, #7]
		}
		ret = EOK;
    2488:	e3a03000 	mov	r3, #0
    248c:	e50b3008 	str	r3, [fp, #-8]
	}
	UART_STAT[udev].recv.RecvCB_Full = FALSE;
    2490:	e55b2009 	ldrb	r2, [fp, #-9]
    2494:	e59f003c 	ldr	r0, [pc, #60]	; 24d8 <getRecvCB+0x268>
    2498:	e3a01020 	mov	r1, #32
    249c:	e1a03002 	mov	r3, r2
    24a0:	e1a03103 	lsl	r3, r3, #2
    24a4:	e0833002 	add	r3, r3, r2
    24a8:	e1a03083 	lsl	r3, r3, #1
    24ac:	e0833002 	add	r3, r3, r2
    24b0:	e1a03103 	lsl	r3, r3, #2
    24b4:	e0803003 	add	r3, r0, r3
    24b8:	e0833001 	add	r3, r3, r1
    24bc:	e3a02000 	mov	r2, #0
    24c0:	e5c32006 	strb	r2, [r3, #6]
	return ret;
    24c4:	e51b3008 	ldr	r3, [fp, #-8]
}
    24c8:	e1a00003 	mov	r0, r3
    24cc:	e24bd004 	sub	sp, fp, #4
    24d0:	e8bd4800 	pop	{fp, lr}
    24d4:	e12fff1e 	bx	lr
    24d8:	40000884 	.word	0x40000884

000024dc <SystemInit>:
#include "init.h"

/** Do not step through this function. Run through the whole function at once when debugging. **/

int SystemInit(void)
{
    24dc:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
    24e0:	e28db000 	add	fp, sp, #0
    24e4:	e24dd00c 	sub	sp, sp, #12
	unsigned int MValue, NValue;

	MValue = 0;
    24e8:	e3a03000 	mov	r3, #0
    24ec:	e50b3008 	str	r3, [fp, #-8]
	NValue = 0;
    24f0:	e3a03000 	mov	r3, #0
    24f4:	e50b300c 	str	r3, [fp, #-12]

	PINSEL0 |= 0x00000000;
    24f8:	e59f3210 	ldr	r3, [pc, #528]	; 2710 <SystemInit+0x234>
    24fc:	e59f220c 	ldr	r2, [pc, #524]	; 2710 <SystemInit+0x234>
    2500:	e5922000 	ldr	r2, [r2]
    2504:	e5832000 	str	r2, [r3]
	PINSEL1 |= 0x00000000;
    2508:	e59f3204 	ldr	r3, [pc, #516]	; 2714 <SystemInit+0x238>
    250c:	e59f2200 	ldr	r2, [pc, #512]	; 2714 <SystemInit+0x238>
    2510:	e5922000 	ldr	r2, [r2]
    2514:	e5832000 	str	r2, [r3]

	MEMMAP = 1;
    2518:	e59f31f8 	ldr	r3, [pc, #504]	; 2718 <SystemInit+0x23c>
    251c:	e3a02001 	mov	r2, #1
    2520:	e5832000 	str	r2, [r3]

	PCONP |= 0x80000000;
    2524:	e59f31f0 	ldr	r3, [pc, #496]	; 271c <SystemInit+0x240>
    2528:	e59f21ec 	ldr	r2, [pc, #492]	; 271c <SystemInit+0x240>
    252c:	e5922000 	ldr	r2, [r2]
    2530:	e3822102 	orr	r2, r2, #-2147483648	; 0x80000000
    2534:	e5832000 	str	r2, [r3]

	if(PLLSTAT & (1<<25))
    2538:	e59f31e0 	ldr	r3, [pc, #480]	; 2720 <SystemInit+0x244>
    253c:	e5933000 	ldr	r3, [r3]
    2540:	e2033402 	and	r3, r3, #33554432	; 0x2000000
    2544:	e3530000 	cmp	r3, #0
    2548:	0a000008 	beq	2570 <SystemInit+0x94>
	{
		PLLCON = 1;
    254c:	e59f31d0 	ldr	r3, [pc, #464]	; 2724 <SystemInit+0x248>
    2550:	e3a02001 	mov	r2, #1
    2554:	e5832000 	str	r2, [r3]
		PLLFEED = 0xAA;
    2558:	e59f31c8 	ldr	r3, [pc, #456]	; 2728 <SystemInit+0x24c>
    255c:	e3a020aa 	mov	r2, #170	; 0xaa
    2560:	e5832000 	str	r2, [r3]
		PLLFEED = 0x55;
    2564:	e59f31bc 	ldr	r3, [pc, #444]	; 2728 <SystemInit+0x24c>
    2568:	e3a02055 	mov	r2, #85	; 0x55
    256c:	e5832000 	str	r2, [r3]
	}

	PLLCON = 0;						/* Disable PLL, disconnected */
    2570:	e59f31ac 	ldr	r3, [pc, #428]	; 2724 <SystemInit+0x248>
    2574:	e3a02000 	mov	r2, #0
    2578:	e5832000 	str	r2, [r3]
	PLLFEED = 0xaa;
    257c:	e59f31a4 	ldr	r3, [pc, #420]	; 2728 <SystemInit+0x24c>
    2580:	e3a020aa 	mov	r2, #170	; 0xaa
    2584:	e5832000 	str	r2, [r3]
	PLLFEED = 0x55;
    2588:	e59f3198 	ldr	r3, [pc, #408]	; 2728 <SystemInit+0x24c>
    258c:	e3a02055 	mov	r2, #85	; 0x55
    2590:	e5832000 	str	r2, [r3]

	SCS |= 0x20;					/* enable main oscialltor */
    2594:	e59f3190 	ldr	r3, [pc, #400]	; 272c <SystemInit+0x250>
    2598:	e59f218c 	ldr	r2, [pc, #396]	; 272c <SystemInit+0x250>
    259c:	e5922000 	ldr	r2, [r2]
    25a0:	e3822020 	orr	r2, r2, #32
    25a4:	e5832000 	str	r2, [r3]
	while(!(SCS & 0x40));			/* wait until ready */
    25a8:	e1a00000 	nop			; (mov r0, r0)
    25ac:	e59f3178 	ldr	r3, [pc, #376]	; 272c <SystemInit+0x250>
    25b0:	e5933000 	ldr	r3, [r3]
    25b4:	e2033040 	and	r3, r3, #64	; 0x40
    25b8:	e3530000 	cmp	r3, #0
    25bc:	0afffffa 	beq	25ac <SystemInit+0xd0>

	CLKSRCSEL = 0x1;				/* use main oscillator */
    25c0:	e59f3168 	ldr	r3, [pc, #360]	; 2730 <SystemInit+0x254>
    25c4:	e3a02001 	mov	r2, #1
    25c8:	e5832000 	str	r2, [r3]

	PLLCFG = 15 | (0 << 16);
    25cc:	e59f3160 	ldr	r3, [pc, #352]	; 2734 <SystemInit+0x258>
    25d0:	e3a0200f 	mov	r2, #15
    25d4:	e5832000 	str	r2, [r3]
	PLLFEED = 0xAA;
    25d8:	e59f3148 	ldr	r3, [pc, #328]	; 2728 <SystemInit+0x24c>
    25dc:	e3a020aa 	mov	r2, #170	; 0xaa
    25e0:	e5832000 	str	r2, [r3]
	PLLFEED = 0x55;
    25e4:	e59f313c 	ldr	r3, [pc, #316]	; 2728 <SystemInit+0x24c>
    25e8:	e3a02055 	mov	r2, #85	; 0x55
    25ec:	e5832000 	str	r2, [r3]

	PLLCON = 1;
    25f0:	e59f312c 	ldr	r3, [pc, #300]	; 2724 <SystemInit+0x248>
    25f4:	e3a02001 	mov	r2, #1
    25f8:	e5832000 	str	r2, [r3]
	PLLFEED = 0xAA;
    25fc:	e59f3124 	ldr	r3, [pc, #292]	; 2728 <SystemInit+0x24c>
    2600:	e3a020aa 	mov	r2, #170	; 0xaa
    2604:	e5832000 	str	r2, [r3]
	PLLFEED = 0x55;
    2608:	e59f3118 	ldr	r3, [pc, #280]	; 2728 <SystemInit+0x24c>
    260c:	e3a02055 	mov	r2, #85	; 0x55
    2610:	e5832000 	str	r2, [r3]

	CCLKCFG = 7; /*configure cclk divisor so that the pll output results in 48MHz (former config resulted in 96MHz)*/
    2614:	e59f311c 	ldr	r3, [pc, #284]	; 2738 <SystemInit+0x25c>
    2618:	e3a02007 	mov	r2, #7
    261c:	e5832000 	str	r2, [r3]
	USBCLKCFG = 3;
    2620:	e59f3114 	ldr	r3, [pc, #276]	; 273c <SystemInit+0x260>
    2624:	e3a02003 	mov	r2, #3
    2628:	e5832000 	str	r2, [r3]

	while(((PLLSTAT & (1 << 26)) == 0));
    262c:	e1a00000 	nop			; (mov r0, r0)
    2630:	e59f30e8 	ldr	r3, [pc, #232]	; 2720 <SystemInit+0x244>
    2634:	e5933000 	ldr	r3, [r3]
    2638:	e2033301 	and	r3, r3, #67108864	; 0x4000000
    263c:	e3530000 	cmp	r3, #0
    2640:	0afffffa 	beq	2630 <SystemInit+0x154>

	MValue = PLLSTAT & 0x00007FFF;
    2644:	e59f30d4 	ldr	r3, [pc, #212]	; 2720 <SystemInit+0x244>
    2648:	e5933000 	ldr	r3, [r3]
    264c:	e1a03883 	lsl	r3, r3, #17
    2650:	e1a038a3 	lsr	r3, r3, #17
    2654:	e50b3008 	str	r3, [fp, #-8]
	NValue = (PLLSTAT & 0x00FF0000) >> 16;
    2658:	e59f30c0 	ldr	r3, [pc, #192]	; 2720 <SystemInit+0x244>
    265c:	e5933000 	ldr	r3, [r3]
    2660:	e20338ff 	and	r3, r3, #16711680	; 0xff0000
    2664:	e1a03823 	lsr	r3, r3, #16
    2668:	e50b300c 	str	r3, [fp, #-12]

	while((MValue != 15) && (NValue != 0));
    266c:	e51b3008 	ldr	r3, [fp, #-8]
    2670:	e353000f 	cmp	r3, #15
    2674:	0a000002 	beq	2684 <SystemInit+0x1a8>
    2678:	e51b300c 	ldr	r3, [fp, #-12]
    267c:	e3530000 	cmp	r3, #0
    2680:	1afffff9 	bne	266c <SystemInit+0x190>

	PLLCON = 3;
    2684:	e59f3098 	ldr	r3, [pc, #152]	; 2724 <SystemInit+0x248>
    2688:	e3a02003 	mov	r2, #3
    268c:	e5832000 	str	r2, [r3]
	PLLFEED = 0xAA;
    2690:	e59f3090 	ldr	r3, [pc, #144]	; 2728 <SystemInit+0x24c>
    2694:	e3a020aa 	mov	r2, #170	; 0xaa
    2698:	e5832000 	str	r2, [r3]
	PLLFEED = 0x55;
    269c:	e59f3084 	ldr	r3, [pc, #132]	; 2728 <SystemInit+0x24c>
    26a0:	e3a02055 	mov	r2, #85	; 0x55
    26a4:	e5832000 	str	r2, [r3]

	while(((PLLSTAT & (1 << 25)) == 0));
    26a8:	e1a00000 	nop			; (mov r0, r0)
    26ac:	e59f306c 	ldr	r3, [pc, #108]	; 2720 <SystemInit+0x244>
    26b0:	e5933000 	ldr	r3, [r3]
    26b4:	e2033402 	and	r3, r3, #33554432	; 0x2000000
    26b8:	e3530000 	cmp	r3, #0
    26bc:	0afffffa 	beq	26ac <SystemInit+0x1d0>

	PCLKSEL0 = 0xAAAAAAAA;
    26c0:	e59f3078 	ldr	r3, [pc, #120]	; 2740 <SystemInit+0x264>
    26c4:	e59f2078 	ldr	r2, [pc, #120]	; 2744 <SystemInit+0x268>
    26c8:	e5832000 	str	r2, [r3]
	PCLKSEL1 = 0xAAAAAAAA;
    26cc:	e59f3074 	ldr	r3, [pc, #116]	; 2748 <SystemInit+0x26c>
    26d0:	e59f206c 	ldr	r2, [pc, #108]	; 2744 <SystemInit+0x268>
    26d4:	e5832000 	str	r2, [r3]


	MAMCR = 0;
    26d8:	e59f306c 	ldr	r3, [pc, #108]	; 274c <SystemInit+0x270>
    26dc:	e3a02000 	mov	r2, #0
    26e0:	e5832000 	str	r2, [r3]

	MAMTIM = 4;					/* wait 4 clock cycles */
    26e4:	e59f3064 	ldr	r3, [pc, #100]	; 2750 <SystemInit+0x274>
    26e8:	e3a02004 	mov	r2, #4
    26ec:	e5832000 	str	r2, [r3]

	MAMCR = 2;					/* fully enabled */
    26f0:	e59f3054 	ldr	r3, [pc, #84]	; 274c <SystemInit+0x270>
    26f4:	e3a02002 	mov	r2, #2
    26f8:	e5832000 	str	r2, [r3]

	return (0);
    26fc:	e3a03000 	mov	r3, #0
}
    2700:	e1a00003 	mov	r0, r3
    2704:	e28bd000 	add	sp, fp, #0
    2708:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
    270c:	e12fff1e 	bx	lr
    2710:	e002c000 	.word	0xe002c000
    2714:	e002c004 	.word	0xe002c004
    2718:	e01fc040 	.word	0xe01fc040
    271c:	e01fc0c4 	.word	0xe01fc0c4
    2720:	e01fc088 	.word	0xe01fc088
    2724:	e01fc080 	.word	0xe01fc080
    2728:	e01fc08c 	.word	0xe01fc08c
    272c:	e01fc1a0 	.word	0xe01fc1a0
    2730:	e01fc10c 	.word	0xe01fc10c
    2734:	e01fc084 	.word	0xe01fc084
    2738:	e01fc104 	.word	0xe01fc104
    273c:	e01fc108 	.word	0xe01fc108
    2740:	e01fc1a8 	.word	0xe01fc1a8
    2744:	aaaaaaaa 	.word	0xaaaaaaaa
    2748:	e01fc1ac 	.word	0xe01fc1ac
    274c:	e01fc000 	.word	0xe01fc000
    2750:	e01fc004 	.word	0xe01fc004

00002754 <ISRDummyHandler>:
 */

#include "lpc246x.h"
#include "irq.h"

void ISRDummyHandler(void){
    2754:	e92d080c 	push	{r2, r3, fp}
    2758:	e28db008 	add	fp, sp, #8

	/*** Do Interrupt handling here ***/

	VICVectAddr = 0;       /* Acknowledge Interrupt */
    275c:	e3e030ff 	mvn	r3, #255	; 0xff
    2760:	e3a02000 	mov	r2, #0
    2764:	e5832000 	str	r2, [r3]
}
    2768:	e24bd008 	sub	sp, fp, #8
    276c:	e8bd080c 	pop	{r2, r3, fp}
    2770:	e25ef004 	subs	pc, lr, #4

00002774 <init_VIC>:


/*** initialize the interrupt controller ***/
void init_VIC(void)
{
    2774:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
    2778:	e28db000 	add	fp, sp, #0
    277c:	e24dd014 	sub	sp, sp, #20
    unsigned int i = 0;
    2780:	e3a03000 	mov	r3, #0
    2784:	e50b3008 	str	r3, [fp, #-8]
    unsigned int *vect_addr, *vect_cntl;

    /* initialize VIC */
    VICIntEnClr = 0xffffffff;
    2788:	e59f308c 	ldr	r3, [pc, #140]	; 281c <init_VIC+0xa8>
    278c:	e3e02000 	mvn	r2, #0
    2790:	e5832000 	str	r2, [r3]
    VICVectAddr = 0;
    2794:	e3e030ff 	mvn	r3, #255	; 0xff
    2798:	e3a02000 	mov	r2, #0
    279c:	e5832000 	str	r2, [r3]
    VICIntSelect = 0;
    27a0:	e59f3078 	ldr	r3, [pc, #120]	; 2820 <init_VIC+0xac>
    27a4:	e3a02000 	mov	r2, #0
    27a8:	e5832000 	str	r2, [r3]

    /* set all the vector and vector control register to 0 */
    for ( i = 0; i < VIC_SIZE; i++ )
    27ac:	e3a03000 	mov	r3, #0
    27b0:	e50b3008 	str	r3, [fp, #-8]
    27b4:	ea000012 	b	2804 <init_VIC+0x90>
    {
		vect_addr = (unsigned int *)(VIC_BASE_ADDR + VECT_ADDR_INDEX + i*4);
    27b8:	e51b3008 	ldr	r3, [fp, #-8]
    27bc:	e2833101 	add	r3, r3, #1073741824	; 0x40000000
    27c0:	e2433d0f 	sub	r3, r3, #960	; 0x3c0
    27c4:	e1a03103 	lsl	r3, r3, #2
    27c8:	e50b300c 	str	r3, [fp, #-12]
		vect_cntl = (unsigned int *)(VIC_BASE_ADDR + VECT_CNTL_INDEX + i*4);
    27cc:	e51b3008 	ldr	r3, [fp, #-8]
    27d0:	e2833101 	add	r3, r3, #1073741824	; 0x40000000
    27d4:	e2433d0e 	sub	r3, r3, #896	; 0x380
    27d8:	e1a03103 	lsl	r3, r3, #2
    27dc:	e50b3010 	str	r3, [fp, #-16]
		*vect_addr = 0x0;
    27e0:	e51b300c 	ldr	r3, [fp, #-12]
    27e4:	e3a02000 	mov	r2, #0
    27e8:	e5832000 	str	r2, [r3]
		*vect_cntl = 0xF;
    27ec:	e51b3010 	ldr	r3, [fp, #-16]
    27f0:	e3a0200f 	mov	r2, #15
    27f4:	e5832000 	str	r2, [r3]
    VICIntEnClr = 0xffffffff;
    VICVectAddr = 0;
    VICIntSelect = 0;

    /* set all the vector and vector control register to 0 */
    for ( i = 0; i < VIC_SIZE; i++ )
    27f8:	e51b3008 	ldr	r3, [fp, #-8]
    27fc:	e2833001 	add	r3, r3, #1
    2800:	e50b3008 	str	r3, [fp, #-8]
    2804:	e51b3008 	ldr	r3, [fp, #-8]
    2808:	e353001f 	cmp	r3, #31
    280c:	9affffe9 	bls	27b8 <init_VIC+0x44>
		vect_cntl = (unsigned int *)(VIC_BASE_ADDR + VECT_CNTL_INDEX + i*4);
		*vect_addr = 0x0;
		*vect_cntl = 0xF;
    }
    return;
}
    2810:	e28bd000 	add	sp, fp, #0
    2814:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
    2818:	e12fff1e 	bx	lr
    281c:	fffff014 	.word	0xfffff014
    2820:	fffff00c 	.word	0xfffff00c

00002824 <install_irq>:

/*** routine to install the interupt ***/
unsigned int install_irq (unsigned int irq_nr, void (*HandlerAddr)(void), unsigned int priority)
{
    2824:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
    2828:	e28db000 	add	fp, sp, #0
    282c:	e24dd01c 	sub	sp, sp, #28
    2830:	e50b0010 	str	r0, [fp, #-16]
    2834:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    2838:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
		unsigned int *vect_addr;
		unsigned int *vect_cntl;

    VICIntEnClr = 1 << irq_nr;	/* Disable Interrupt */
    283c:	e59f3088 	ldr	r3, [pc, #136]	; 28cc <install_irq+0xa8>
    2840:	e51b2010 	ldr	r2, [fp, #-16]
    2844:	e3a01001 	mov	r1, #1
    2848:	e1a02211 	lsl	r2, r1, r2
    284c:	e5832000 	str	r2, [r3]
    if ( irq_nr >= VIC_SIZE )
    2850:	e51b3010 	ldr	r3, [fp, #-16]
    2854:	e353001f 	cmp	r3, #31
    2858:	9a000001 	bls	2864 <install_irq+0x40>
    {
		return ( FALSE );
    285c:	e3a03000 	mov	r3, #0
    2860:	ea000015 	b	28bc <install_irq+0x98>
    }
    else
    {
		/* find first un-assigned VIC address for the handler */
		vect_addr = (unsigned int *)(VIC_BASE_ADDR + VECT_ADDR_INDEX + irq_nr*4);
    2864:	e51b3010 	ldr	r3, [fp, #-16]
    2868:	e2833101 	add	r3, r3, #1073741824	; 0x40000000
    286c:	e2433d0f 	sub	r3, r3, #960	; 0x3c0
    2870:	e1a03103 	lsl	r3, r3, #2
    2874:	e50b3008 	str	r3, [fp, #-8]
		vect_cntl = (unsigned int *)(VIC_BASE_ADDR + VECT_CNTL_INDEX + irq_nr*4);
    2878:	e51b3010 	ldr	r3, [fp, #-16]
    287c:	e2833101 	add	r3, r3, #1073741824	; 0x40000000
    2880:	e2433d0e 	sub	r3, r3, #896	; 0x380
    2884:	e1a03103 	lsl	r3, r3, #2
    2888:	e50b300c 	str	r3, [fp, #-12]
		*vect_addr = (unsigned int)HandlerAddr;	/* set interrupt vector */
    288c:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
    2890:	e51b3008 	ldr	r3, [fp, #-8]
    2894:	e5832000 	str	r2, [r3]
		*vect_cntl = priority;
    2898:	e51b300c 	ldr	r3, [fp, #-12]
    289c:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
    28a0:	e5832000 	str	r2, [r3]
		VICIntEnable = 1 << irq_nr;	/* Enable Interrupt */
    28a4:	e59f3024 	ldr	r3, [pc, #36]	; 28d0 <install_irq+0xac>
    28a8:	e51b2010 	ldr	r2, [fp, #-16]
    28ac:	e3a01001 	mov	r1, #1
    28b0:	e1a02211 	lsl	r2, r1, r2
    28b4:	e5832000 	str	r2, [r3]
		return( TRUE );
    28b8:	e3a03001 	mov	r3, #1
    }
}
    28bc:	e1a00003 	mov	r0, r3
    28c0:	e28bd000 	add	sp, fp, #0
    28c4:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
    28c8:	e12fff1e 	bx	lr
    28cc:	fffff014 	.word	0xfffff014
    28d0:	fffff010 	.word	0xfffff010

000028d4 <_close>:

char *__env[1] = { 0 };
char **environ = __env;

int _close(int file)
{
    28d4:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
    28d8:	e28db000 	add	fp, sp, #0
    28dc:	e24dd00c 	sub	sp, sp, #12
    28e0:	e50b0008 	str	r0, [fp, #-8]
  return -1;
    28e4:	e3e03000 	mvn	r3, #0
}
    28e8:	e1a00003 	mov	r0, r3
    28ec:	e28bd000 	add	sp, fp, #0
    28f0:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
    28f4:	e12fff1e 	bx	lr

000028f8 <_execve>:

int _execve(char *name, char **argv, char **env)
{
    28f8:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
    28fc:	e28db000 	add	fp, sp, #0
    2900:	e24dd014 	sub	sp, sp, #20
    2904:	e50b0008 	str	r0, [fp, #-8]
    2908:	e50b100c 	str	r1, [fp, #-12]
    290c:	e50b2010 	str	r2, [fp, #-16]
  errno = ENOMEM;
    2910:	e59f3018 	ldr	r3, [pc, #24]	; 2930 <_execve+0x38>
    2914:	e3a0200c 	mov	r2, #12
    2918:	e5832000 	str	r2, [r3]
  return -1;
    291c:	e3e03000 	mvn	r3, #0
}
    2920:	e1a00003 	mov	r0, r3
    2924:	e28bd000 	add	sp, fp, #0
    2928:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
    292c:	e12fff1e 	bx	lr
    2930:	40000934 	.word	0x40000934

00002934 <_exit>:
int _exit()
{
    2934:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
    2938:	e28db000 	add	fp, sp, #0
  return 0;
    293c:	e3a03000 	mov	r3, #0
}
    2940:	e1a00003 	mov	r0, r3
    2944:	e28bd000 	add	sp, fp, #0
    2948:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
    294c:	e12fff1e 	bx	lr

00002950 <_fork>:

int _fork()
{
    2950:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
    2954:	e28db000 	add	fp, sp, #0
  errno = EAGAIN;
    2958:	e59f3018 	ldr	r3, [pc, #24]	; 2978 <_fork+0x28>
    295c:	e3a0200b 	mov	r2, #11
    2960:	e5832000 	str	r2, [r3]
  return -1;
    2964:	e3e03000 	mvn	r3, #0
}
    2968:	e1a00003 	mov	r0, r3
    296c:	e28bd000 	add	sp, fp, #0
    2970:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
    2974:	e12fff1e 	bx	lr
    2978:	40000934 	.word	0x40000934

0000297c <_fstat>:

int _fstat(int file, struct stat *st)
{
    297c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
    2980:	e28db000 	add	fp, sp, #0
    2984:	e24dd00c 	sub	sp, sp, #12
    2988:	e50b0008 	str	r0, [fp, #-8]
    298c:	e50b100c 	str	r1, [fp, #-12]
  st->st_mode = S_IFCHR;
    2990:	e51b300c 	ldr	r3, [fp, #-12]
    2994:	e3a02a02 	mov	r2, #8192	; 0x2000
    2998:	e5832004 	str	r2, [r3, #4]
  return 0;
    299c:	e3a03000 	mov	r3, #0
}
    29a0:	e1a00003 	mov	r0, r3
    29a4:	e28bd000 	add	sp, fp, #0
    29a8:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
    29ac:	e12fff1e 	bx	lr

000029b0 <_getpid>:

int _getpid()
{
    29b0:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
    29b4:	e28db000 	add	fp, sp, #0
  return 1;
    29b8:	e3a03001 	mov	r3, #1
}
    29bc:	e1a00003 	mov	r0, r3
    29c0:	e28bd000 	add	sp, fp, #0
    29c4:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
    29c8:	e12fff1e 	bx	lr

000029cc <_kill>:

int _kill(int pid, int sig)
{
    29cc:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
    29d0:	e28db000 	add	fp, sp, #0
    29d4:	e24dd00c 	sub	sp, sp, #12
    29d8:	e50b0008 	str	r0, [fp, #-8]
    29dc:	e50b100c 	str	r1, [fp, #-12]
  errno = EINVAL;
    29e0:	e59f3018 	ldr	r3, [pc, #24]	; 2a00 <_kill+0x34>
    29e4:	e3a02016 	mov	r2, #22
    29e8:	e5832000 	str	r2, [r3]
  return(-1);
    29ec:	e3e03000 	mvn	r3, #0
}
    29f0:	e1a00003 	mov	r0, r3
    29f4:	e28bd000 	add	sp, fp, #0
    29f8:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
    29fc:	e12fff1e 	bx	lr
    2a00:	40000934 	.word	0x40000934

00002a04 <isatty>:

int isatty(int fildes)
{
    2a04:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
    2a08:	e28db000 	add	fp, sp, #0
    2a0c:	e24dd00c 	sub	sp, sp, #12
    2a10:	e50b0008 	str	r0, [fp, #-8]
  return 1;
    2a14:	e3a03001 	mov	r3, #1
}
    2a18:	e1a00003 	mov	r0, r3
    2a1c:	e28bd000 	add	sp, fp, #0
    2a20:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
    2a24:	e12fff1e 	bx	lr

00002a28 <_isatty>:
int _isatty(int fildes)
{
    2a28:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
    2a2c:	e28db000 	add	fp, sp, #0
    2a30:	e24dd00c 	sub	sp, sp, #12
    2a34:	e50b0008 	str	r0, [fp, #-8]
  return 1;
    2a38:	e3a03001 	mov	r3, #1
}
    2a3c:	e1a00003 	mov	r0, r3
    2a40:	e28bd000 	add	sp, fp, #0
    2a44:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
    2a48:	e12fff1e 	bx	lr

00002a4c <_link>:

int _link(char *old, char *new)
{
    2a4c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
    2a50:	e28db000 	add	fp, sp, #0
    2a54:	e24dd00c 	sub	sp, sp, #12
    2a58:	e50b0008 	str	r0, [fp, #-8]
    2a5c:	e50b100c 	str	r1, [fp, #-12]
  errno = EMLINK;
    2a60:	e59f3018 	ldr	r3, [pc, #24]	; 2a80 <_link+0x34>
    2a64:	e3a0201f 	mov	r2, #31
    2a68:	e5832000 	str	r2, [r3]
  return -1;
    2a6c:	e3e03000 	mvn	r3, #0
}
    2a70:	e1a00003 	mov	r0, r3
    2a74:	e28bd000 	add	sp, fp, #0
    2a78:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
    2a7c:	e12fff1e 	bx	lr
    2a80:	40000934 	.word	0x40000934

00002a84 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
    2a84:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
    2a88:	e28db000 	add	fp, sp, #0
    2a8c:	e24dd014 	sub	sp, sp, #20
    2a90:	e50b0008 	str	r0, [fp, #-8]
    2a94:	e50b100c 	str	r1, [fp, #-12]
    2a98:	e50b2010 	str	r2, [fp, #-16]
  return 0;
    2a9c:	e3a03000 	mov	r3, #0
}
    2aa0:	e1a00003 	mov	r0, r3
    2aa4:	e28bd000 	add	sp, fp, #0
    2aa8:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
    2aac:	e12fff1e 	bx	lr

00002ab0 <_open>:

int _open(const char *name, int flags, int mode)
{
    2ab0:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
    2ab4:	e28db000 	add	fp, sp, #0
    2ab8:	e24dd014 	sub	sp, sp, #20
    2abc:	e50b0008 	str	r0, [fp, #-8]
    2ac0:	e50b100c 	str	r1, [fp, #-12]
    2ac4:	e50b2010 	str	r2, [fp, #-16]
  return -1;
    2ac8:	e3e03000 	mvn	r3, #0
}
    2acc:	e1a00003 	mov	r0, r3
    2ad0:	e28bd000 	add	sp, fp, #0
    2ad4:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
    2ad8:	e12fff1e 	bx	lr

00002adc <_read>:

int _read(int file, char *ptr, int len)
{
    2adc:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
    2ae0:	e28db000 	add	fp, sp, #0
    2ae4:	e24dd014 	sub	sp, sp, #20
    2ae8:	e50b0008 	str	r0, [fp, #-8]
    2aec:	e50b100c 	str	r1, [fp, #-12]
    2af0:	e50b2010 	str	r2, [fp, #-16]
  return 0;
    2af4:	e3a03000 	mov	r3, #0
}
    2af8:	e1a00003 	mov	r0, r3
    2afc:	e28bd000 	add	sp, fp, #0
    2b00:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
    2b04:	e12fff1e 	bx	lr

00002b08 <_sbrk>:

caddr_t _sbrk(int incr)
{
    2b08:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
    2b0c:	e28db000 	add	fp, sp, #0
    2b10:	e24dd014 	sub	sp, sp, #20
    2b14:	e50b0010 	str	r0, [fp, #-16]
  extern char end;		/* Defined by the linker */
  static char *heap_end;
  char *prev_heap_end;

  if (heap_end == 0)
    2b18:	e59f3060 	ldr	r3, [pc, #96]	; 2b80 <_sbrk+0x78>
    2b1c:	e5933000 	ldr	r3, [r3]
    2b20:	e3530000 	cmp	r3, #0
    2b24:	1a000007 	bne	2b48 <_sbrk+0x40>
  {
    heap_end = &end;
    2b28:	e59f3050 	ldr	r3, [pc, #80]	; 2b80 <_sbrk+0x78>
    2b2c:	e59f2050 	ldr	r2, [pc, #80]	; 2b84 <_sbrk+0x7c>
    2b30:	e5832000 	str	r2, [r3]
    /* give 16KB area for stacks and use the rest of memory for heap*/
    heap_end += 0x4000;
    2b34:	e59f3044 	ldr	r3, [pc, #68]	; 2b80 <_sbrk+0x78>
    2b38:	e5933000 	ldr	r3, [r3]
    2b3c:	e2832901 	add	r2, r3, #16384	; 0x4000
    2b40:	e59f3038 	ldr	r3, [pc, #56]	; 2b80 <_sbrk+0x78>
    2b44:	e5832000 	str	r2, [r3]
  }
  prev_heap_end = heap_end;
    2b48:	e59f3030 	ldr	r3, [pc, #48]	; 2b80 <_sbrk+0x78>
    2b4c:	e5933000 	ldr	r3, [r3]
    2b50:	e50b3008 	str	r3, [fp, #-8]

  heap_end += incr;
    2b54:	e59f3024 	ldr	r3, [pc, #36]	; 2b80 <_sbrk+0x78>
    2b58:	e5932000 	ldr	r2, [r3]
    2b5c:	e51b3010 	ldr	r3, [fp, #-16]
    2b60:	e0822003 	add	r2, r2, r3
    2b64:	e59f3014 	ldr	r3, [pc, #20]	; 2b80 <_sbrk+0x78>
    2b68:	e5832000 	str	r2, [r3]
  return (caddr_t) prev_heap_end;
    2b6c:	e51b3008 	ldr	r3, [fp, #-8]
}
    2b70:	e1a00003 	mov	r0, r3
    2b74:	e28bd000 	add	sp, fp, #0
    2b78:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
    2b7c:	e12fff1e 	bx	lr
    2b80:	4000084c 	.word	0x4000084c
    2b84:	7fe00000 	.word	0x7fe00000

00002b88 <_stat>:

int _stat(char *file, struct stat *st)
{
    2b88:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
    2b8c:	e28db000 	add	fp, sp, #0
    2b90:	e24dd00c 	sub	sp, sp, #12
    2b94:	e50b0008 	str	r0, [fp, #-8]
    2b98:	e50b100c 	str	r1, [fp, #-12]
  st->st_mode = S_IFCHR;
    2b9c:	e51b300c 	ldr	r3, [fp, #-12]
    2ba0:	e3a02a02 	mov	r2, #8192	; 0x2000
    2ba4:	e5832004 	str	r2, [r3, #4]
  return 0;
    2ba8:	e3a03000 	mov	r3, #0
}
    2bac:	e1a00003 	mov	r0, r3
    2bb0:	e28bd000 	add	sp, fp, #0
    2bb4:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
    2bb8:	e12fff1e 	bx	lr

00002bbc <_times>:
int _times(struct tms *buf)
{
    2bbc:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
    2bc0:	e28db000 	add	fp, sp, #0
    2bc4:	e24dd00c 	sub	sp, sp, #12
    2bc8:	e50b0008 	str	r0, [fp, #-8]
  return -1;
    2bcc:	e3e03000 	mvn	r3, #0
}
    2bd0:	e1a00003 	mov	r0, r3
    2bd4:	e28bd000 	add	sp, fp, #0
    2bd8:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
    2bdc:	e12fff1e 	bx	lr

00002be0 <_unlink>:

int _unlink(char *name)
{
    2be0:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
    2be4:	e28db000 	add	fp, sp, #0
    2be8:	e24dd00c 	sub	sp, sp, #12
    2bec:	e50b0008 	str	r0, [fp, #-8]
  errno = ENOENT;
    2bf0:	e59f3018 	ldr	r3, [pc, #24]	; 2c10 <_unlink+0x30>
    2bf4:	e3a02002 	mov	r2, #2
    2bf8:	e5832000 	str	r2, [r3]
  return -1;
    2bfc:	e3e03000 	mvn	r3, #0
}
    2c00:	e1a00003 	mov	r0, r3
    2c04:	e28bd000 	add	sp, fp, #0
    2c08:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
    2c0c:	e12fff1e 	bx	lr
    2c10:	40000934 	.word	0x40000934

00002c14 <_wait>:

int _wait(int *status)
{
    2c14:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
    2c18:	e28db000 	add	fp, sp, #0
    2c1c:	e24dd00c 	sub	sp, sp, #12
    2c20:	e50b0008 	str	r0, [fp, #-8]
  errno = ECHILD;
    2c24:	e59f3018 	ldr	r3, [pc, #24]	; 2c44 <_wait+0x30>
    2c28:	e3a0200a 	mov	r2, #10
    2c2c:	e5832000 	str	r2, [r3]
  return -1;
    2c30:	e3e03000 	mvn	r3, #0
}
    2c34:	e1a00003 	mov	r0, r3
    2c38:	e28bd000 	add	sp, fp, #0
    2c3c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
    2c40:	e12fff1e 	bx	lr
    2c44:	40000934 	.word	0x40000934

00002c48 <_write>:

int _write(int file, char *ptr, int len)
{
    2c48:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
    2c4c:	e28db000 	add	fp, sp, #0
    2c50:	e24dd014 	sub	sp, sp, #20
    2c54:	e50b0008 	str	r0, [fp, #-8]
    2c58:	e50b100c 	str	r1, [fp, #-12]
    2c5c:	e50b2010 	str	r2, [fp, #-16]
  return 0;
    2c60:	e3a03000 	mov	r3, #0
}
    2c64:	e1a00003 	mov	r0, r3
    2c68:	e28bd000 	add	sp, fp, #0
    2c6c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
    2c70:	e12fff1e 	bx	lr

00002c74 <setPortPinDir>:
#include "lpc246x.h"
#include "lpc2478_lib.h"

void setPortPinDir(char port, char pin)
{
    2c74:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
    2c78:	e28db000 	add	fp, sp, #0
    2c7c:	e24dd00c 	sub	sp, sp, #12
    2c80:	e1a02000 	mov	r2, r0
    2c84:	e1a03001 	mov	r3, r1
    2c88:	e54b2005 	strb	r2, [fp, #-5]
    2c8c:	e54b3006 	strb	r3, [fp, #-6]
	switch(port){
    2c90:	e55b3005 	ldrb	r3, [fp, #-5]
    2c94:	e3530002 	cmp	r3, #2
    2c98:	0a000004 	beq	2cb0 <setPortPinDir+0x3c>
    2c9c:	e3530003 	cmp	r3, #3
    2ca0:	0a00000a 	beq	2cd0 <setPortPinDir+0x5c>
    2ca4:	e3530001 	cmp	r3, #1
    2ca8:	0a00000a 	beq	2cd8 <setPortPinDir+0x64>
    2cac:	ea000005 	b	2cc8 <setPortPinDir+0x54>
		case 1: /* configure pin of Port 1 */
				break;
		case 2: FIO2DIR = (1<<pin);
    2cb0:	e59f3030 	ldr	r3, [pc, #48]	; 2ce8 <setPortPinDir+0x74>
    2cb4:	e55b2006 	ldrb	r2, [fp, #-6]
    2cb8:	e3a01001 	mov	r1, #1
    2cbc:	e1a02211 	lsl	r2, r1, r2
    2cc0:	e5832000 	str	r2, [r3]
				break;
    2cc4:	ea000004 	b	2cdc <setPortPinDir+0x68>
		case 3: /* configure pin of Port 3 */
				break;
		default:
				break;
    2cc8:	e1a00000 	nop			; (mov r0, r0)
    2ccc:	ea000002 	b	2cdc <setPortPinDir+0x68>
		case 1: /* configure pin of Port 1 */
				break;
		case 2: FIO2DIR = (1<<pin);
				break;
		case 3: /* configure pin of Port 3 */
				break;
    2cd0:	e1a00000 	nop			; (mov r0, r0)
    2cd4:	ea000000 	b	2cdc <setPortPinDir+0x68>

void setPortPinDir(char port, char pin)
{
	switch(port){
		case 1: /* configure pin of Port 1 */
				break;
    2cd8:	e1a00000 	nop			; (mov r0, r0)
		case 3: /* configure pin of Port 3 */
				break;
		default:
				break;
	}
}
    2cdc:	e28bd000 	add	sp, fp, #0
    2ce0:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
    2ce4:	e12fff1e 	bx	lr
    2ce8:	3fffc040 	.word	0x3fffc040

00002cec <clrPortPin>:

void clrPortPin(char port, char pin)
{
    2cec:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
    2cf0:	e28db000 	add	fp, sp, #0
    2cf4:	e24dd00c 	sub	sp, sp, #12
    2cf8:	e1a02000 	mov	r2, r0
    2cfc:	e1a03001 	mov	r3, r1
    2d00:	e54b2005 	strb	r2, [fp, #-5]
    2d04:	e54b3006 	strb	r3, [fp, #-6]
	switch(port){
    2d08:	e55b3005 	ldrb	r3, [fp, #-5]
    2d0c:	e3530002 	cmp	r3, #2
    2d10:	0a000004 	beq	2d28 <clrPortPin+0x3c>
    2d14:	e3530003 	cmp	r3, #3
    2d18:	0a00000a 	beq	2d48 <clrPortPin+0x5c>
    2d1c:	e3530001 	cmp	r3, #1
    2d20:	0a00000a 	beq	2d50 <clrPortPin+0x64>
    2d24:	ea000005 	b	2d40 <clrPortPin+0x54>
		case 1: /* configure pin of Port 1 */
				break;
		case 2: FIO2CLR = (1<<pin);
    2d28:	e59f3030 	ldr	r3, [pc, #48]	; 2d60 <clrPortPin+0x74>
    2d2c:	e55b2006 	ldrb	r2, [fp, #-6]
    2d30:	e3a01001 	mov	r1, #1
    2d34:	e1a02211 	lsl	r2, r1, r2
    2d38:	e5832000 	str	r2, [r3]
				break;
    2d3c:	ea000004 	b	2d54 <clrPortPin+0x68>
		case 3: /* configure pin of Port 3 */
				break;
		default:
				break;
    2d40:	e1a00000 	nop			; (mov r0, r0)
    2d44:	ea000002 	b	2d54 <clrPortPin+0x68>
		case 1: /* configure pin of Port 1 */
				break;
		case 2: FIO2CLR = (1<<pin);
				break;
		case 3: /* configure pin of Port 3 */
				break;
    2d48:	e1a00000 	nop			; (mov r0, r0)
    2d4c:	ea000000 	b	2d54 <clrPortPin+0x68>

void clrPortPin(char port, char pin)
{
	switch(port){
		case 1: /* configure pin of Port 1 */
				break;
    2d50:	e1a00000 	nop			; (mov r0, r0)
		case 3: /* configure pin of Port 3 */
				break;
		default:
				break;
	}
}
    2d54:	e28bd000 	add	sp, fp, #0
    2d58:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
    2d5c:	e12fff1e 	bx	lr
    2d60:	3fffc05c 	.word	0x3fffc05c

00002d64 <setPortPin>:

void setPortPin(char port, char pin)
{
    2d64:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
    2d68:	e28db000 	add	fp, sp, #0
    2d6c:	e24dd00c 	sub	sp, sp, #12
    2d70:	e1a02000 	mov	r2, r0
    2d74:	e1a03001 	mov	r3, r1
    2d78:	e54b2005 	strb	r2, [fp, #-5]
    2d7c:	e54b3006 	strb	r3, [fp, #-6]
	switch(port){
    2d80:	e55b3005 	ldrb	r3, [fp, #-5]
    2d84:	e3530002 	cmp	r3, #2
    2d88:	0a000004 	beq	2da0 <setPortPin+0x3c>
    2d8c:	e3530003 	cmp	r3, #3
    2d90:	0a00000a 	beq	2dc0 <setPortPin+0x5c>
    2d94:	e3530001 	cmp	r3, #1
    2d98:	0a00000a 	beq	2dc8 <setPortPin+0x64>
    2d9c:	ea000005 	b	2db8 <setPortPin+0x54>
		case 1: /* configure pin of Port 1 */
				break;
		case 2: FIO2SET = (1<<pin);
    2da0:	e59f3030 	ldr	r3, [pc, #48]	; 2dd8 <setPortPin+0x74>
    2da4:	e55b2006 	ldrb	r2, [fp, #-6]
    2da8:	e3a01001 	mov	r1, #1
    2dac:	e1a02211 	lsl	r2, r1, r2
    2db0:	e5832000 	str	r2, [r3]
				break;
    2db4:	ea000004 	b	2dcc <setPortPin+0x68>
		case 3: /* configure pin of Port 3 */
				break;
		default:
				break;
    2db8:	e1a00000 	nop			; (mov r0, r0)
    2dbc:	ea000002 	b	2dcc <setPortPin+0x68>
		case 1: /* configure pin of Port 1 */
				break;
		case 2: FIO2SET = (1<<pin);
				break;
		case 3: /* configure pin of Port 3 */
				break;
    2dc0:	e1a00000 	nop			; (mov r0, r0)
    2dc4:	ea000000 	b	2dcc <setPortPin+0x68>

void setPortPin(char port, char pin)
{
	switch(port){
		case 1: /* configure pin of Port 1 */
				break;
    2dc8:	e1a00000 	nop			; (mov r0, r0)
		case 3: /* configure pin of Port 3 */
				break;
		default:
				break;
	}
}
    2dcc:	e28bd000 	add	sp, fp, #0
    2dd0:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
    2dd4:	e12fff1e 	bx	lr
    2dd8:	3fffc058 	.word	0x3fffc058

00002ddc <delayMs>:

void delayMs(unsigned short delayInMs)
{
    2ddc:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
    2de0:	e28db000 	add	fp, sp, #0
    2de4:	e24dd00c 	sub	sp, sp, #12
    2de8:	e1a03000 	mov	r3, r0
    2dec:	e14b30b6 	strh	r3, [fp, #-6]
	T1TCR = 0x02;							/* stop and reset timer  */
    2df0:	e59f3090 	ldr	r3, [pc, #144]	; 2e88 <delayMs+0xac>
    2df4:	e3a02002 	mov	r2, #2
    2df8:	e5832000 	str	r2, [r3]
	T1PR = 0x00;							/* set prescaler to zero */
    2dfc:	e59f3088 	ldr	r3, [pc, #136]	; 2e8c <delayMs+0xb0>
    2e00:	e3a02000 	mov	r2, #0
    2e04:	e5832000 	str	r2, [r3]
	T1MR0 = delayInMs * (25000000 / 1000);	/* calculate Timer Match Register Value */
    2e08:	e59f1080 	ldr	r1, [pc, #128]	; 2e90 <delayMs+0xb4>
    2e0c:	e15b20b6 	ldrh	r2, [fp, #-6]
    2e10:	e1a03002 	mov	r3, r2
    2e14:	e1a03283 	lsl	r3, r3, #5
    2e18:	e0623003 	rsb	r3, r2, r3
    2e1c:	e1a03103 	lsl	r3, r3, #2
    2e20:	e0833002 	add	r3, r3, r2
    2e24:	e1a02103 	lsl	r2, r3, #2
    2e28:	e0833002 	add	r3, r3, r2
    2e2c:	e1a02103 	lsl	r2, r3, #2
    2e30:	e0833002 	add	r3, r3, r2
    2e34:	e1a03183 	lsl	r3, r3, #3
    2e38:	e5813000 	str	r3, [r1]
	T1IR = 0xFF;							/* reset all interrupt flags */
    2e3c:	e59f3050 	ldr	r3, [pc, #80]	; 2e94 <delayMs+0xb8>
    2e40:	e3a020ff 	mov	r2, #255	; 0xff
    2e44:	e5832000 	str	r2, [r3]
	T1MCR = 0x04;							/* stop timer on match */
    2e48:	e59f3048 	ldr	r3, [pc, #72]	; 2e98 <delayMs+0xbc>
    2e4c:	e3a02004 	mov	r2, #4
    2e50:	e5832000 	str	r2, [r3]
	T1TCR = 0x01;							/* start timer */
    2e54:	e59f302c 	ldr	r3, [pc, #44]	; 2e88 <delayMs+0xac>
    2e58:	e3a02001 	mov	r2, #1
    2e5c:	e5832000 	str	r2, [r3]

	while(T1TCR & 0x01);					/* wait until delay time has elapsed */
    2e60:	e1a00000 	nop			; (mov r0, r0)
    2e64:	e59f301c 	ldr	r3, [pc, #28]	; 2e88 <delayMs+0xac>
    2e68:	e5933000 	ldr	r3, [r3]
    2e6c:	e2033001 	and	r3, r3, #1
    2e70:	e20330ff 	and	r3, r3, #255	; 0xff
    2e74:	e3530000 	cmp	r3, #0
    2e78:	1afffff9 	bne	2e64 <delayMs+0x88>
}
    2e7c:	e28bd000 	add	sp, fp, #0
    2e80:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
    2e84:	e12fff1e 	bx	lr
    2e88:	e0008004 	.word	0xe0008004
    2e8c:	e000800c 	.word	0xe000800c
    2e90:	e0008018 	.word	0xe0008018
    2e94:	e0008000 	.word	0xe0008000
    2e98:	e0008014 	.word	0xe0008014

00002e9c <interrupt_routine>:
 * @brief User Interrupt Routine
 *
 * This function is called when a interrupt occurs
 */
void interrupt_routine()
{
    2e9c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
    2ea0:	e28db000 	add	fp, sp, #0
	/* do something here */
	/* user code */
}
    2ea4:	e28bd000 	add	sp, fp, #0
    2ea8:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
    2eac:	e12fff1e 	bx	lr

00002eb0 <main>:

/**
 * @brief main function
 */
int main(void)
{
    2eb0:	e92d4800 	push	{fp, lr}
    2eb4:	e28db004 	add	fp, sp, #4
    2eb8:	e24dd038 	sub	sp, sp, #56	; 0x38
	UART_CFG_T cfg;
	uint8_t recBytes = 0;
    2ebc:	e3a03000 	mov	r3, #0
    2ec0:	e54b3005 	strb	r3, [fp, #-5]
	uint8_t text[18] = { 'E','i','n',' ','l','a','n','g','e','r',' ','T','e','x','t', '!', '!','\0' };
    2ec4:	e59f31d8 	ldr	r3, [pc, #472]	; 30a4 <main+0x1f4>
    2ec8:	e24b1024 	sub	r1, fp, #36	; 0x24
    2ecc:	e1a02003 	mov	r2, r3
    2ed0:	e3a03012 	mov	r3, #18
    2ed4:	e1a00001 	mov	r0, r1
    2ed8:	e1a01002 	mov	r1, r2
    2edc:	e1a02003 	mov	r2, r3
    2ee0:	eb000455 	bl	403c <memcpy>
	char string[20];

	(void)SystemInit();
    2ee4:	ebfffd7c 	bl	24dc <SystemInit>

	setPortPinDir(2, 10);
    2ee8:	e3a00002 	mov	r0, #2
    2eec:	e3a0100a 	mov	r1, #10
    2ef0:	ebffff5f 	bl	2c74 <setPortPinDir>

	/* init vic */
	init_VIC();
    2ef4:	ebfffe1e 	bl	2774 <init_VIC>

	/* UART-Configuration */
	cfg.Baud_rate = 115200;
    2ef8:	e59f31a8 	ldr	r3, [pc, #424]	; 30a8 <main+0x1f8>
    2efc:	e50b3010 	str	r3, [fp, #-16]
	cfg.Databits = UART_DATABIT_8;
    2f00:	e3a03003 	mov	r3, #3
    2f04:	e54b300b 	strb	r3, [fp, #-11]
	cfg.Parity = UART_PARITY_NONE;
    2f08:	e3a03000 	mov	r3, #0
    2f0c:	e54b300c 	strb	r3, [fp, #-12]
	cfg.Stopbits = UART_STOPBIT_1;
    2f10:	e3a03000 	mov	r3, #0
    2f14:	e54b300a 	strb	r3, [fp, #-10]
	cfg.Buffer = UART_SW_BUF;
    2f18:	e3a03001 	mov	r3, #1
    2f1c:	e54b3009 	strb	r3, [fp, #-9]
	if(uart_init(LPC_UART0, &cfg, interrupt_routine)!=EOK)
    2f20:	e59f3184 	ldr	r3, [pc, #388]	; 30ac <main+0x1fc>
    2f24:	e24b2010 	sub	r2, fp, #16
    2f28:	e59f0180 	ldr	r0, [pc, #384]	; 30b0 <main+0x200>
    2f2c:	e1a01002 	mov	r1, r2
    2f30:	e1a02003 	mov	r2, r3
    2f34:	ebfff707 	bl	b58 <uart_init>
    2f38:	e1a03000 	mov	r3, r0
    2f3c:	e3530000 	cmp	r3, #0
    2f40:	0a000000 	beq	2f48 <main+0x98>
	{
		/* Something went wrong at UART initialization */
		for(;;);
    2f44:	eafffffe 	b	2f44 <main+0x94>
	}
	uart_enable(LPC_UART0, (PIN_TX_ENABLE|PIN_RX_ENABLE));
    2f48:	e59f0160 	ldr	r0, [pc, #352]	; 30b0 <main+0x200>
    2f4c:	e3a01003 	mov	r1, #3
    2f50:	ebfff7a3 	bl	de4 <uart_enable>

	/* send some test strings */
	(void)send_string(LPC_UART0, "UART Treiber - BERNDL / GLATZ\n");
    2f54:	e59f0154 	ldr	r0, [pc, #340]	; 30b0 <main+0x200>
    2f58:	e59f1154 	ldr	r1, [pc, #340]	; 30b4 <main+0x204>
    2f5c:	ebfff8d5 	bl	12b8 <send_string>
	(void)send_string(LPC_UART0, "Funktioniert! Heureka! Das sind 43 Zeichen\n");
    2f60:	e59f0148 	ldr	r0, [pc, #328]	; 30b0 <main+0x200>
    2f64:	e59f114c 	ldr	r1, [pc, #332]	; 30b8 <main+0x208>
    2f68:	ebfff8d2 	bl	12b8 <send_string>
	(void)send_buf(LPC_UART0, text, 5);
    2f6c:	e24b3024 	sub	r3, fp, #36	; 0x24
    2f70:	e59f0138 	ldr	r0, [pc, #312]	; 30b0 <main+0x200>
    2f74:	e1a01003 	mov	r1, r3
    2f78:	e3a02005 	mov	r2, #5
    2f7c:	ebfff91f 	bl	1400 <send_buf>
	put_char(LPC_UART0, '\n');
    2f80:	e59f0128 	ldr	r0, [pc, #296]	; 30b0 <main+0x200>
    2f84:	e3a0100a 	mov	r1, #10
    2f88:	ebfff8b8 	bl	1270 <put_char>
	(void)send_buf(LPC_UART0, text, 18);
    2f8c:	e24b3024 	sub	r3, fp, #36	; 0x24
    2f90:	e59f0118 	ldr	r0, [pc, #280]	; 30b0 <main+0x200>
    2f94:	e1a01003 	mov	r1, r3
    2f98:	e3a02012 	mov	r2, #18
    2f9c:	ebfff917 	bl	1400 <send_buf>
	put_char(LPC_UART0, '\n');
    2fa0:	e59f0108 	ldr	r0, [pc, #264]	; 30b0 <main+0x200>
    2fa4:	e3a0100a 	mov	r1, #10
    2fa8:	ebfff8b0 	bl	1270 <put_char>

	for(;;)
	{
		/* put_char get_char test */
		(void)send_string(LPC_UART0, "Echo test:\nEnter 10 characters\n");
    2fac:	e59f00fc 	ldr	r0, [pc, #252]	; 30b0 <main+0x200>
    2fb0:	e59f1104 	ldr	r1, [pc, #260]	; 30bc <main+0x20c>
    2fb4:	ebfff8bf 	bl	12b8 <send_string>
		while(recBytes<10)
    2fb8:	ea000008 	b	2fe0 <main+0x130>
		{
			(void)put_char(LPC_UART0, get_char(LPC_UART0));
    2fbc:	e59f00ec 	ldr	r0, [pc, #236]	; 30b0 <main+0x200>
    2fc0:	ebfff86d 	bl	117c <get_char>
    2fc4:	e1a03000 	mov	r3, r0
    2fc8:	e59f00e0 	ldr	r0, [pc, #224]	; 30b0 <main+0x200>
    2fcc:	e1a01003 	mov	r1, r3
    2fd0:	ebfff8a6 	bl	1270 <put_char>
			recBytes++;
    2fd4:	e55b3005 	ldrb	r3, [fp, #-5]
    2fd8:	e2833001 	add	r3, r3, #1
    2fdc:	e54b3005 	strb	r3, [fp, #-5]

	for(;;)
	{
		/* put_char get_char test */
		(void)send_string(LPC_UART0, "Echo test:\nEnter 10 characters\n");
		while(recBytes<10)
    2fe0:	e55b3005 	ldrb	r3, [fp, #-5]
    2fe4:	e3530009 	cmp	r3, #9
    2fe8:	9afffff3 	bls	2fbc <main+0x10c>
		{
			(void)put_char(LPC_UART0, get_char(LPC_UART0));
			recBytes++;
		}
		(void)send_string(LPC_UART0, " \n");
    2fec:	e59f00bc 	ldr	r0, [pc, #188]	; 30b0 <main+0x200>
    2ff0:	e59f10c8 	ldr	r1, [pc, #200]	; 30c0 <main+0x210>
    2ff4:	ebfff8af 	bl	12b8 <send_string>

		/* send receive string tests */
		(void)send_string(LPC_UART0, "Receive - send string test:\nEnter 4 characters\n");
    2ff8:	e59f00b0 	ldr	r0, [pc, #176]	; 30b0 <main+0x200>
    2ffc:	e59f10c0 	ldr	r1, [pc, #192]	; 30c4 <main+0x214>
    3000:	ebfff8ac 	bl	12b8 <send_string>
		(void)recv_string(LPC_UART0, string, 5);
    3004:	e24b3038 	sub	r3, fp, #56	; 0x38
    3008:	e59f00a0 	ldr	r0, [pc, #160]	; 30b0 <main+0x200>
    300c:	e1a01003 	mov	r1, r3
    3010:	e3a02005 	mov	r2, #5
    3014:	ebfff946 	bl	1534 <recv_string>
		(void)send_string(LPC_UART0, string);
    3018:	e24b3038 	sub	r3, fp, #56	; 0x38
    301c:	e59f008c 	ldr	r0, [pc, #140]	; 30b0 <main+0x200>
    3020:	e1a01003 	mov	r1, r3
    3024:	ebfff8a3 	bl	12b8 <send_string>

		/* send receive buffer tests */
		(void)send_string(LPC_UART0, "Receive - send buffer test:\nEnter 5 characters\n");
    3028:	e59f0080 	ldr	r0, [pc, #128]	; 30b0 <main+0x200>
    302c:	e59f1094 	ldr	r1, [pc, #148]	; 30c8 <main+0x218>
    3030:	ebfff8a0 	bl	12b8 <send_string>
		(void)recv_buf(LPC_UART0, text, 5);
    3034:	e24b3024 	sub	r3, fp, #36	; 0x24
    3038:	e59f0070 	ldr	r0, [pc, #112]	; 30b0 <main+0x200>
    303c:	e1a01003 	mov	r1, r3
    3040:	e3a02005 	mov	r2, #5
    3044:	ebfff95a 	bl	15b4 <recv_buf>
		(void)send_buf(LPC_UART0, text, 4);
    3048:	e24b3024 	sub	r3, fp, #36	; 0x24
    304c:	e59f005c 	ldr	r0, [pc, #92]	; 30b0 <main+0x200>
    3050:	e1a01003 	mov	r1, r3
    3054:	e3a02004 	mov	r2, #4
    3058:	ebfff8e8 	bl	1400 <send_buf>
		(void)send_string(LPC_UART0, " \n");
    305c:	e59f004c 	ldr	r0, [pc, #76]	; 30b0 <main+0x200>
    3060:	e59f1058 	ldr	r1, [pc, #88]	; 30c0 <main+0x210>
    3064:	ebfff893 	bl	12b8 <send_string>

		/* send receive string tests */
		(void)send_string(LPC_UART0, "Receive - send long string test:\nEnter 19 characters\n");
    3068:	e59f0040 	ldr	r0, [pc, #64]	; 30b0 <main+0x200>
    306c:	e59f1058 	ldr	r1, [pc, #88]	; 30cc <main+0x21c>
    3070:	ebfff890 	bl	12b8 <send_string>
		(void)recv_string(LPC_UART0, string, 20);
    3074:	e24b3038 	sub	r3, fp, #56	; 0x38
    3078:	e59f0030 	ldr	r0, [pc, #48]	; 30b0 <main+0x200>
    307c:	e1a01003 	mov	r1, r3
    3080:	e3a02014 	mov	r2, #20
    3084:	ebfff92a 	bl	1534 <recv_string>
		(void)send_string(LPC_UART0, string);
    3088:	e24b3038 	sub	r3, fp, #56	; 0x38
    308c:	e59f001c 	ldr	r0, [pc, #28]	; 30b0 <main+0x200>
    3090:	e1a01003 	mov	r1, r3
    3094:	ebfff887 	bl	12b8 <send_string>

		recBytes = 0;
    3098:	e3a03000 	mov	r3, #0
    309c:	e54b3005 	strb	r3, [fp, #-5]
	}
    30a0:	eaffffc1 	b	2fac <main+0xfc>
    30a4:	000052bc 	.word	0x000052bc
    30a8:	0001c200 	.word	0x0001c200
    30ac:	00002e9c 	.word	0x00002e9c
    30b0:	e000c000 	.word	0xe000c000
    30b4:	000051b4 	.word	0x000051b4
    30b8:	000051d4 	.word	0x000051d4
    30bc:	00005200 	.word	0x00005200
    30c0:	00005220 	.word	0x00005220
    30c4:	00005224 	.word	0x00005224
    30c8:	00005254 	.word	0x00005254
    30cc:	00005284 	.word	0x00005284

000030d0 <__aeabi_uidiv>:
    30d0:	e2512001 	subs	r2, r1, #1
    30d4:	012fff1e 	bxeq	lr
    30d8:	3a000036 	bcc	31b8 <__aeabi_uidiv+0xe8>
    30dc:	e1500001 	cmp	r0, r1
    30e0:	9a000022 	bls	3170 <__aeabi_uidiv+0xa0>
    30e4:	e1110002 	tst	r1, r2
    30e8:	0a000023 	beq	317c <__aeabi_uidiv+0xac>
    30ec:	e311020e 	tst	r1, #-536870912	; 0xe0000000
    30f0:	01a01181 	lsleq	r1, r1, #3
    30f4:	03a03008 	moveq	r3, #8
    30f8:	13a03001 	movne	r3, #1
    30fc:	e3510201 	cmp	r1, #268435456	; 0x10000000
    3100:	31510000 	cmpcc	r1, r0
    3104:	31a01201 	lslcc	r1, r1, #4
    3108:	31a03203 	lslcc	r3, r3, #4
    310c:	3afffffa 	bcc	30fc <__aeabi_uidiv+0x2c>
    3110:	e3510102 	cmp	r1, #-2147483648	; 0x80000000
    3114:	31510000 	cmpcc	r1, r0
    3118:	31a01081 	lslcc	r1, r1, #1
    311c:	31a03083 	lslcc	r3, r3, #1
    3120:	3afffffa 	bcc	3110 <__aeabi_uidiv+0x40>
    3124:	e3a02000 	mov	r2, #0
    3128:	e1500001 	cmp	r0, r1
    312c:	20400001 	subcs	r0, r0, r1
    3130:	21822003 	orrcs	r2, r2, r3
    3134:	e15000a1 	cmp	r0, r1, lsr #1
    3138:	204000a1 	subcs	r0, r0, r1, lsr #1
    313c:	218220a3 	orrcs	r2, r2, r3, lsr #1
    3140:	e1500121 	cmp	r0, r1, lsr #2
    3144:	20400121 	subcs	r0, r0, r1, lsr #2
    3148:	21822123 	orrcs	r2, r2, r3, lsr #2
    314c:	e15001a1 	cmp	r0, r1, lsr #3
    3150:	204001a1 	subcs	r0, r0, r1, lsr #3
    3154:	218221a3 	orrcs	r2, r2, r3, lsr #3
    3158:	e3500000 	cmp	r0, #0
    315c:	11b03223 	lsrsne	r3, r3, #4
    3160:	11a01221 	lsrne	r1, r1, #4
    3164:	1affffef 	bne	3128 <__aeabi_uidiv+0x58>
    3168:	e1a00002 	mov	r0, r2
    316c:	e12fff1e 	bx	lr
    3170:	03a00001 	moveq	r0, #1
    3174:	13a00000 	movne	r0, #0
    3178:	e12fff1e 	bx	lr
    317c:	e3510801 	cmp	r1, #65536	; 0x10000
    3180:	21a01821 	lsrcs	r1, r1, #16
    3184:	23a02010 	movcs	r2, #16
    3188:	33a02000 	movcc	r2, #0
    318c:	e3510c01 	cmp	r1, #256	; 0x100
    3190:	21a01421 	lsrcs	r1, r1, #8
    3194:	22822008 	addcs	r2, r2, #8
    3198:	e3510010 	cmp	r1, #16
    319c:	21a01221 	lsrcs	r1, r1, #4
    31a0:	22822004 	addcs	r2, r2, #4
    31a4:	e3510004 	cmp	r1, #4
    31a8:	82822003 	addhi	r2, r2, #3
    31ac:	908220a1 	addls	r2, r2, r1, lsr #1
    31b0:	e1a00230 	lsr	r0, r0, r2
    31b4:	e12fff1e 	bx	lr
    31b8:	e3500000 	cmp	r0, #0
    31bc:	13e00000 	mvnne	r0, #0
    31c0:	ea000059 	b	332c <__aeabi_idiv0>

000031c4 <__aeabi_uidivmod>:
    31c4:	e3510000 	cmp	r1, #0
    31c8:	0afffffa 	beq	31b8 <__aeabi_uidiv+0xe8>
    31cc:	e92d4003 	push	{r0, r1, lr}
    31d0:	ebffffbe 	bl	30d0 <__aeabi_uidiv>
    31d4:	e8bd4006 	pop	{r1, r2, lr}
    31d8:	e0030092 	mul	r3, r2, r0
    31dc:	e0411003 	sub	r1, r1, r3
    31e0:	e12fff1e 	bx	lr

000031e4 <__aeabi_idiv>:
    31e4:	e3510000 	cmp	r1, #0
    31e8:	0a000043 	beq	32fc <.divsi3_skip_div0_test+0x110>

000031ec <.divsi3_skip_div0_test>:
    31ec:	e020c001 	eor	ip, r0, r1
    31f0:	42611000 	rsbmi	r1, r1, #0
    31f4:	e2512001 	subs	r2, r1, #1
    31f8:	0a000027 	beq	329c <.divsi3_skip_div0_test+0xb0>
    31fc:	e1b03000 	movs	r3, r0
    3200:	42603000 	rsbmi	r3, r0, #0
    3204:	e1530001 	cmp	r3, r1
    3208:	9a000026 	bls	32a8 <.divsi3_skip_div0_test+0xbc>
    320c:	e1110002 	tst	r1, r2
    3210:	0a000028 	beq	32b8 <.divsi3_skip_div0_test+0xcc>
    3214:	e311020e 	tst	r1, #-536870912	; 0xe0000000
    3218:	01a01181 	lsleq	r1, r1, #3
    321c:	03a02008 	moveq	r2, #8
    3220:	13a02001 	movne	r2, #1
    3224:	e3510201 	cmp	r1, #268435456	; 0x10000000
    3228:	31510003 	cmpcc	r1, r3
    322c:	31a01201 	lslcc	r1, r1, #4
    3230:	31a02202 	lslcc	r2, r2, #4
    3234:	3afffffa 	bcc	3224 <.divsi3_skip_div0_test+0x38>
    3238:	e3510102 	cmp	r1, #-2147483648	; 0x80000000
    323c:	31510003 	cmpcc	r1, r3
    3240:	31a01081 	lslcc	r1, r1, #1
    3244:	31a02082 	lslcc	r2, r2, #1
    3248:	3afffffa 	bcc	3238 <.divsi3_skip_div0_test+0x4c>
    324c:	e3a00000 	mov	r0, #0
    3250:	e1530001 	cmp	r3, r1
    3254:	20433001 	subcs	r3, r3, r1
    3258:	21800002 	orrcs	r0, r0, r2
    325c:	e15300a1 	cmp	r3, r1, lsr #1
    3260:	204330a1 	subcs	r3, r3, r1, lsr #1
    3264:	218000a2 	orrcs	r0, r0, r2, lsr #1
    3268:	e1530121 	cmp	r3, r1, lsr #2
    326c:	20433121 	subcs	r3, r3, r1, lsr #2
    3270:	21800122 	orrcs	r0, r0, r2, lsr #2
    3274:	e15301a1 	cmp	r3, r1, lsr #3
    3278:	204331a1 	subcs	r3, r3, r1, lsr #3
    327c:	218001a2 	orrcs	r0, r0, r2, lsr #3
    3280:	e3530000 	cmp	r3, #0
    3284:	11b02222 	lsrsne	r2, r2, #4
    3288:	11a01221 	lsrne	r1, r1, #4
    328c:	1affffef 	bne	3250 <.divsi3_skip_div0_test+0x64>
    3290:	e35c0000 	cmp	ip, #0
    3294:	42600000 	rsbmi	r0, r0, #0
    3298:	e12fff1e 	bx	lr
    329c:	e13c0000 	teq	ip, r0
    32a0:	42600000 	rsbmi	r0, r0, #0
    32a4:	e12fff1e 	bx	lr
    32a8:	33a00000 	movcc	r0, #0
    32ac:	01a00fcc 	asreq	r0, ip, #31
    32b0:	03800001 	orreq	r0, r0, #1
    32b4:	e12fff1e 	bx	lr
    32b8:	e3510801 	cmp	r1, #65536	; 0x10000
    32bc:	21a01821 	lsrcs	r1, r1, #16
    32c0:	23a02010 	movcs	r2, #16
    32c4:	33a02000 	movcc	r2, #0
    32c8:	e3510c01 	cmp	r1, #256	; 0x100
    32cc:	21a01421 	lsrcs	r1, r1, #8
    32d0:	22822008 	addcs	r2, r2, #8
    32d4:	e3510010 	cmp	r1, #16
    32d8:	21a01221 	lsrcs	r1, r1, #4
    32dc:	22822004 	addcs	r2, r2, #4
    32e0:	e3510004 	cmp	r1, #4
    32e4:	82822003 	addhi	r2, r2, #3
    32e8:	908220a1 	addls	r2, r2, r1, lsr #1
    32ec:	e35c0000 	cmp	ip, #0
    32f0:	e1a00233 	lsr	r0, r3, r2
    32f4:	42600000 	rsbmi	r0, r0, #0
    32f8:	e12fff1e 	bx	lr
    32fc:	e3500000 	cmp	r0, #0
    3300:	c3e00102 	mvngt	r0, #-2147483648	; 0x80000000
    3304:	b3a00102 	movlt	r0, #-2147483648	; 0x80000000
    3308:	ea000007 	b	332c <__aeabi_idiv0>

0000330c <__aeabi_idivmod>:
    330c:	e3510000 	cmp	r1, #0
    3310:	0afffff9 	beq	32fc <.divsi3_skip_div0_test+0x110>
    3314:	e92d4003 	push	{r0, r1, lr}
    3318:	ebffffb3 	bl	31ec <.divsi3_skip_div0_test>
    331c:	e8bd4006 	pop	{r1, r2, lr}
    3320:	e0030092 	mul	r3, r2, r0
    3324:	e0411003 	sub	r1, r1, r3
    3328:	e12fff1e 	bx	lr

0000332c <__aeabi_idiv0>:
    332c:	e12fff1e 	bx	lr

00003330 <__aeabi_drsub>:
    3330:	e2211102 	eor	r1, r1, #-2147483648	; 0x80000000
    3334:	ea000000 	b	333c <__adddf3>

00003338 <__aeabi_dsub>:
    3338:	e2233102 	eor	r3, r3, #-2147483648	; 0x80000000

0000333c <__adddf3>:
    333c:	e92d4030 	push	{r4, r5, lr}
    3340:	e1a04081 	lsl	r4, r1, #1
    3344:	e1a05083 	lsl	r5, r3, #1
    3348:	e1340005 	teq	r4, r5
    334c:	01300002 	teqeq	r0, r2
    3350:	1194c000 	orrsne	ip, r4, r0
    3354:	1195c002 	orrsne	ip, r5, r2
    3358:	11f0cac4 	mvnsne	ip, r4, asr #21
    335c:	11f0cac5 	mvnsne	ip, r5, asr #21
    3360:	0a00008c 	beq	3598 <__adddf3+0x25c>
    3364:	e1a04aa4 	lsr	r4, r4, #21
    3368:	e0745aa5 	rsbs	r5, r4, r5, lsr #21
    336c:	b2655000 	rsblt	r5, r5, #0
    3370:	da000006 	ble	3390 <__adddf3+0x54>
    3374:	e0844005 	add	r4, r4, r5
    3378:	e0202002 	eor	r2, r0, r2
    337c:	e0213003 	eor	r3, r1, r3
    3380:	e0220000 	eor	r0, r2, r0
    3384:	e0231001 	eor	r1, r3, r1
    3388:	e0202002 	eor	r2, r0, r2
    338c:	e0213003 	eor	r3, r1, r3
    3390:	e3550036 	cmp	r5, #54	; 0x36
    3394:	88bd4030 	pophi	{r4, r5, lr}
    3398:	812fff1e 	bxhi	lr
    339c:	e3110102 	tst	r1, #-2147483648	; 0x80000000
    33a0:	e1a01601 	lsl	r1, r1, #12
    33a4:	e3a0c601 	mov	ip, #1048576	; 0x100000
    33a8:	e18c1621 	orr	r1, ip, r1, lsr #12
    33ac:	0a000001 	beq	33b8 <__adddf3+0x7c>
    33b0:	e2700000 	rsbs	r0, r0, #0
    33b4:	e2e11000 	rsc	r1, r1, #0
    33b8:	e3130102 	tst	r3, #-2147483648	; 0x80000000
    33bc:	e1a03603 	lsl	r3, r3, #12
    33c0:	e18c3623 	orr	r3, ip, r3, lsr #12
    33c4:	0a000001 	beq	33d0 <__adddf3+0x94>
    33c8:	e2722000 	rsbs	r2, r2, #0
    33cc:	e2e33000 	rsc	r3, r3, #0
    33d0:	e1340005 	teq	r4, r5
    33d4:	0a000069 	beq	3580 <__adddf3+0x244>
    33d8:	e2444001 	sub	r4, r4, #1
    33dc:	e275e020 	rsbs	lr, r5, #32
    33e0:	ba000005 	blt	33fc <__adddf3+0xc0>
    33e4:	e1a0ce12 	lsl	ip, r2, lr
    33e8:	e0900532 	adds	r0, r0, r2, lsr r5
    33ec:	e2a11000 	adc	r1, r1, #0
    33f0:	e0900e13 	adds	r0, r0, r3, lsl lr
    33f4:	e0b11553 	adcs	r1, r1, r3, asr r5
    33f8:	ea000006 	b	3418 <__adddf3+0xdc>
    33fc:	e2455020 	sub	r5, r5, #32
    3400:	e28ee020 	add	lr, lr, #32
    3404:	e3520001 	cmp	r2, #1
    3408:	e1a0ce13 	lsl	ip, r3, lr
    340c:	238cc002 	orrcs	ip, ip, #2
    3410:	e0900553 	adds	r0, r0, r3, asr r5
    3414:	e0b11fc3 	adcs	r1, r1, r3, asr #31
    3418:	e2015102 	and	r5, r1, #-2147483648	; 0x80000000
    341c:	5a000002 	bpl	342c <__adddf3+0xf0>
    3420:	e27cc000 	rsbs	ip, ip, #0
    3424:	e2f00000 	rscs	r0, r0, #0
    3428:	e2e11000 	rsc	r1, r1, #0
    342c:	e3510601 	cmp	r1, #1048576	; 0x100000
    3430:	3a00000f 	bcc	3474 <__adddf3+0x138>
    3434:	e3510602 	cmp	r1, #2097152	; 0x200000
    3438:	3a000006 	bcc	3458 <__adddf3+0x11c>
    343c:	e1b010a1 	lsrs	r1, r1, #1
    3440:	e1b00060 	rrxs	r0, r0
    3444:	e1a0c06c 	rrx	ip, ip
    3448:	e2844001 	add	r4, r4, #1
    344c:	e1a02a84 	lsl	r2, r4, #21
    3450:	e3720501 	cmn	r2, #4194304	; 0x400000
    3454:	2a00006b 	bcs	3608 <__adddf3+0x2cc>
    3458:	e35c0102 	cmp	ip, #-2147483648	; 0x80000000
    345c:	01b0c0a0 	lsrseq	ip, r0, #1
    3460:	e2b00000 	adcs	r0, r0, #0
    3464:	e0a11a04 	adc	r1, r1, r4, lsl #20
    3468:	e1811005 	orr	r1, r1, r5
    346c:	e8bd4030 	pop	{r4, r5, lr}
    3470:	e12fff1e 	bx	lr
    3474:	e1b0c08c 	lsls	ip, ip, #1
    3478:	e0b00000 	adcs	r0, r0, r0
    347c:	e0a11001 	adc	r1, r1, r1
    3480:	e3110601 	tst	r1, #1048576	; 0x100000
    3484:	e2444001 	sub	r4, r4, #1
    3488:	1afffff2 	bne	3458 <__adddf3+0x11c>
    348c:	e3310000 	teq	r1, #0
    3490:	13a03014 	movne	r3, #20
    3494:	03a03034 	moveq	r3, #52	; 0x34
    3498:	01a01000 	moveq	r1, r0
    349c:	03a00000 	moveq	r0, #0
    34a0:	e1a02001 	mov	r2, r1
    34a4:	e3520801 	cmp	r2, #65536	; 0x10000
    34a8:	21a02822 	lsrcs	r2, r2, #16
    34ac:	22433010 	subcs	r3, r3, #16
    34b0:	e3520c01 	cmp	r2, #256	; 0x100
    34b4:	21a02422 	lsrcs	r2, r2, #8
    34b8:	22433008 	subcs	r3, r3, #8
    34bc:	e3520010 	cmp	r2, #16
    34c0:	21a02222 	lsrcs	r2, r2, #4
    34c4:	22433004 	subcs	r3, r3, #4
    34c8:	e3520004 	cmp	r2, #4
    34cc:	22433002 	subcs	r3, r3, #2
    34d0:	304330a2 	subcc	r3, r3, r2, lsr #1
    34d4:	e04331a2 	sub	r3, r3, r2, lsr #3
    34d8:	e2532020 	subs	r2, r3, #32
    34dc:	aa000007 	bge	3500 <__adddf3+0x1c4>
    34e0:	e292200c 	adds	r2, r2, #12
    34e4:	da000004 	ble	34fc <__adddf3+0x1c0>
    34e8:	e282c014 	add	ip, r2, #20
    34ec:	e262200c 	rsb	r2, r2, #12
    34f0:	e1a00c11 	lsl	r0, r1, ip
    34f4:	e1a01231 	lsr	r1, r1, r2
    34f8:	ea000004 	b	3510 <__adddf3+0x1d4>
    34fc:	e2822014 	add	r2, r2, #20
    3500:	d262c020 	rsble	ip, r2, #32
    3504:	e1a01211 	lsl	r1, r1, r2
    3508:	d1811c30 	orrle	r1, r1, r0, lsr ip
    350c:	d1a00210 	lslle	r0, r0, r2
    3510:	e0544003 	subs	r4, r4, r3
    3514:	a0811a04 	addge	r1, r1, r4, lsl #20
    3518:	a1811005 	orrge	r1, r1, r5
    351c:	a8bd4030 	popge	{r4, r5, lr}
    3520:	a12fff1e 	bxge	lr
    3524:	e1e04004 	mvn	r4, r4
    3528:	e254401f 	subs	r4, r4, #31
    352c:	aa00000f 	bge	3570 <__adddf3+0x234>
    3530:	e294400c 	adds	r4, r4, #12
    3534:	ca000006 	bgt	3554 <__adddf3+0x218>
    3538:	e2844014 	add	r4, r4, #20
    353c:	e2642020 	rsb	r2, r4, #32
    3540:	e1a00430 	lsr	r0, r0, r4
    3544:	e1800211 	orr	r0, r0, r1, lsl r2
    3548:	e1851431 	orr	r1, r5, r1, lsr r4
    354c:	e8bd4030 	pop	{r4, r5, lr}
    3550:	e12fff1e 	bx	lr
    3554:	e264400c 	rsb	r4, r4, #12
    3558:	e2642020 	rsb	r2, r4, #32
    355c:	e1a00230 	lsr	r0, r0, r2
    3560:	e1800411 	orr	r0, r0, r1, lsl r4
    3564:	e1a01005 	mov	r1, r5
    3568:	e8bd4030 	pop	{r4, r5, lr}
    356c:	e12fff1e 	bx	lr
    3570:	e1a00431 	lsr	r0, r1, r4
    3574:	e1a01005 	mov	r1, r5
    3578:	e8bd4030 	pop	{r4, r5, lr}
    357c:	e12fff1e 	bx	lr
    3580:	e3340000 	teq	r4, #0
    3584:	e2233601 	eor	r3, r3, #1048576	; 0x100000
    3588:	02211601 	eoreq	r1, r1, #1048576	; 0x100000
    358c:	02844001 	addeq	r4, r4, #1
    3590:	12455001 	subne	r5, r5, #1
    3594:	eaffff8f 	b	33d8 <__adddf3+0x9c>
    3598:	e1f0cac4 	mvns	ip, r4, asr #21
    359c:	11f0cac5 	mvnsne	ip, r5, asr #21
    35a0:	0a00001d 	beq	361c <__adddf3+0x2e0>
    35a4:	e1340005 	teq	r4, r5
    35a8:	01300002 	teqeq	r0, r2
    35ac:	0a000004 	beq	35c4 <__adddf3+0x288>
    35b0:	e194c000 	orrs	ip, r4, r0
    35b4:	01a01003 	moveq	r1, r3
    35b8:	01a00002 	moveq	r0, r2
    35bc:	e8bd4030 	pop	{r4, r5, lr}
    35c0:	e12fff1e 	bx	lr
    35c4:	e1310003 	teq	r1, r3
    35c8:	13a01000 	movne	r1, #0
    35cc:	13a00000 	movne	r0, #0
    35d0:	18bd4030 	popne	{r4, r5, lr}
    35d4:	112fff1e 	bxne	lr
    35d8:	e1b0caa4 	lsrs	ip, r4, #21
    35dc:	1a000004 	bne	35f4 <__adddf3+0x2b8>
    35e0:	e1b00080 	lsls	r0, r0, #1
    35e4:	e0b11001 	adcs	r1, r1, r1
    35e8:	23811102 	orrcs	r1, r1, #-2147483648	; 0x80000000
    35ec:	e8bd4030 	pop	{r4, r5, lr}
    35f0:	e12fff1e 	bx	lr
    35f4:	e2944501 	adds	r4, r4, #4194304	; 0x400000
    35f8:	32811601 	addcc	r1, r1, #1048576	; 0x100000
    35fc:	38bd4030 	popcc	{r4, r5, lr}
    3600:	312fff1e 	bxcc	lr
    3604:	e2015102 	and	r5, r1, #-2147483648	; 0x80000000
    3608:	e385147f 	orr	r1, r5, #2130706432	; 0x7f000000
    360c:	e381160f 	orr	r1, r1, #15728640	; 0xf00000
    3610:	e3a00000 	mov	r0, #0
    3614:	e8bd4030 	pop	{r4, r5, lr}
    3618:	e12fff1e 	bx	lr
    361c:	e1f0cac4 	mvns	ip, r4, asr #21
    3620:	11a01003 	movne	r1, r3
    3624:	11a00002 	movne	r0, r2
    3628:	01f0cac5 	mvnseq	ip, r5, asr #21
    362c:	11a03001 	movne	r3, r1
    3630:	11a02000 	movne	r2, r0
    3634:	e1904601 	orrs	r4, r0, r1, lsl #12
    3638:	01925603 	orrseq	r5, r2, r3, lsl #12
    363c:	01310003 	teqeq	r1, r3
    3640:	13811702 	orrne	r1, r1, #524288	; 0x80000
    3644:	e8bd4030 	pop	{r4, r5, lr}
    3648:	e12fff1e 	bx	lr

0000364c <__aeabi_ui2d>:
    364c:	e3300000 	teq	r0, #0
    3650:	03a01000 	moveq	r1, #0
    3654:	012fff1e 	bxeq	lr
    3658:	e92d4030 	push	{r4, r5, lr}
    365c:	e3a04b01 	mov	r4, #1024	; 0x400
    3660:	e2844032 	add	r4, r4, #50	; 0x32
    3664:	e3a05000 	mov	r5, #0
    3668:	e3a01000 	mov	r1, #0
    366c:	eaffff86 	b	348c <__adddf3+0x150>

00003670 <__aeabi_i2d>:
    3670:	e3300000 	teq	r0, #0
    3674:	03a01000 	moveq	r1, #0
    3678:	012fff1e 	bxeq	lr
    367c:	e92d4030 	push	{r4, r5, lr}
    3680:	e3a04b01 	mov	r4, #1024	; 0x400
    3684:	e2844032 	add	r4, r4, #50	; 0x32
    3688:	e2105102 	ands	r5, r0, #-2147483648	; 0x80000000
    368c:	42600000 	rsbmi	r0, r0, #0
    3690:	e3a01000 	mov	r1, #0
    3694:	eaffff7c 	b	348c <__adddf3+0x150>

00003698 <__aeabi_f2d>:
    3698:	e1b02080 	lsls	r2, r0, #1
    369c:	e1a011c2 	asr	r1, r2, #3
    36a0:	e1a01061 	rrx	r1, r1
    36a4:	e1a00e02 	lsl	r0, r2, #28
    36a8:	121234ff 	andsne	r3, r2, #-16777216	; 0xff000000
    36ac:	133304ff 	teqne	r3, #-16777216	; 0xff000000
    36b0:	1221130e 	eorne	r1, r1, #939524096	; 0x38000000
    36b4:	112fff1e 	bxne	lr
    36b8:	e3320000 	teq	r2, #0
    36bc:	133304ff 	teqne	r3, #-16777216	; 0xff000000
    36c0:	012fff1e 	bxeq	lr
    36c4:	e92d4030 	push	{r4, r5, lr}
    36c8:	e3a04d0e 	mov	r4, #896	; 0x380
    36cc:	e2015102 	and	r5, r1, #-2147483648	; 0x80000000
    36d0:	e3c11102 	bic	r1, r1, #-2147483648	; 0x80000000
    36d4:	eaffff6c 	b	348c <__adddf3+0x150>

000036d8 <__aeabi_ul2d>:
    36d8:	e1902001 	orrs	r2, r0, r1
    36dc:	012fff1e 	bxeq	lr
    36e0:	e92d4030 	push	{r4, r5, lr}
    36e4:	e3a05000 	mov	r5, #0
    36e8:	ea000006 	b	3708 <__aeabi_l2d+0x1c>

000036ec <__aeabi_l2d>:
    36ec:	e1902001 	orrs	r2, r0, r1
    36f0:	012fff1e 	bxeq	lr
    36f4:	e92d4030 	push	{r4, r5, lr}
    36f8:	e2115102 	ands	r5, r1, #-2147483648	; 0x80000000
    36fc:	5a000001 	bpl	3708 <__aeabi_l2d+0x1c>
    3700:	e2700000 	rsbs	r0, r0, #0
    3704:	e2e11000 	rsc	r1, r1, #0
    3708:	e3a04b01 	mov	r4, #1024	; 0x400
    370c:	e2844032 	add	r4, r4, #50	; 0x32
    3710:	e1b0cb21 	lsrs	ip, r1, #22
    3714:	0affff44 	beq	342c <__adddf3+0xf0>
    3718:	e3a02003 	mov	r2, #3
    371c:	e1b0c1ac 	lsrs	ip, ip, #3
    3720:	12822003 	addne	r2, r2, #3
    3724:	e1b0c1ac 	lsrs	ip, ip, #3
    3728:	12822003 	addne	r2, r2, #3
    372c:	e08221ac 	add	r2, r2, ip, lsr #3
    3730:	e2623020 	rsb	r3, r2, #32
    3734:	e1a0c310 	lsl	ip, r0, r3
    3738:	e1a00230 	lsr	r0, r0, r2
    373c:	e1800311 	orr	r0, r0, r1, lsl r3
    3740:	e1a01231 	lsr	r1, r1, r2
    3744:	e0844002 	add	r4, r4, r2
    3748:	eaffff37 	b	342c <__adddf3+0xf0>

0000374c <__gedf2>:
    374c:	e3e0c000 	mvn	ip, #0
    3750:	ea000002 	b	3760 <__cmpdf2+0x4>

00003754 <__ledf2>:
    3754:	e3a0c001 	mov	ip, #1
    3758:	ea000000 	b	3760 <__cmpdf2+0x4>

0000375c <__cmpdf2>:
    375c:	e3a0c001 	mov	ip, #1
    3760:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
    3764:	e1a0c081 	lsl	ip, r1, #1
    3768:	e1f0cacc 	mvns	ip, ip, asr #21
    376c:	e1a0c083 	lsl	ip, r3, #1
    3770:	11f0cacc 	mvnsne	ip, ip, asr #21
    3774:	0a00000e 	beq	37b4 <__cmpdf2+0x58>
    3778:	e28dd004 	add	sp, sp, #4
    377c:	e190c081 	orrs	ip, r0, r1, lsl #1
    3780:	0192c083 	orrseq	ip, r2, r3, lsl #1
    3784:	11310003 	teqne	r1, r3
    3788:	01300002 	teqeq	r0, r2
    378c:	03a00000 	moveq	r0, #0
    3790:	012fff1e 	bxeq	lr
    3794:	e3700000 	cmn	r0, #0
    3798:	e1310003 	teq	r1, r3
    379c:	51510003 	cmppl	r1, r3
    37a0:	01500002 	cmpeq	r0, r2
    37a4:	21a00fc3 	asrcs	r0, r3, #31
    37a8:	31e00fc3 	mvncc	r0, r3, asr #31
    37ac:	e3800001 	orr	r0, r0, #1
    37b0:	e12fff1e 	bx	lr
    37b4:	e1a0c081 	lsl	ip, r1, #1
    37b8:	e1f0cacc 	mvns	ip, ip, asr #21
    37bc:	1a000001 	bne	37c8 <__cmpdf2+0x6c>
    37c0:	e190c601 	orrs	ip, r0, r1, lsl #12
    37c4:	1a000004 	bne	37dc <__cmpdf2+0x80>
    37c8:	e1a0c083 	lsl	ip, r3, #1
    37cc:	e1f0cacc 	mvns	ip, ip, asr #21
    37d0:	1affffe8 	bne	3778 <__cmpdf2+0x1c>
    37d4:	e192c603 	orrs	ip, r2, r3, lsl #12
    37d8:	0affffe6 	beq	3778 <__cmpdf2+0x1c>
    37dc:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
    37e0:	e12fff1e 	bx	lr

000037e4 <__aeabi_cdrcmple>:
    37e4:	e1a0c000 	mov	ip, r0
    37e8:	e1a00002 	mov	r0, r2
    37ec:	e1a0200c 	mov	r2, ip
    37f0:	e1a0c001 	mov	ip, r1
    37f4:	e1a01003 	mov	r1, r3
    37f8:	e1a0300c 	mov	r3, ip
    37fc:	eaffffff 	b	3800 <__aeabi_cdcmpeq>

00003800 <__aeabi_cdcmpeq>:
    3800:	e92d4001 	push	{r0, lr}
    3804:	ebffffd4 	bl	375c <__cmpdf2>
    3808:	e3500000 	cmp	r0, #0
    380c:	43700000 	cmnmi	r0, #0
    3810:	e8bd4001 	pop	{r0, lr}
    3814:	e12fff1e 	bx	lr

00003818 <__aeabi_dcmpeq>:
    3818:	e52de008 	str	lr, [sp, #-8]!
    381c:	ebfffff7 	bl	3800 <__aeabi_cdcmpeq>
    3820:	03a00001 	moveq	r0, #1
    3824:	13a00000 	movne	r0, #0
    3828:	e49de008 	ldr	lr, [sp], #8
    382c:	e12fff1e 	bx	lr

00003830 <__aeabi_dcmplt>:
    3830:	e52de008 	str	lr, [sp, #-8]!
    3834:	ebfffff1 	bl	3800 <__aeabi_cdcmpeq>
    3838:	33a00001 	movcc	r0, #1
    383c:	23a00000 	movcs	r0, #0
    3840:	e49de008 	ldr	lr, [sp], #8
    3844:	e12fff1e 	bx	lr

00003848 <__aeabi_dcmple>:
    3848:	e52de008 	str	lr, [sp, #-8]!
    384c:	ebffffeb 	bl	3800 <__aeabi_cdcmpeq>
    3850:	93a00001 	movls	r0, #1
    3854:	83a00000 	movhi	r0, #0
    3858:	e49de008 	ldr	lr, [sp], #8
    385c:	e12fff1e 	bx	lr

00003860 <__aeabi_dcmpge>:
    3860:	e52de008 	str	lr, [sp, #-8]!
    3864:	ebffffde 	bl	37e4 <__aeabi_cdrcmple>
    3868:	93a00001 	movls	r0, #1
    386c:	83a00000 	movhi	r0, #0
    3870:	e49de008 	ldr	lr, [sp], #8
    3874:	e12fff1e 	bx	lr

00003878 <__aeabi_dcmpgt>:
    3878:	e52de008 	str	lr, [sp, #-8]!
    387c:	ebffffd8 	bl	37e4 <__aeabi_cdrcmple>
    3880:	33a00001 	movcc	r0, #1
    3884:	23a00000 	movcs	r0, #0
    3888:	e49de008 	ldr	lr, [sp], #8
    388c:	e12fff1e 	bx	lr

00003890 <__aeabi_d2f>:
    3890:	e1a02081 	lsl	r2, r1, #1
    3894:	e2523207 	subs	r3, r2, #1879048192	; 0x70000000
    3898:	2253c602 	subscs	ip, r3, #2097152	; 0x200000
    389c:	227cc57f 	rsbscs	ip, ip, #532676608	; 0x1fc00000
    38a0:	9a000006 	bls	38c0 <__aeabi_d2f+0x30>
    38a4:	e201c102 	and	ip, r1, #-2147483648	; 0x80000000
    38a8:	e1a02180 	lsl	r2, r0, #3
    38ac:	e18c0ea0 	orr	r0, ip, r0, lsr #29
    38b0:	e3520102 	cmp	r2, #-2147483648	; 0x80000000
    38b4:	e0a00103 	adc	r0, r0, r3, lsl #2
    38b8:	03c00001 	biceq	r0, r0, #1
    38bc:	e12fff1e 	bx	lr
    38c0:	e3110101 	tst	r1, #1073741824	; 0x40000000
    38c4:	1a00000f 	bne	3908 <__aeabi_d2f+0x78>
    38c8:	e293262e 	adds	r2, r3, #48234496	; 0x2e00000
    38cc:	b2010102 	andlt	r0, r1, #-2147483648	; 0x80000000
    38d0:	b12fff1e 	bxlt	lr
    38d4:	e3811601 	orr	r1, r1, #1048576	; 0x100000
    38d8:	e1a02aa2 	lsr	r2, r2, #21
    38dc:	e2622018 	rsb	r2, r2, #24
    38e0:	e262c020 	rsb	ip, r2, #32
    38e4:	e1b03c10 	lsls	r3, r0, ip
    38e8:	e1a00230 	lsr	r0, r0, r2
    38ec:	13800001 	orrne	r0, r0, #1
    38f0:	e1a03581 	lsl	r3, r1, #11
    38f4:	e1a035a3 	lsr	r3, r3, #11
    38f8:	e1800c13 	orr	r0, r0, r3, lsl ip
    38fc:	e1a03233 	lsr	r3, r3, r2
    3900:	e1a03083 	lsl	r3, r3, #1
    3904:	eaffffe6 	b	38a4 <__aeabi_d2f+0x14>
    3908:	e1f03ac2 	mvns	r3, r2, asr #21
    390c:	1a000003 	bne	3920 <__aeabi_d2f+0x90>
    3910:	e1903601 	orrs	r3, r0, r1, lsl #12
    3914:	13a0047f 	movne	r0, #2130706432	; 0x7f000000
    3918:	13800503 	orrne	r0, r0, #12582912	; 0xc00000
    391c:	112fff1e 	bxne	lr
    3920:	e2010102 	and	r0, r1, #-2147483648	; 0x80000000
    3924:	e380047f 	orr	r0, r0, #2130706432	; 0x7f000000
    3928:	e3800502 	orr	r0, r0, #8388608	; 0x800000
    392c:	e12fff1e 	bx	lr

00003930 <__aeabi_frsub>:
    3930:	e2200102 	eor	r0, r0, #-2147483648	; 0x80000000
    3934:	ea000000 	b	393c <__addsf3>

00003938 <__aeabi_fsub>:
    3938:	e2211102 	eor	r1, r1, #-2147483648	; 0x80000000

0000393c <__addsf3>:
    393c:	e1b02080 	lsls	r2, r0, #1
    3940:	11b03081 	lslsne	r3, r1, #1
    3944:	11320003 	teqne	r2, r3
    3948:	11f0cc42 	mvnsne	ip, r2, asr #24
    394c:	11f0cc43 	mvnsne	ip, r3, asr #24
    3950:	0a000047 	beq	3a74 <__addsf3+0x138>
    3954:	e1a02c22 	lsr	r2, r2, #24
    3958:	e0723c23 	rsbs	r3, r2, r3, lsr #24
    395c:	c0822003 	addgt	r2, r2, r3
    3960:	c0201001 	eorgt	r1, r0, r1
    3964:	c0210000 	eorgt	r0, r1, r0
    3968:	c0201001 	eorgt	r1, r0, r1
    396c:	b2633000 	rsblt	r3, r3, #0
    3970:	e3530019 	cmp	r3, #25
    3974:	812fff1e 	bxhi	lr
    3978:	e3100102 	tst	r0, #-2147483648	; 0x80000000
    397c:	e3800502 	orr	r0, r0, #8388608	; 0x800000
    3980:	e3c004ff 	bic	r0, r0, #-16777216	; 0xff000000
    3984:	12600000 	rsbne	r0, r0, #0
    3988:	e3110102 	tst	r1, #-2147483648	; 0x80000000
    398c:	e3811502 	orr	r1, r1, #8388608	; 0x800000
    3990:	e3c114ff 	bic	r1, r1, #-16777216	; 0xff000000
    3994:	12611000 	rsbne	r1, r1, #0
    3998:	e1320003 	teq	r2, r3
    399c:	0a00002e 	beq	3a5c <__addsf3+0x120>
    39a0:	e2422001 	sub	r2, r2, #1
    39a4:	e0900351 	adds	r0, r0, r1, asr r3
    39a8:	e2633020 	rsb	r3, r3, #32
    39ac:	e1a01311 	lsl	r1, r1, r3
    39b0:	e2003102 	and	r3, r0, #-2147483648	; 0x80000000
    39b4:	5a000001 	bpl	39c0 <__addsf3+0x84>
    39b8:	e2711000 	rsbs	r1, r1, #0
    39bc:	e2e00000 	rsc	r0, r0, #0
    39c0:	e3500502 	cmp	r0, #8388608	; 0x800000
    39c4:	3a00000b 	bcc	39f8 <__addsf3+0xbc>
    39c8:	e3500401 	cmp	r0, #16777216	; 0x1000000
    39cc:	3a000004 	bcc	39e4 <__addsf3+0xa8>
    39d0:	e1b000a0 	lsrs	r0, r0, #1
    39d4:	e1a01061 	rrx	r1, r1
    39d8:	e2822001 	add	r2, r2, #1
    39dc:	e35200fe 	cmp	r2, #254	; 0xfe
    39e0:	2a000038 	bcs	3ac8 <__addsf3+0x18c>
    39e4:	e3510102 	cmp	r1, #-2147483648	; 0x80000000
    39e8:	e0a00b82 	adc	r0, r0, r2, lsl #23
    39ec:	03c00001 	biceq	r0, r0, #1
    39f0:	e1800003 	orr	r0, r0, r3
    39f4:	e12fff1e 	bx	lr
    39f8:	e1b01081 	lsls	r1, r1, #1
    39fc:	e0a00000 	adc	r0, r0, r0
    3a00:	e3100502 	tst	r0, #8388608	; 0x800000
    3a04:	e2422001 	sub	r2, r2, #1
    3a08:	1afffff5 	bne	39e4 <__addsf3+0xa8>
    3a0c:	e1b0c620 	lsrs	ip, r0, #12
    3a10:	01a00600 	lsleq	r0, r0, #12
    3a14:	0242200c 	subeq	r2, r2, #12
    3a18:	e31008ff 	tst	r0, #16711680	; 0xff0000
    3a1c:	01a00400 	lsleq	r0, r0, #8
    3a20:	02422008 	subeq	r2, r2, #8
    3a24:	e310060f 	tst	r0, #15728640	; 0xf00000
    3a28:	01a00200 	lsleq	r0, r0, #4
    3a2c:	02422004 	subeq	r2, r2, #4
    3a30:	e3100503 	tst	r0, #12582912	; 0xc00000
    3a34:	01a00100 	lsleq	r0, r0, #2
    3a38:	02422002 	subeq	r2, r2, #2
    3a3c:	e3500502 	cmp	r0, #8388608	; 0x800000
    3a40:	31a00080 	lslcc	r0, r0, #1
    3a44:	e2d22000 	sbcs	r2, r2, #0
    3a48:	a0800b82 	addge	r0, r0, r2, lsl #23
    3a4c:	b2622000 	rsblt	r2, r2, #0
    3a50:	a1800003 	orrge	r0, r0, r3
    3a54:	b1830230 	orrlt	r0, r3, r0, lsr r2
    3a58:	e12fff1e 	bx	lr
    3a5c:	e3320000 	teq	r2, #0
    3a60:	e2211502 	eor	r1, r1, #8388608	; 0x800000
    3a64:	02200502 	eoreq	r0, r0, #8388608	; 0x800000
    3a68:	02822001 	addeq	r2, r2, #1
    3a6c:	12433001 	subne	r3, r3, #1
    3a70:	eaffffca 	b	39a0 <__addsf3+0x64>
    3a74:	e1a03081 	lsl	r3, r1, #1
    3a78:	e1f0cc42 	mvns	ip, r2, asr #24
    3a7c:	11f0cc43 	mvnsne	ip, r3, asr #24
    3a80:	0a000013 	beq	3ad4 <__addsf3+0x198>
    3a84:	e1320003 	teq	r2, r3
    3a88:	0a000002 	beq	3a98 <__addsf3+0x15c>
    3a8c:	e3320000 	teq	r2, #0
    3a90:	01a00001 	moveq	r0, r1
    3a94:	e12fff1e 	bx	lr
    3a98:	e1300001 	teq	r0, r1
    3a9c:	13a00000 	movne	r0, #0
    3aa0:	112fff1e 	bxne	lr
    3aa4:	e31204ff 	tst	r2, #-16777216	; 0xff000000
    3aa8:	1a000002 	bne	3ab8 <__addsf3+0x17c>
    3aac:	e1b00080 	lsls	r0, r0, #1
    3ab0:	23800102 	orrcs	r0, r0, #-2147483648	; 0x80000000
    3ab4:	e12fff1e 	bx	lr
    3ab8:	e2922402 	adds	r2, r2, #33554432	; 0x2000000
    3abc:	32800502 	addcc	r0, r0, #8388608	; 0x800000
    3ac0:	312fff1e 	bxcc	lr
    3ac4:	e2003102 	and	r3, r0, #-2147483648	; 0x80000000
    3ac8:	e383047f 	orr	r0, r3, #2130706432	; 0x7f000000
    3acc:	e3800502 	orr	r0, r0, #8388608	; 0x800000
    3ad0:	e12fff1e 	bx	lr
    3ad4:	e1f02c42 	mvns	r2, r2, asr #24
    3ad8:	11a00001 	movne	r0, r1
    3adc:	01f03c43 	mvnseq	r3, r3, asr #24
    3ae0:	11a01000 	movne	r1, r0
    3ae4:	e1b02480 	lsls	r2, r0, #9
    3ae8:	01b03481 	lslseq	r3, r1, #9
    3aec:	01300001 	teqeq	r0, r1
    3af0:	13800501 	orrne	r0, r0, #4194304	; 0x400000
    3af4:	e12fff1e 	bx	lr

00003af8 <__aeabi_ui2f>:
    3af8:	e3a03000 	mov	r3, #0
    3afc:	ea000001 	b	3b08 <__aeabi_i2f+0x8>

00003b00 <__aeabi_i2f>:
    3b00:	e2103102 	ands	r3, r0, #-2147483648	; 0x80000000
    3b04:	42600000 	rsbmi	r0, r0, #0
    3b08:	e1b0c000 	movs	ip, r0
    3b0c:	012fff1e 	bxeq	lr
    3b10:	e383344b 	orr	r3, r3, #1258291200	; 0x4b000000
    3b14:	e1a01000 	mov	r1, r0
    3b18:	e3a00000 	mov	r0, #0
    3b1c:	ea00000f 	b	3b60 <__aeabi_l2f+0x30>

00003b20 <__aeabi_ul2f>:
    3b20:	e1902001 	orrs	r2, r0, r1
    3b24:	012fff1e 	bxeq	lr
    3b28:	e3a03000 	mov	r3, #0
    3b2c:	ea000005 	b	3b48 <__aeabi_l2f+0x18>

00003b30 <__aeabi_l2f>:
    3b30:	e1902001 	orrs	r2, r0, r1
    3b34:	012fff1e 	bxeq	lr
    3b38:	e2113102 	ands	r3, r1, #-2147483648	; 0x80000000
    3b3c:	5a000001 	bpl	3b48 <__aeabi_l2f+0x18>
    3b40:	e2700000 	rsbs	r0, r0, #0
    3b44:	e2e11000 	rsc	r1, r1, #0
    3b48:	e1b0c001 	movs	ip, r1
    3b4c:	01a0c000 	moveq	ip, r0
    3b50:	01a01000 	moveq	r1, r0
    3b54:	03a00000 	moveq	r0, #0
    3b58:	e383345b 	orr	r3, r3, #1526726656	; 0x5b000000
    3b5c:	02433201 	subeq	r3, r3, #268435456	; 0x10000000
    3b60:	e2433502 	sub	r3, r3, #8388608	; 0x800000
    3b64:	e3a02017 	mov	r2, #23
    3b68:	e35c0801 	cmp	ip, #65536	; 0x10000
    3b6c:	21a0c82c 	lsrcs	ip, ip, #16
    3b70:	22422010 	subcs	r2, r2, #16
    3b74:	e35c0c01 	cmp	ip, #256	; 0x100
    3b78:	21a0c42c 	lsrcs	ip, ip, #8
    3b7c:	22422008 	subcs	r2, r2, #8
    3b80:	e35c0010 	cmp	ip, #16
    3b84:	21a0c22c 	lsrcs	ip, ip, #4
    3b88:	22422004 	subcs	r2, r2, #4
    3b8c:	e35c0004 	cmp	ip, #4
    3b90:	22422002 	subcs	r2, r2, #2
    3b94:	304220ac 	subcc	r2, r2, ip, lsr #1
    3b98:	e05221ac 	subs	r2, r2, ip, lsr #3
    3b9c:	e0433b82 	sub	r3, r3, r2, lsl #23
    3ba0:	ba000006 	blt	3bc0 <__aeabi_l2f+0x90>
    3ba4:	e0833211 	add	r3, r3, r1, lsl r2
    3ba8:	e1a0c210 	lsl	ip, r0, r2
    3bac:	e2622020 	rsb	r2, r2, #32
    3bb0:	e35c0102 	cmp	ip, #-2147483648	; 0x80000000
    3bb4:	e0a30230 	adc	r0, r3, r0, lsr r2
    3bb8:	03c00001 	biceq	r0, r0, #1
    3bbc:	e12fff1e 	bx	lr
    3bc0:	e2822020 	add	r2, r2, #32
    3bc4:	e1a0c211 	lsl	ip, r1, r2
    3bc8:	e2622020 	rsb	r2, r2, #32
    3bcc:	e190008c 	orrs	r0, r0, ip, lsl #1
    3bd0:	e0a30231 	adc	r0, r3, r1, lsr r2
    3bd4:	01c00fac 	biceq	r0, r0, ip, lsr #31
    3bd8:	e12fff1e 	bx	lr

00003bdc <__aeabi_fmul>:
    3bdc:	e3a0c0ff 	mov	ip, #255	; 0xff
    3be0:	e01c2ba0 	ands	r2, ip, r0, lsr #23
    3be4:	101c3ba1 	andsne	r3, ip, r1, lsr #23
    3be8:	1132000c 	teqne	r2, ip
    3bec:	1133000c 	teqne	r3, ip
    3bf0:	0a00003e 	beq	3cf0 <__aeabi_fmul+0x114>
    3bf4:	e0822003 	add	r2, r2, r3
    3bf8:	e020c001 	eor	ip, r0, r1
    3bfc:	e1b00480 	lsls	r0, r0, #9
    3c00:	11b01481 	lslsne	r1, r1, #9
    3c04:	0a000010 	beq	3c4c <__aeabi_fmul+0x70>
    3c08:	e3a03302 	mov	r3, #134217728	; 0x8000000
    3c0c:	e18302a0 	orr	r0, r3, r0, lsr #5
    3c10:	e18312a1 	orr	r1, r3, r1, lsr #5
    3c14:	e0813190 	umull	r3, r1, r0, r1
    3c18:	e20c0102 	and	r0, ip, #-2147483648	; 0x80000000
    3c1c:	e3510502 	cmp	r1, #8388608	; 0x800000
    3c20:	31a01081 	lslcc	r1, r1, #1
    3c24:	31811fa3 	orrcc	r1, r1, r3, lsr #31
    3c28:	31a03083 	lslcc	r3, r3, #1
    3c2c:	e1800001 	orr	r0, r0, r1
    3c30:	e2c2207f 	sbc	r2, r2, #127	; 0x7f
    3c34:	e35200fd 	cmp	r2, #253	; 0xfd
    3c38:	8a00000f 	bhi	3c7c <__aeabi_fmul+0xa0>
    3c3c:	e3530102 	cmp	r3, #-2147483648	; 0x80000000
    3c40:	e0a00b82 	adc	r0, r0, r2, lsl #23
    3c44:	03c00001 	biceq	r0, r0, #1
    3c48:	e12fff1e 	bx	lr
    3c4c:	e3300000 	teq	r0, #0
    3c50:	e20cc102 	and	ip, ip, #-2147483648	; 0x80000000
    3c54:	01a01481 	lsleq	r1, r1, #9
    3c58:	e18c04a0 	orr	r0, ip, r0, lsr #9
    3c5c:	e18004a1 	orr	r0, r0, r1, lsr #9
    3c60:	e252207f 	subs	r2, r2, #127	; 0x7f
    3c64:	c27230ff 	rsbsgt	r3, r2, #255	; 0xff
    3c68:	c1800b82 	orrgt	r0, r0, r2, lsl #23
    3c6c:	c12fff1e 	bxgt	lr
    3c70:	e3800502 	orr	r0, r0, #8388608	; 0x800000
    3c74:	e3a03000 	mov	r3, #0
    3c78:	e2522001 	subs	r2, r2, #1
    3c7c:	ca000035 	bgt	3d58 <__aeabi_fmul+0x17c>
    3c80:	e3720019 	cmn	r2, #25
    3c84:	d2000102 	andle	r0, r0, #-2147483648	; 0x80000000
    3c88:	d12fff1e 	bxle	lr
    3c8c:	e2622000 	rsb	r2, r2, #0
    3c90:	e1b01080 	lsls	r1, r0, #1
    3c94:	e1a01231 	lsr	r1, r1, r2
    3c98:	e2622020 	rsb	r2, r2, #32
    3c9c:	e1a0c210 	lsl	ip, r0, r2
    3ca0:	e1b00061 	rrxs	r0, r1
    3ca4:	e2a00000 	adc	r0, r0, #0
    3ca8:	e193308c 	orrs	r3, r3, ip, lsl #1
    3cac:	01c00fac 	biceq	r0, r0, ip, lsr #31
    3cb0:	e12fff1e 	bx	lr
    3cb4:	e3320000 	teq	r2, #0
    3cb8:	e200c102 	and	ip, r0, #-2147483648	; 0x80000000
    3cbc:	01a00080 	lsleq	r0, r0, #1
    3cc0:	03100502 	tsteq	r0, #8388608	; 0x800000
    3cc4:	02422001 	subeq	r2, r2, #1
    3cc8:	0afffffb 	beq	3cbc <__aeabi_fmul+0xe0>
    3ccc:	e180000c 	orr	r0, r0, ip
    3cd0:	e3330000 	teq	r3, #0
    3cd4:	e201c102 	and	ip, r1, #-2147483648	; 0x80000000
    3cd8:	01a01081 	lsleq	r1, r1, #1
    3cdc:	03110502 	tsteq	r1, #8388608	; 0x800000
    3ce0:	02433001 	subeq	r3, r3, #1
    3ce4:	0afffffb 	beq	3cd8 <__aeabi_fmul+0xfc>
    3ce8:	e181100c 	orr	r1, r1, ip
    3cec:	eaffffc0 	b	3bf4 <__aeabi_fmul+0x18>
    3cf0:	e00c3ba1 	and	r3, ip, r1, lsr #23
    3cf4:	e132000c 	teq	r2, ip
    3cf8:	1133000c 	teqne	r3, ip
    3cfc:	0a000005 	beq	3d18 <__aeabi_fmul+0x13c>
    3d00:	e3d0c102 	bics	ip, r0, #-2147483648	; 0x80000000
    3d04:	13d1c102 	bicsne	ip, r1, #-2147483648	; 0x80000000
    3d08:	1affffe9 	bne	3cb4 <__aeabi_fmul+0xd8>
    3d0c:	e0200001 	eor	r0, r0, r1
    3d10:	e2000102 	and	r0, r0, #-2147483648	; 0x80000000
    3d14:	e12fff1e 	bx	lr
    3d18:	e3300000 	teq	r0, #0
    3d1c:	13300102 	teqne	r0, #-2147483648	; 0x80000000
    3d20:	01a00001 	moveq	r0, r1
    3d24:	13310000 	teqne	r1, #0
    3d28:	13310102 	teqne	r1, #-2147483648	; 0x80000000
    3d2c:	0a00000d 	beq	3d68 <__aeabi_fmul+0x18c>
    3d30:	e132000c 	teq	r2, ip
    3d34:	1a000001 	bne	3d40 <__aeabi_fmul+0x164>
    3d38:	e1b02480 	lsls	r2, r0, #9
    3d3c:	1a000009 	bne	3d68 <__aeabi_fmul+0x18c>
    3d40:	e133000c 	teq	r3, ip
    3d44:	1a000002 	bne	3d54 <__aeabi_fmul+0x178>
    3d48:	e1b03481 	lsls	r3, r1, #9
    3d4c:	11a00001 	movne	r0, r1
    3d50:	1a000004 	bne	3d68 <__aeabi_fmul+0x18c>
    3d54:	e0200001 	eor	r0, r0, r1
    3d58:	e2000102 	and	r0, r0, #-2147483648	; 0x80000000
    3d5c:	e380047f 	orr	r0, r0, #2130706432	; 0x7f000000
    3d60:	e3800502 	orr	r0, r0, #8388608	; 0x800000
    3d64:	e12fff1e 	bx	lr
    3d68:	e380047f 	orr	r0, r0, #2130706432	; 0x7f000000
    3d6c:	e3800503 	orr	r0, r0, #12582912	; 0xc00000
    3d70:	e12fff1e 	bx	lr

00003d74 <__aeabi_fdiv>:
    3d74:	e3a0c0ff 	mov	ip, #255	; 0xff
    3d78:	e01c2ba0 	ands	r2, ip, r0, lsr #23
    3d7c:	101c3ba1 	andsne	r3, ip, r1, lsr #23
    3d80:	1132000c 	teqne	r2, ip
    3d84:	1133000c 	teqne	r3, ip
    3d88:	0a00003a 	beq	3e78 <__aeabi_fdiv+0x104>
    3d8c:	e0422003 	sub	r2, r2, r3
    3d90:	e020c001 	eor	ip, r0, r1
    3d94:	e1b01481 	lsls	r1, r1, #9
    3d98:	e1a00480 	lsl	r0, r0, #9
    3d9c:	0a00001c 	beq	3e14 <__aeabi_fdiv+0xa0>
    3da0:	e3a03201 	mov	r3, #268435456	; 0x10000000
    3da4:	e1831221 	orr	r1, r3, r1, lsr #4
    3da8:	e1833220 	orr	r3, r3, r0, lsr #4
    3dac:	e20c0102 	and	r0, ip, #-2147483648	; 0x80000000
    3db0:	e1530001 	cmp	r3, r1
    3db4:	31a03083 	lslcc	r3, r3, #1
    3db8:	e2a2207d 	adc	r2, r2, #125	; 0x7d
    3dbc:	e3a0c502 	mov	ip, #8388608	; 0x800000
    3dc0:	e1530001 	cmp	r3, r1
    3dc4:	20433001 	subcs	r3, r3, r1
    3dc8:	2180000c 	orrcs	r0, r0, ip
    3dcc:	e15300a1 	cmp	r3, r1, lsr #1
    3dd0:	204330a1 	subcs	r3, r3, r1, lsr #1
    3dd4:	218000ac 	orrcs	r0, r0, ip, lsr #1
    3dd8:	e1530121 	cmp	r3, r1, lsr #2
    3ddc:	20433121 	subcs	r3, r3, r1, lsr #2
    3de0:	2180012c 	orrcs	r0, r0, ip, lsr #2
    3de4:	e15301a1 	cmp	r3, r1, lsr #3
    3de8:	204331a1 	subcs	r3, r3, r1, lsr #3
    3dec:	218001ac 	orrcs	r0, r0, ip, lsr #3
    3df0:	e1b03203 	lsls	r3, r3, #4
    3df4:	11b0c22c 	lsrsne	ip, ip, #4
    3df8:	1afffff0 	bne	3dc0 <__aeabi_fdiv+0x4c>
    3dfc:	e35200fd 	cmp	r2, #253	; 0xfd
    3e00:	8affff9d 	bhi	3c7c <__aeabi_fmul+0xa0>
    3e04:	e1530001 	cmp	r3, r1
    3e08:	e0a00b82 	adc	r0, r0, r2, lsl #23
    3e0c:	03c00001 	biceq	r0, r0, #1
    3e10:	e12fff1e 	bx	lr
    3e14:	e20cc102 	and	ip, ip, #-2147483648	; 0x80000000
    3e18:	e18c04a0 	orr	r0, ip, r0, lsr #9
    3e1c:	e292207f 	adds	r2, r2, #127	; 0x7f
    3e20:	c27230ff 	rsbsgt	r3, r2, #255	; 0xff
    3e24:	c1800b82 	orrgt	r0, r0, r2, lsl #23
    3e28:	c12fff1e 	bxgt	lr
    3e2c:	e3800502 	orr	r0, r0, #8388608	; 0x800000
    3e30:	e3a03000 	mov	r3, #0
    3e34:	e2522001 	subs	r2, r2, #1
    3e38:	eaffff8f 	b	3c7c <__aeabi_fmul+0xa0>
    3e3c:	e3320000 	teq	r2, #0
    3e40:	e200c102 	and	ip, r0, #-2147483648	; 0x80000000
    3e44:	01a00080 	lsleq	r0, r0, #1
    3e48:	03100502 	tsteq	r0, #8388608	; 0x800000
    3e4c:	02422001 	subeq	r2, r2, #1
    3e50:	0afffffb 	beq	3e44 <__aeabi_fdiv+0xd0>
    3e54:	e180000c 	orr	r0, r0, ip
    3e58:	e3330000 	teq	r3, #0
    3e5c:	e201c102 	and	ip, r1, #-2147483648	; 0x80000000
    3e60:	01a01081 	lsleq	r1, r1, #1
    3e64:	03110502 	tsteq	r1, #8388608	; 0x800000
    3e68:	02433001 	subeq	r3, r3, #1
    3e6c:	0afffffb 	beq	3e60 <__aeabi_fdiv+0xec>
    3e70:	e181100c 	orr	r1, r1, ip
    3e74:	eaffffc4 	b	3d8c <__aeabi_fdiv+0x18>
    3e78:	e00c3ba1 	and	r3, ip, r1, lsr #23
    3e7c:	e132000c 	teq	r2, ip
    3e80:	1a000005 	bne	3e9c <__aeabi_fdiv+0x128>
    3e84:	e1b02480 	lsls	r2, r0, #9
    3e88:	1affffb6 	bne	3d68 <__aeabi_fmul+0x18c>
    3e8c:	e133000c 	teq	r3, ip
    3e90:	1affffaf 	bne	3d54 <__aeabi_fmul+0x178>
    3e94:	e1a00001 	mov	r0, r1
    3e98:	eaffffb2 	b	3d68 <__aeabi_fmul+0x18c>
    3e9c:	e133000c 	teq	r3, ip
    3ea0:	1a000003 	bne	3eb4 <__aeabi_fdiv+0x140>
    3ea4:	e1b03481 	lsls	r3, r1, #9
    3ea8:	0affff97 	beq	3d0c <__aeabi_fmul+0x130>
    3eac:	e1a00001 	mov	r0, r1
    3eb0:	eaffffac 	b	3d68 <__aeabi_fmul+0x18c>
    3eb4:	e3d0c102 	bics	ip, r0, #-2147483648	; 0x80000000
    3eb8:	13d1c102 	bicsne	ip, r1, #-2147483648	; 0x80000000
    3ebc:	1affffde 	bne	3e3c <__aeabi_fdiv+0xc8>
    3ec0:	e3d02102 	bics	r2, r0, #-2147483648	; 0x80000000
    3ec4:	1affffa2 	bne	3d54 <__aeabi_fmul+0x178>
    3ec8:	e3d13102 	bics	r3, r1, #-2147483648	; 0x80000000
    3ecc:	1affff8e 	bne	3d0c <__aeabi_fmul+0x130>
    3ed0:	eaffffa4 	b	3d68 <__aeabi_fmul+0x18c>

00003ed4 <__gesf2>:
    3ed4:	e3e0c000 	mvn	ip, #0
    3ed8:	ea000002 	b	3ee8 <__cmpsf2+0x4>

00003edc <__lesf2>:
    3edc:	e3a0c001 	mov	ip, #1
    3ee0:	ea000000 	b	3ee8 <__cmpsf2+0x4>

00003ee4 <__cmpsf2>:
    3ee4:	e3a0c001 	mov	ip, #1
    3ee8:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
    3eec:	e1a02080 	lsl	r2, r0, #1
    3ef0:	e1a03081 	lsl	r3, r1, #1
    3ef4:	e1f0cc42 	mvns	ip, r2, asr #24
    3ef8:	11f0cc43 	mvnsne	ip, r3, asr #24
    3efc:	0a000007 	beq	3f20 <__cmpsf2+0x3c>
    3f00:	e28dd004 	add	sp, sp, #4
    3f04:	e192c0a3 	orrs	ip, r2, r3, lsr #1
    3f08:	11300001 	teqne	r0, r1
    3f0c:	50520003 	subspl	r0, r2, r3
    3f10:	81a00fc1 	asrhi	r0, r1, #31
    3f14:	31e00fc1 	mvncc	r0, r1, asr #31
    3f18:	13800001 	orrne	r0, r0, #1
    3f1c:	e12fff1e 	bx	lr
    3f20:	e1f0cc42 	mvns	ip, r2, asr #24
    3f24:	1a000001 	bne	3f30 <__cmpsf2+0x4c>
    3f28:	e1b0c480 	lsls	ip, r0, #9
    3f2c:	1a000003 	bne	3f40 <__cmpsf2+0x5c>
    3f30:	e1f0cc43 	mvns	ip, r3, asr #24
    3f34:	1afffff1 	bne	3f00 <__cmpsf2+0x1c>
    3f38:	e1b0c481 	lsls	ip, r1, #9
    3f3c:	0affffef 	beq	3f00 <__cmpsf2+0x1c>
    3f40:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
    3f44:	e12fff1e 	bx	lr

00003f48 <__aeabi_cfrcmple>:
    3f48:	e1a0c000 	mov	ip, r0
    3f4c:	e1a00001 	mov	r0, r1
    3f50:	e1a0100c 	mov	r1, ip
    3f54:	eaffffff 	b	3f58 <__aeabi_cfcmpeq>

00003f58 <__aeabi_cfcmpeq>:
    3f58:	e92d400f 	push	{r0, r1, r2, r3, lr}
    3f5c:	ebffffe0 	bl	3ee4 <__cmpsf2>
    3f60:	e3500000 	cmp	r0, #0
    3f64:	43700000 	cmnmi	r0, #0
    3f68:	e8bd400f 	pop	{r0, r1, r2, r3, lr}
    3f6c:	e12fff1e 	bx	lr

00003f70 <__aeabi_fcmpeq>:
    3f70:	e52de008 	str	lr, [sp, #-8]!
    3f74:	ebfffff7 	bl	3f58 <__aeabi_cfcmpeq>
    3f78:	03a00001 	moveq	r0, #1
    3f7c:	13a00000 	movne	r0, #0
    3f80:	e49de008 	ldr	lr, [sp], #8
    3f84:	e12fff1e 	bx	lr

00003f88 <__aeabi_fcmplt>:
    3f88:	e52de008 	str	lr, [sp, #-8]!
    3f8c:	ebfffff1 	bl	3f58 <__aeabi_cfcmpeq>
    3f90:	33a00001 	movcc	r0, #1
    3f94:	23a00000 	movcs	r0, #0
    3f98:	e49de008 	ldr	lr, [sp], #8
    3f9c:	e12fff1e 	bx	lr

00003fa0 <__aeabi_fcmple>:
    3fa0:	e52de008 	str	lr, [sp, #-8]!
    3fa4:	ebffffeb 	bl	3f58 <__aeabi_cfcmpeq>
    3fa8:	93a00001 	movls	r0, #1
    3fac:	83a00000 	movhi	r0, #0
    3fb0:	e49de008 	ldr	lr, [sp], #8
    3fb4:	e12fff1e 	bx	lr

00003fb8 <__aeabi_fcmpge>:
    3fb8:	e52de008 	str	lr, [sp, #-8]!
    3fbc:	ebffffe1 	bl	3f48 <__aeabi_cfrcmple>
    3fc0:	93a00001 	movls	r0, #1
    3fc4:	83a00000 	movhi	r0, #0
    3fc8:	e49de008 	ldr	lr, [sp], #8
    3fcc:	e12fff1e 	bx	lr

00003fd0 <__aeabi_fcmpgt>:
    3fd0:	e52de008 	str	lr, [sp, #-8]!
    3fd4:	ebffffdb 	bl	3f48 <__aeabi_cfrcmple>
    3fd8:	33a00001 	movcc	r0, #1
    3fdc:	23a00000 	movcs	r0, #0
    3fe0:	e49de008 	ldr	lr, [sp], #8
    3fe4:	e12fff1e 	bx	lr

00003fe8 <__aeabi_f2uiz>:
    3fe8:	e1b02080 	lsls	r2, r0, #1
    3fec:	2a000008 	bcs	4014 <__aeabi_f2uiz+0x2c>
    3ff0:	e352047f 	cmp	r2, #2130706432	; 0x7f000000
    3ff4:	3a000006 	bcc	4014 <__aeabi_f2uiz+0x2c>
    3ff8:	e3a0309e 	mov	r3, #158	; 0x9e
    3ffc:	e0532c22 	subs	r2, r3, r2, lsr #24
    4000:	4a000005 	bmi	401c <__aeabi_f2uiz+0x34>
    4004:	e1a03400 	lsl	r3, r0, #8
    4008:	e3833102 	orr	r3, r3, #-2147483648	; 0x80000000
    400c:	e1a00233 	lsr	r0, r3, r2
    4010:	e12fff1e 	bx	lr
    4014:	e3a00000 	mov	r0, #0
    4018:	e12fff1e 	bx	lr
    401c:	e3720061 	cmn	r2, #97	; 0x61
    4020:	1a000001 	bne	402c <__aeabi_f2uiz+0x44>
    4024:	e1b02480 	lsls	r2, r0, #9
    4028:	1a000001 	bne	4034 <__aeabi_f2uiz+0x4c>
    402c:	e3e00000 	mvn	r0, #0
    4030:	e12fff1e 	bx	lr
    4034:	e3a00000 	mov	r0, #0
    4038:	e12fff1e 	bx	lr

0000403c <memcpy>:
    403c:	e3520003 	cmp	r2, #3
    4040:	e92d00f0 	push	{r4, r5, r6, r7}
    4044:	8a000009 	bhi	4070 <memcpy+0x34>
    4048:	e3520000 	cmp	r2, #0
    404c:	0a000005 	beq	4068 <memcpy+0x2c>
    4050:	e3a03000 	mov	r3, #0
    4054:	e7d1c003 	ldrb	ip, [r1, r3]
    4058:	e7c0c003 	strb	ip, [r0, r3]
    405c:	e2833001 	add	r3, r3, #1
    4060:	e1530002 	cmp	r3, r2
    4064:	1afffffa 	bne	4054 <memcpy+0x18>
    4068:	e8bd00f0 	pop	{r4, r5, r6, r7}
    406c:	e12fff1e 	bx	lr
    4070:	e3100003 	tst	r0, #3
    4074:	e1a03000 	mov	r3, r0
    4078:	e0802002 	add	r2, r0, r2
    407c:	0a000003 	beq	4090 <memcpy+0x54>
    4080:	e4d1c001 	ldrb	ip, [r1], #1
    4084:	e4c3c001 	strb	ip, [r3], #1
    4088:	e3130003 	tst	r3, #3
    408c:	1afffffb 	bne	4080 <memcpy+0x44>
    4090:	e2114003 	ands	r4, r1, #3
    4094:	e063c002 	rsb	ip, r3, r2
    4098:	1a000036 	bne	4178 <memcpy+0x13c>
    409c:	e35c003f 	cmp	ip, #63	; 0x3f
    40a0:	da000024 	ble	4138 <memcpy+0xfc>
    40a4:	e591c000 	ldr	ip, [r1]
    40a8:	e583c000 	str	ip, [r3]
    40ac:	e591c004 	ldr	ip, [r1, #4]
    40b0:	e583c004 	str	ip, [r3, #4]
    40b4:	e591c008 	ldr	ip, [r1, #8]
    40b8:	e583c008 	str	ip, [r3, #8]
    40bc:	e591c00c 	ldr	ip, [r1, #12]
    40c0:	e583c00c 	str	ip, [r3, #12]
    40c4:	e591c010 	ldr	ip, [r1, #16]
    40c8:	e583c010 	str	ip, [r3, #16]
    40cc:	e591c014 	ldr	ip, [r1, #20]
    40d0:	e583c014 	str	ip, [r3, #20]
    40d4:	e591c018 	ldr	ip, [r1, #24]
    40d8:	e583c018 	str	ip, [r3, #24]
    40dc:	e591c01c 	ldr	ip, [r1, #28]
    40e0:	e583c01c 	str	ip, [r3, #28]
    40e4:	e591c020 	ldr	ip, [r1, #32]
    40e8:	e583c020 	str	ip, [r3, #32]
    40ec:	e591c024 	ldr	ip, [r1, #36]	; 0x24
    40f0:	e583c024 	str	ip, [r3, #36]	; 0x24
    40f4:	e591c028 	ldr	ip, [r1, #40]	; 0x28
    40f8:	e583c028 	str	ip, [r3, #40]	; 0x28
    40fc:	e591c02c 	ldr	ip, [r1, #44]	; 0x2c
    4100:	e583c02c 	str	ip, [r3, #44]	; 0x2c
    4104:	e591c030 	ldr	ip, [r1, #48]	; 0x30
    4108:	e583c030 	str	ip, [r3, #48]	; 0x30
    410c:	e591c034 	ldr	ip, [r1, #52]	; 0x34
    4110:	e583c034 	str	ip, [r3, #52]	; 0x34
    4114:	e591c038 	ldr	ip, [r1, #56]	; 0x38
    4118:	e583c038 	str	ip, [r3, #56]	; 0x38
    411c:	e591c03c 	ldr	ip, [r1, #60]	; 0x3c
    4120:	e583c03c 	str	ip, [r3, #60]	; 0x3c
    4124:	e2833040 	add	r3, r3, #64	; 0x40
    4128:	e063c002 	rsb	ip, r3, r2
    412c:	e35c003f 	cmp	ip, #63	; 0x3f
    4130:	e2811040 	add	r1, r1, #64	; 0x40
    4134:	caffffda 	bgt	40a4 <memcpy+0x68>
    4138:	e35c000f 	cmp	ip, #15
    413c:	da000028 	ble	41e4 <memcpy+0x1a8>
    4140:	e591c000 	ldr	ip, [r1]
    4144:	e583c000 	str	ip, [r3]
    4148:	e591c004 	ldr	ip, [r1, #4]
    414c:	e583c004 	str	ip, [r3, #4]
    4150:	e591c008 	ldr	ip, [r1, #8]
    4154:	e583c008 	str	ip, [r3, #8]
    4158:	e591c00c 	ldr	ip, [r1, #12]
    415c:	e583c00c 	str	ip, [r3, #12]
    4160:	e2833010 	add	r3, r3, #16
    4164:	e063c002 	rsb	ip, r3, r2
    4168:	e35c000f 	cmp	ip, #15
    416c:	e2811010 	add	r1, r1, #16
    4170:	cafffff2 	bgt	4140 <memcpy+0x104>
    4174:	ea00001a 	b	41e4 <memcpy+0x1a8>
    4178:	e2645000 	rsb	r5, r4, #0
    417c:	e35c0003 	cmp	ip, #3
    4180:	e7916005 	ldr	r6, [r1, r5]
    4184:	da00000a 	ble	41b4 <memcpy+0x178>
    4188:	e2647004 	rsb	r7, r4, #4
    418c:	e1a07187 	lsl	r7, r7, #3
    4190:	e1a04184 	lsl	r4, r4, #3
    4194:	e1a0c436 	lsr	ip, r6, r4
    4198:	e2811004 	add	r1, r1, #4
    419c:	e7916005 	ldr	r6, [r1, r5]
    41a0:	e18cc716 	orr	ip, ip, r6, lsl r7
    41a4:	e483c004 	str	ip, [r3], #4
    41a8:	e063c002 	rsb	ip, r3, r2
    41ac:	e35c0003 	cmp	ip, #3
    41b0:	cafffff7 	bgt	4194 <memcpy+0x158>
    41b4:	e1520003 	cmp	r2, r3
    41b8:	83a02000 	movhi	r2, #0
    41bc:	9affffa9 	bls	4068 <memcpy+0x2c>
    41c0:	e7d14002 	ldrb	r4, [r1, r2]
    41c4:	e7c34002 	strb	r4, [r3, r2]
    41c8:	e2822001 	add	r2, r2, #1
    41cc:	e152000c 	cmp	r2, ip
    41d0:	1afffffa 	bne	41c0 <memcpy+0x184>
    41d4:	eaffffa3 	b	4068 <memcpy+0x2c>
    41d8:	e491c004 	ldr	ip, [r1], #4
    41dc:	e483c004 	str	ip, [r3], #4
    41e0:	e063c002 	rsb	ip, r3, r2
    41e4:	e35c0003 	cmp	ip, #3
    41e8:	cafffffa 	bgt	41d8 <memcpy+0x19c>
    41ec:	eafffff0 	b	41b4 <memcpy+0x178>

000041f0 <cleanup_glue>:
    41f0:	e92d4038 	push	{r3, r4, r5, lr}
    41f4:	e1a04001 	mov	r4, r1
    41f8:	e5911000 	ldr	r1, [r1]
    41fc:	e3510000 	cmp	r1, #0
    4200:	e1a05000 	mov	r5, r0
    4204:	1bfffff9 	blne	41f0 <cleanup_glue>
    4208:	e1a00005 	mov	r0, r5
    420c:	e1a01004 	mov	r1, r4
    4210:	eb00009f 	bl	4494 <_free_r>
    4214:	e8bd4038 	pop	{r3, r4, r5, lr}
    4218:	e12fff1e 	bx	lr

0000421c <_reclaim_reent>:
    421c:	e59f30fc 	ldr	r3, [pc, #252]	; 4320 <_reclaim_reent+0x104>
    4220:	e5933000 	ldr	r3, [r3]
    4224:	e1500003 	cmp	r0, r3
    4228:	e92d4070 	push	{r4, r5, r6, lr}
    422c:	e1a05000 	mov	r5, r0
    4230:	0a00002e 	beq	42f0 <_reclaim_reent+0xd4>
    4234:	e590304c 	ldr	r3, [r0, #76]	; 0x4c
    4238:	e3530000 	cmp	r3, #0
    423c:	0a000013 	beq	4290 <_reclaim_reent+0x74>
    4240:	e3a02000 	mov	r2, #0
    4244:	e1a06002 	mov	r6, r2
    4248:	e7931102 	ldr	r1, [r3, r2, lsl #2]
    424c:	e3510000 	cmp	r1, #0
    4250:	1a000001 	bne	425c <_reclaim_reent+0x40>
    4254:	ea000006 	b	4274 <_reclaim_reent+0x58>
    4258:	e1a01004 	mov	r1, r4
    425c:	e5914000 	ldr	r4, [r1]
    4260:	e1a00005 	mov	r0, r5
    4264:	eb00008a 	bl	4494 <_free_r>
    4268:	e3540000 	cmp	r4, #0
    426c:	1afffff9 	bne	4258 <_reclaim_reent+0x3c>
    4270:	e595304c 	ldr	r3, [r5, #76]	; 0x4c
    4274:	e2866001 	add	r6, r6, #1
    4278:	e3560020 	cmp	r6, #32
    427c:	e1a02006 	mov	r2, r6
    4280:	1afffff0 	bne	4248 <_reclaim_reent+0x2c>
    4284:	e1a00005 	mov	r0, r5
    4288:	e1a01003 	mov	r1, r3
    428c:	eb000080 	bl	4494 <_free_r>
    4290:	e5951040 	ldr	r1, [r5, #64]	; 0x40
    4294:	e3510000 	cmp	r1, #0
    4298:	11a00005 	movne	r0, r5
    429c:	1b00007c 	blne	4494 <_free_r>
    42a0:	e5951148 	ldr	r1, [r5, #328]	; 0x148
    42a4:	e3510000 	cmp	r1, #0
    42a8:	0a000009 	beq	42d4 <_reclaim_reent+0xb8>
    42ac:	e2856f53 	add	r6, r5, #332	; 0x14c
    42b0:	e1510006 	cmp	r1, r6
    42b4:	1a000001 	bne	42c0 <_reclaim_reent+0xa4>
    42b8:	ea000005 	b	42d4 <_reclaim_reent+0xb8>
    42bc:	e1a01004 	mov	r1, r4
    42c0:	e5914000 	ldr	r4, [r1]
    42c4:	e1a00005 	mov	r0, r5
    42c8:	eb000071 	bl	4494 <_free_r>
    42cc:	e1560004 	cmp	r6, r4
    42d0:	1afffff9 	bne	42bc <_reclaim_reent+0xa0>
    42d4:	e5951054 	ldr	r1, [r5, #84]	; 0x54
    42d8:	e3510000 	cmp	r1, #0
    42dc:	11a00005 	movne	r0, r5
    42e0:	1b00006b 	blne	4494 <_free_r>
    42e4:	e5953038 	ldr	r3, [r5, #56]	; 0x38
    42e8:	e3530000 	cmp	r3, #0
    42ec:	1a000001 	bne	42f8 <_reclaim_reent+0xdc>
    42f0:	e8bd4070 	pop	{r4, r5, r6, lr}
    42f4:	e12fff1e 	bx	lr
    42f8:	e1a00005 	mov	r0, r5
    42fc:	e595c03c 	ldr	ip, [r5, #60]	; 0x3c
    4300:	e1a0e00f 	mov	lr, pc
    4304:	e12fff1c 	bx	ip
    4308:	e59512e0 	ldr	r1, [r5, #736]	; 0x2e0
    430c:	e3510000 	cmp	r1, #0
    4310:	0afffff6 	beq	42f0 <_reclaim_reent+0xd4>
    4314:	e1a00005 	mov	r0, r5
    4318:	e8bd4070 	pop	{r4, r5, r6, lr}
    431c:	eaffffb3 	b	41f0 <cleanup_glue>
    4320:	40000008 	.word	0x40000008

00004324 <_wrapup_reent>:
    4324:	e92d40f8 	push	{r3, r4, r5, r6, r7, lr}
    4328:	e2507000 	subs	r7, r0, #0
    432c:	059f3060 	ldreq	r3, [pc, #96]	; 4394 <_wrapup_reent+0x70>
    4330:	05937000 	ldreq	r7, [r3]
    4334:	e5976148 	ldr	r6, [r7, #328]	; 0x148
    4338:	e3560000 	cmp	r6, #0
    433c:	0a00000d 	beq	4378 <_wrapup_reent+0x54>
    4340:	e5965004 	ldr	r5, [r6, #4]
    4344:	e2554001 	subs	r4, r5, #1
    4348:	4a000007 	bmi	436c <_wrapup_reent+0x48>
    434c:	e2855002 	add	r5, r5, #2
    4350:	e0865105 	add	r5, r6, r5, lsl #2
    4354:	e5353004 	ldr	r3, [r5, #-4]!
    4358:	e2444001 	sub	r4, r4, #1
    435c:	e1a0e00f 	mov	lr, pc
    4360:	e12fff13 	bx	r3
    4364:	e3740001 	cmn	r4, #1
    4368:	1afffff9 	bne	4354 <_wrapup_reent+0x30>
    436c:	e5966000 	ldr	r6, [r6]
    4370:	e3560000 	cmp	r6, #0
    4374:	1afffff1 	bne	4340 <_wrapup_reent+0x1c>
    4378:	e597303c 	ldr	r3, [r7, #60]	; 0x3c
    437c:	e3530000 	cmp	r3, #0
    4380:	11a00007 	movne	r0, r7
    4384:	11a0e00f 	movne	lr, pc
    4388:	112fff13 	bxne	r3
    438c:	e8bd40f8 	pop	{r3, r4, r5, r6, r7, lr}
    4390:	e12fff1e 	bx	lr
    4394:	40000008 	.word	0x40000008

00004398 <_malloc_trim_r>:
    4398:	e92d40f8 	push	{r3, r4, r5, r6, r7, lr}
    439c:	e59f50e4 	ldr	r5, [pc, #228]	; 4488 <_malloc_trim_r+0xf0>
    43a0:	e1a07001 	mov	r7, r1
    43a4:	e1a04000 	mov	r4, r0
    43a8:	eb000297 	bl	4e0c <__malloc_lock>
    43ac:	e5953008 	ldr	r3, [r5, #8]
    43b0:	e5936004 	ldr	r6, [r3, #4]
    43b4:	e3c66003 	bic	r6, r6, #3
    43b8:	e2863efe 	add	r3, r6, #4064	; 0xfe0
    43bc:	e283300f 	add	r3, r3, #15
    43c0:	e0677003 	rsb	r7, r7, r3
    43c4:	e1a07627 	lsr	r7, r7, #12
    43c8:	e2477001 	sub	r7, r7, #1
    43cc:	e1a07607 	lsl	r7, r7, #12
    43d0:	e3570a01 	cmp	r7, #4096	; 0x1000
    43d4:	e1a00004 	mov	r0, r4
    43d8:	ba000006 	blt	43f8 <_malloc_trim_r+0x60>
    43dc:	e3a01000 	mov	r1, #0
    43e0:	eb00028b 	bl	4e14 <_sbrk_r>
    43e4:	e5953008 	ldr	r3, [r5, #8]
    43e8:	e0833006 	add	r3, r3, r6
    43ec:	e1500003 	cmp	r0, r3
    43f0:	e1a00004 	mov	r0, r4
    43f4:	0a000003 	beq	4408 <_malloc_trim_r+0x70>
    43f8:	eb000284 	bl	4e10 <__malloc_unlock>
    43fc:	e3a00000 	mov	r0, #0
    4400:	e8bd40f8 	pop	{r3, r4, r5, r6, r7, lr}
    4404:	e12fff1e 	bx	lr
    4408:	e2671000 	rsb	r1, r7, #0
    440c:	eb000280 	bl	4e14 <_sbrk_r>
    4410:	e3700001 	cmn	r0, #1
    4414:	0a00000b 	beq	4448 <_malloc_trim_r+0xb0>
    4418:	e59f306c 	ldr	r3, [pc, #108]	; 448c <_malloc_trim_r+0xf4>
    441c:	e5931000 	ldr	r1, [r3]
    4420:	e5952008 	ldr	r2, [r5, #8]
    4424:	e0676006 	rsb	r6, r7, r6
    4428:	e3866001 	orr	r6, r6, #1
    442c:	e0677001 	rsb	r7, r7, r1
    4430:	e1a00004 	mov	r0, r4
    4434:	e5826004 	str	r6, [r2, #4]
    4438:	e5837000 	str	r7, [r3]
    443c:	eb000273 	bl	4e10 <__malloc_unlock>
    4440:	e3a00001 	mov	r0, #1
    4444:	eaffffed 	b	4400 <_malloc_trim_r+0x68>
    4448:	e1a00004 	mov	r0, r4
    444c:	e3a01000 	mov	r1, #0
    4450:	eb00026f 	bl	4e14 <_sbrk_r>
    4454:	e5953008 	ldr	r3, [r5, #8]
    4458:	e0632000 	rsb	r2, r3, r0
    445c:	e352000f 	cmp	r2, #15
    4460:	da000006 	ble	4480 <_malloc_trim_r+0xe8>
    4464:	e59f1024 	ldr	r1, [pc, #36]	; 4490 <_malloc_trim_r+0xf8>
    4468:	e5911000 	ldr	r1, [r1]
    446c:	e0610000 	rsb	r0, r1, r0
    4470:	e59f1014 	ldr	r1, [pc, #20]	; 448c <_malloc_trim_r+0xf4>
    4474:	e3822001 	orr	r2, r2, #1
    4478:	e5810000 	str	r0, [r1]
    447c:	e5832004 	str	r2, [r3, #4]
    4480:	e1a00004 	mov	r0, r4
    4484:	eaffffdb 	b	43f8 <_malloc_trim_r+0x60>
    4488:	40000438 	.word	0x40000438
    448c:	40000854 	.word	0x40000854
    4490:	40000840 	.word	0x40000840

00004494 <_free_r>:
    4494:	e92d40f8 	push	{r3, r4, r5, r6, r7, lr}
    4498:	e2515000 	subs	r5, r1, #0
    449c:	e1a04000 	mov	r4, r0
    44a0:	0a00005c 	beq	4618 <_free_r+0x184>
    44a4:	eb000258 	bl	4e0c <__malloc_lock>
    44a8:	e5150004 	ldr	r0, [r5, #-4]
    44ac:	e59fc230 	ldr	ip, [pc, #560]	; 46e4 <_free_r+0x250>
    44b0:	e2451008 	sub	r1, r5, #8
    44b4:	e3c03001 	bic	r3, r0, #1
    44b8:	e0812003 	add	r2, r1, r3
    44bc:	e59c6008 	ldr	r6, [ip, #8]
    44c0:	e592e004 	ldr	lr, [r2, #4]
    44c4:	e1560002 	cmp	r6, r2
    44c8:	e3cee003 	bic	lr, lr, #3
    44cc:	0a000060 	beq	4654 <_free_r+0x1c0>
    44d0:	e2100001 	ands	r0, r0, #1
    44d4:	e582e004 	str	lr, [r2, #4]
    44d8:	13a00000 	movne	r0, #0
    44dc:	1a000009 	bne	4508 <_free_r+0x74>
    44e0:	e5156008 	ldr	r6, [r5, #-8]
    44e4:	e0661001 	rsb	r1, r6, r1
    44e8:	e5915008 	ldr	r5, [r1, #8]
    44ec:	e28c7008 	add	r7, ip, #8
    44f0:	e1550007 	cmp	r5, r7
    44f4:	e0833006 	add	r3, r3, r6
    44f8:	1591600c 	ldrne	r6, [r1, #12]
    44fc:	1585600c 	strne	r6, [r5, #12]
    4500:	15865008 	strne	r5, [r6, #8]
    4504:	03a00001 	moveq	r0, #1
    4508:	e082500e 	add	r5, r2, lr
    450c:	e5955004 	ldr	r5, [r5, #4]
    4510:	e3150001 	tst	r5, #1
    4514:	1a000009 	bne	4540 <_free_r+0xac>
    4518:	e3500000 	cmp	r0, #0
    451c:	e083300e 	add	r3, r3, lr
    4520:	e592e008 	ldr	lr, [r2, #8]
    4524:	1a000002 	bne	4534 <_free_r+0xa0>
    4528:	e59f51b8 	ldr	r5, [pc, #440]	; 46e8 <_free_r+0x254>
    452c:	e15e0005 	cmp	lr, r5
    4530:	0a00005d 	beq	46ac <_free_r+0x218>
    4534:	e592200c 	ldr	r2, [r2, #12]
    4538:	e58e200c 	str	r2, [lr, #12]
    453c:	e582e008 	str	lr, [r2, #8]
    4540:	e3832001 	orr	r2, r3, #1
    4544:	e3500000 	cmp	r0, #0
    4548:	e5812004 	str	r2, [r1, #4]
    454c:	e7813003 	str	r3, [r1, r3]
    4550:	1a00002e 	bne	4610 <_free_r+0x17c>
    4554:	e3530c02 	cmp	r3, #512	; 0x200
    4558:	3a000030 	bcc	4620 <_free_r+0x18c>
    455c:	e1a024a3 	lsr	r2, r3, #9
    4560:	e3520004 	cmp	r2, #4
    4564:	91a0e323 	lsrls	lr, r3, #6
    4568:	928ee038 	addls	lr, lr, #56	; 0x38
    456c:	91a0018e 	lslls	r0, lr, #3
    4570:	9a000014 	bls	45c8 <_free_r+0x134>
    4574:	e3520014 	cmp	r2, #20
    4578:	9282e05b 	addls	lr, r2, #91	; 0x5b
    457c:	91a0018e 	lslls	r0, lr, #3
    4580:	9a000010 	bls	45c8 <_free_r+0x134>
    4584:	e3520054 	cmp	r2, #84	; 0x54
    4588:	91a0e623 	lsrls	lr, r3, #12
    458c:	928ee06e 	addls	lr, lr, #110	; 0x6e
    4590:	91a0018e 	lslls	r0, lr, #3
    4594:	9a00000b 	bls	45c8 <_free_r+0x134>
    4598:	e3520f55 	cmp	r2, #340	; 0x154
    459c:	91a0e7a3 	lsrls	lr, r3, #15
    45a0:	928ee077 	addls	lr, lr, #119	; 0x77
    45a4:	91a0018e 	lslls	r0, lr, #3
    45a8:	9a000006 	bls	45c8 <_free_r+0x134>
    45ac:	e59f0138 	ldr	r0, [pc, #312]	; 46ec <_free_r+0x258>
    45b0:	e1520000 	cmp	r2, r0
    45b4:	91a0e923 	lsrls	lr, r3, #18
    45b8:	928ee07c 	addls	lr, lr, #124	; 0x7c
    45bc:	91a0018e 	lslls	r0, lr, #3
    45c0:	83a00e3f 	movhi	r0, #1008	; 0x3f0
    45c4:	83a0e07e 	movhi	lr, #126	; 0x7e
    45c8:	e08cc000 	add	ip, ip, r0
    45cc:	e59c2008 	ldr	r2, [ip, #8]
    45d0:	e152000c 	cmp	r2, ip
    45d4:	e59f0108 	ldr	r0, [pc, #264]	; 46e4 <_free_r+0x250>
    45d8:	1a000003 	bne	45ec <_free_r+0x158>
    45dc:	ea000039 	b	46c8 <_free_r+0x234>
    45e0:	e5922008 	ldr	r2, [r2, #8]
    45e4:	e15c0002 	cmp	ip, r2
    45e8:	0a000003 	beq	45fc <_free_r+0x168>
    45ec:	e5920004 	ldr	r0, [r2, #4]
    45f0:	e3c00003 	bic	r0, r0, #3
    45f4:	e1530000 	cmp	r3, r0
    45f8:	3afffff8 	bcc	45e0 <_free_r+0x14c>
    45fc:	e592300c 	ldr	r3, [r2, #12]
    4600:	e581300c 	str	r3, [r1, #12]
    4604:	e5812008 	str	r2, [r1, #8]
    4608:	e582100c 	str	r1, [r2, #12]
    460c:	e5831008 	str	r1, [r3, #8]
    4610:	e1a00004 	mov	r0, r4
    4614:	eb0001fd 	bl	4e10 <__malloc_unlock>
    4618:	e8bd40f8 	pop	{r3, r4, r5, r6, r7, lr}
    461c:	e12fff1e 	bx	lr
    4620:	e59c2004 	ldr	r2, [ip, #4]
    4624:	e1a031a3 	lsr	r3, r3, #3
    4628:	e1a00143 	asr	r0, r3, #2
    462c:	e3a0e001 	mov	lr, #1
    4630:	e182001e 	orr	r0, r2, lr, lsl r0
    4634:	e08c3183 	add	r3, ip, r3, lsl #3
    4638:	e5932008 	ldr	r2, [r3, #8]
    463c:	e581300c 	str	r3, [r1, #12]
    4640:	e5812008 	str	r2, [r1, #8]
    4644:	e58c0004 	str	r0, [ip, #4]
    4648:	e5831008 	str	r1, [r3, #8]
    464c:	e582100c 	str	r1, [r2, #12]
    4650:	eaffffee 	b	4610 <_free_r+0x17c>
    4654:	e3100001 	tst	r0, #1
    4658:	e08e3003 	add	r3, lr, r3
    465c:	1a000006 	bne	467c <_free_r+0x1e8>
    4660:	e5152008 	ldr	r2, [r5, #-8]
    4664:	e0621001 	rsb	r1, r2, r1
    4668:	e591000c 	ldr	r0, [r1, #12]
    466c:	e591e008 	ldr	lr, [r1, #8]
    4670:	e58e000c 	str	r0, [lr, #12]
    4674:	e580e008 	str	lr, [r0, #8]
    4678:	e0833002 	add	r3, r3, r2
    467c:	e59f206c 	ldr	r2, [pc, #108]	; 46f0 <_free_r+0x25c>
    4680:	e5920000 	ldr	r0, [r2]
    4684:	e3832001 	orr	r2, r3, #1
    4688:	e1530000 	cmp	r3, r0
    468c:	e5812004 	str	r2, [r1, #4]
    4690:	e58c1008 	str	r1, [ip, #8]
    4694:	3affffdd 	bcc	4610 <_free_r+0x17c>
    4698:	e59f3054 	ldr	r3, [pc, #84]	; 46f4 <_free_r+0x260>
    469c:	e1a00004 	mov	r0, r4
    46a0:	e5931000 	ldr	r1, [r3]
    46a4:	ebffff3b 	bl	4398 <_malloc_trim_r>
    46a8:	eaffffd8 	b	4610 <_free_r+0x17c>
    46ac:	e3832001 	orr	r2, r3, #1
    46b0:	e58c1014 	str	r1, [ip, #20]
    46b4:	e58c1010 	str	r1, [ip, #16]
    46b8:	e581e00c 	str	lr, [r1, #12]
    46bc:	e9814004 	stmib	r1, {r2, lr}
    46c0:	e7813003 	str	r3, [r1, r3]
    46c4:	eaffffd1 	b	4610 <_free_r+0x17c>
    46c8:	e5903004 	ldr	r3, [r0, #4]
    46cc:	e1a0e14e 	asr	lr, lr, #2
    46d0:	e3a0c001 	mov	ip, #1
    46d4:	e183ce1c 	orr	ip, r3, ip, lsl lr
    46d8:	e1a03002 	mov	r3, r2
    46dc:	e580c004 	str	ip, [r0, #4]
    46e0:	eaffffc6 	b	4600 <_free_r+0x16c>
    46e4:	40000438 	.word	0x40000438
    46e8:	40000440 	.word	0x40000440
    46ec:	00000554 	.word	0x00000554
    46f0:	40000844 	.word	0x40000844
    46f4:	40000850 	.word	0x40000850

000046f8 <_malloc_r>:
    46f8:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    46fc:	e281400b 	add	r4, r1, #11
    4700:	e3540016 	cmp	r4, #22
    4704:	83c44007 	bichi	r4, r4, #7
    4708:	81a03fa4 	lsrhi	r3, r4, #31
    470c:	93a03000 	movls	r3, #0
    4710:	93a04010 	movls	r4, #16
    4714:	e1540001 	cmp	r4, r1
    4718:	21a01003 	movcs	r1, r3
    471c:	33831001 	orrcc	r1, r3, #1
    4720:	e3510000 	cmp	r1, #0
    4724:	13a0300c 	movne	r3, #12
    4728:	e1a05000 	mov	r5, r0
    472c:	15803000 	strne	r3, [r0]
    4730:	13a07000 	movne	r7, #0
    4734:	1a000015 	bne	4790 <_malloc_r+0x98>
    4738:	eb0001b3 	bl	4e0c <__malloc_lock>
    473c:	e3540f7e 	cmp	r4, #504	; 0x1f8
    4740:	2a000015 	bcs	479c <_malloc_r+0xa4>
    4744:	e59f66b4 	ldr	r6, [pc, #1716]	; 4e00 <_malloc_r+0x708>
    4748:	e1a0e1a4 	lsr	lr, r4, #3
    474c:	e086318e 	add	r3, r6, lr, lsl #3
    4750:	e593700c 	ldr	r7, [r3, #12]
    4754:	e1570003 	cmp	r7, r3
    4758:	0a000168 	beq	4d00 <_malloc_r+0x608>
    475c:	e5973004 	ldr	r3, [r7, #4]
    4760:	e3c33003 	bic	r3, r3, #3
    4764:	e0873003 	add	r3, r7, r3
    4768:	e5930004 	ldr	r0, [r3, #4]
    476c:	e2871008 	add	r1, r7, #8
    4770:	e8910006 	ldm	r1, {r1, r2}
    4774:	e3800001 	orr	r0, r0, #1
    4778:	e5830004 	str	r0, [r3, #4]
    477c:	e581200c 	str	r2, [r1, #12]
    4780:	e5821008 	str	r1, [r2, #8]
    4784:	e1a00005 	mov	r0, r5
    4788:	eb0001a0 	bl	4e10 <__malloc_unlock>
    478c:	e2877008 	add	r7, r7, #8
    4790:	e1a00007 	mov	r0, r7
    4794:	e8bd4ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4798:	e12fff1e 	bx	lr
    479c:	e1b0e4a4 	lsrs	lr, r4, #9
    47a0:	01a0e1a4 	lsreq	lr, r4, #3
    47a4:	01a0118e 	lsleq	r1, lr, #3
    47a8:	1a000061 	bne	4934 <_malloc_r+0x23c>
    47ac:	e59f664c 	ldr	r6, [pc, #1612]	; 4e00 <_malloc_r+0x708>
    47b0:	e0861001 	add	r1, r6, r1
    47b4:	e591700c 	ldr	r7, [r1, #12]
    47b8:	e1510007 	cmp	r1, r7
    47bc:	1a000005 	bne	47d8 <_malloc_r+0xe0>
    47c0:	ea00000a 	b	47f0 <_malloc_r+0xf8>
    47c4:	e3530000 	cmp	r3, #0
    47c8:	aa0000e5 	bge	4b64 <_malloc_r+0x46c>
    47cc:	e597700c 	ldr	r7, [r7, #12]
    47d0:	e1510007 	cmp	r1, r7
    47d4:	0a000005 	beq	47f0 <_malloc_r+0xf8>
    47d8:	e5972004 	ldr	r2, [r7, #4]
    47dc:	e3c22003 	bic	r2, r2, #3
    47e0:	e0643002 	rsb	r3, r4, r2
    47e4:	e353000f 	cmp	r3, #15
    47e8:	dafffff5 	ble	47c4 <_malloc_r+0xcc>
    47ec:	e24ee001 	sub	lr, lr, #1
    47f0:	e28ee001 	add	lr, lr, #1
    47f4:	e59f3604 	ldr	r3, [pc, #1540]	; 4e00 <_malloc_r+0x708>
    47f8:	e5967010 	ldr	r7, [r6, #16]
    47fc:	e2838008 	add	r8, r3, #8
    4800:	e1570008 	cmp	r7, r8
    4804:	05931004 	ldreq	r1, [r3, #4]
    4808:	0a000016 	beq	4868 <_malloc_r+0x170>
    480c:	e5972004 	ldr	r2, [r7, #4]
    4810:	e3c22003 	bic	r2, r2, #3
    4814:	e0641002 	rsb	r1, r4, r2
    4818:	e351000f 	cmp	r1, #15
    481c:	ca000115 	bgt	4c78 <_malloc_r+0x580>
    4820:	e3510000 	cmp	r1, #0
    4824:	e5838014 	str	r8, [r3, #20]
    4828:	e5838010 	str	r8, [r3, #16]
    482c:	aa00005b 	bge	49a0 <_malloc_r+0x2a8>
    4830:	e3520c02 	cmp	r2, #512	; 0x200
    4834:	2a0000e0 	bcs	4bbc <_malloc_r+0x4c4>
    4838:	e5930004 	ldr	r0, [r3, #4]
    483c:	e1a021a2 	lsr	r2, r2, #3
    4840:	e1a01142 	asr	r1, r2, #2
    4844:	e3a0c001 	mov	ip, #1
    4848:	e180111c 	orr	r1, r0, ip, lsl r1
    484c:	e0832182 	add	r2, r3, r2, lsl #3
    4850:	e5920008 	ldr	r0, [r2, #8]
    4854:	e587200c 	str	r2, [r7, #12]
    4858:	e5870008 	str	r0, [r7, #8]
    485c:	e5831004 	str	r1, [r3, #4]
    4860:	e5827008 	str	r7, [r2, #8]
    4864:	e580700c 	str	r7, [r0, #12]
    4868:	e1a0314e 	asr	r3, lr, #2
    486c:	e3a00001 	mov	r0, #1
    4870:	e1a00310 	lsl	r0, r0, r3
    4874:	e1500001 	cmp	r0, r1
    4878:	8a000050 	bhi	49c0 <_malloc_r+0x2c8>
    487c:	e1110000 	tst	r1, r0
    4880:	1a000008 	bne	48a8 <_malloc_r+0x1b0>
    4884:	e1a00080 	lsl	r0, r0, #1
    4888:	e3cee003 	bic	lr, lr, #3
    488c:	e1110000 	tst	r1, r0
    4890:	e28ee004 	add	lr, lr, #4
    4894:	1a000003 	bne	48a8 <_malloc_r+0x1b0>
    4898:	e1a00080 	lsl	r0, r0, #1
    489c:	e1100001 	tst	r0, r1
    48a0:	e28ee004 	add	lr, lr, #4
    48a4:	0afffffb 	beq	4898 <_malloc_r+0x1a0>
    48a8:	e086a18e 	add	sl, r6, lr, lsl #3
    48ac:	e1a0c00a 	mov	ip, sl
    48b0:	e1a0700e 	mov	r7, lr
    48b4:	e59c300c 	ldr	r3, [ip, #12]
    48b8:	e15c0003 	cmp	ip, r3
    48bc:	1a000005 	bne	48d8 <_malloc_r+0x1e0>
    48c0:	ea0000f9 	b	4cac <_malloc_r+0x5b4>
    48c4:	e3520000 	cmp	r2, #0
    48c8:	aa000112 	bge	4d18 <_malloc_r+0x620>
    48cc:	e593300c 	ldr	r3, [r3, #12]
    48d0:	e15c0003 	cmp	ip, r3
    48d4:	0a0000f4 	beq	4cac <_malloc_r+0x5b4>
    48d8:	e5931004 	ldr	r1, [r3, #4]
    48dc:	e3c11003 	bic	r1, r1, #3
    48e0:	e0642001 	rsb	r2, r4, r1
    48e4:	e352000f 	cmp	r2, #15
    48e8:	dafffff5 	ble	48c4 <_malloc_r+0x1cc>
    48ec:	e1a07003 	mov	r7, r3
    48f0:	e593000c 	ldr	r0, [r3, #12]
    48f4:	e5b7c008 	ldr	ip, [r7, #8]!
    48f8:	e0831004 	add	r1, r3, r4
    48fc:	e382e001 	orr	lr, r2, #1
    4900:	e3844001 	orr	r4, r4, #1
    4904:	e58c000c 	str	r0, [ip, #12]
    4908:	e580c008 	str	ip, [r0, #8]
    490c:	e5834004 	str	r4, [r3, #4]
    4910:	e5861014 	str	r1, [r6, #20]
    4914:	e5861010 	str	r1, [r6, #16]
    4918:	e581800c 	str	r8, [r1, #12]
    491c:	e5818008 	str	r8, [r1, #8]
    4920:	e581e004 	str	lr, [r1, #4]
    4924:	e7812002 	str	r2, [r1, r2]
    4928:	e1a00005 	mov	r0, r5
    492c:	eb000137 	bl	4e10 <__malloc_unlock>
    4930:	eaffff96 	b	4790 <_malloc_r+0x98>
    4934:	e35e0004 	cmp	lr, #4
    4938:	91a0e324 	lsrls	lr, r4, #6
    493c:	928ee038 	addls	lr, lr, #56	; 0x38
    4940:	91a0118e 	lslls	r1, lr, #3
    4944:	9affff98 	bls	47ac <_malloc_r+0xb4>
    4948:	e35e0014 	cmp	lr, #20
    494c:	928ee05b 	addls	lr, lr, #91	; 0x5b
    4950:	91a0118e 	lslls	r1, lr, #3
    4954:	9affff94 	bls	47ac <_malloc_r+0xb4>
    4958:	e35e0054 	cmp	lr, #84	; 0x54
    495c:	91a0e624 	lsrls	lr, r4, #12
    4960:	928ee06e 	addls	lr, lr, #110	; 0x6e
    4964:	91a0118e 	lslls	r1, lr, #3
    4968:	9affff8f 	bls	47ac <_malloc_r+0xb4>
    496c:	e35e0f55 	cmp	lr, #340	; 0x154
    4970:	91a0e7a4 	lsrls	lr, r4, #15
    4974:	928ee077 	addls	lr, lr, #119	; 0x77
    4978:	91a0118e 	lslls	r1, lr, #3
    497c:	9affff8a 	bls	47ac <_malloc_r+0xb4>
    4980:	e59f347c 	ldr	r3, [pc, #1148]	; 4e04 <_malloc_r+0x70c>
    4984:	e15e0003 	cmp	lr, r3
    4988:	91a0e924 	lsrls	lr, r4, #18
    498c:	928ee07c 	addls	lr, lr, #124	; 0x7c
    4990:	91a0118e 	lslls	r1, lr, #3
    4994:	83a01e3f 	movhi	r1, #1008	; 0x3f0
    4998:	83a0e07e 	movhi	lr, #126	; 0x7e
    499c:	eaffff82 	b	47ac <_malloc_r+0xb4>
    49a0:	e0872002 	add	r2, r7, r2
    49a4:	e5923004 	ldr	r3, [r2, #4]
    49a8:	e3833001 	orr	r3, r3, #1
    49ac:	e5823004 	str	r3, [r2, #4]
    49b0:	e1a00005 	mov	r0, r5
    49b4:	eb000115 	bl	4e10 <__malloc_unlock>
    49b8:	e2877008 	add	r7, r7, #8
    49bc:	eaffff73 	b	4790 <_malloc_r+0x98>
    49c0:	e5967008 	ldr	r7, [r6, #8]
    49c4:	e5978004 	ldr	r8, [r7, #4]
    49c8:	e3c88003 	bic	r8, r8, #3
    49cc:	e1540008 	cmp	r4, r8
    49d0:	93a03000 	movls	r3, #0
    49d4:	83a03001 	movhi	r3, #1
    49d8:	e0642008 	rsb	r2, r4, r8
    49dc:	e352000f 	cmp	r2, #15
    49e0:	d3833001 	orrle	r3, r3, #1
    49e4:	e3530000 	cmp	r3, #0
    49e8:	0a000069 	beq	4b94 <_malloc_r+0x49c>
    49ec:	e59f9414 	ldr	r9, [pc, #1044]	; 4e08 <_malloc_r+0x710>
    49f0:	e59f3408 	ldr	r3, [pc, #1032]	; 4e00 <_malloc_r+0x708>
    49f4:	e599b000 	ldr	fp, [r9]
    49f8:	e5933408 	ldr	r3, [r3, #1032]	; 0x408
    49fc:	e084b00b 	add	fp, r4, fp
    4a00:	e3730001 	cmn	r3, #1
    4a04:	128bba01 	addne	fp, fp, #4096	; 0x1000
    4a08:	128bb00f 	addne	fp, fp, #15
    4a0c:	13cbbeff 	bicne	fp, fp, #4080	; 0xff0
    4a10:	028bb010 	addeq	fp, fp, #16
    4a14:	13cbb00f 	bicne	fp, fp, #15
    4a18:	e1a00005 	mov	r0, r5
    4a1c:	e1a0100b 	mov	r1, fp
    4a20:	eb0000fb 	bl	4e14 <_sbrk_r>
    4a24:	e3700001 	cmn	r0, #1
    4a28:	e1a0a000 	mov	sl, r0
    4a2c:	0a0000de 	beq	4dac <_malloc_r+0x6b4>
    4a30:	e0872008 	add	r2, r7, r8
    4a34:	e1520000 	cmp	r2, r0
    4a38:	8a0000c2 	bhi	4d48 <_malloc_r+0x650>
    4a3c:	e5993004 	ldr	r3, [r9, #4]
    4a40:	e152000a 	cmp	r2, sl
    4a44:	e08b3003 	add	r3, fp, r3
    4a48:	e5893004 	str	r3, [r9, #4]
    4a4c:	0a0000da 	beq	4dbc <_malloc_r+0x6c4>
    4a50:	e5961408 	ldr	r1, [r6, #1032]	; 0x408
    4a54:	e3710001 	cmn	r1, #1
    4a58:	1062200a 	rsbne	r2, r2, sl
    4a5c:	059f339c 	ldreq	r3, [pc, #924]	; 4e00 <_malloc_r+0x708>
    4a60:	10833002 	addne	r3, r3, r2
    4a64:	0583a408 	streq	sl, [r3, #1032]	; 0x408
    4a68:	15893004 	strne	r3, [r9, #4]
    4a6c:	e21a3007 	ands	r3, sl, #7
    4a70:	12632008 	rsbne	r2, r3, #8
    4a74:	108aa002 	addne	sl, sl, r2
    4a78:	12633a01 	rsbne	r3, r3, #4096	; 0x1000
    4a7c:	12832008 	addne	r2, r3, #8
    4a80:	e08a300b 	add	r3, sl, fp
    4a84:	03a02a01 	moveq	r2, #4096	; 0x1000
    4a88:	e1a03a03 	lsl	r3, r3, #20
    4a8c:	e042ba23 	sub	fp, r2, r3, lsr #20
    4a90:	e1a0100b 	mov	r1, fp
    4a94:	e1a00005 	mov	r0, r5
    4a98:	eb0000dd 	bl	4e14 <_sbrk_r>
    4a9c:	e3700001 	cmn	r0, #1
    4aa0:	106a2000 	rsbne	r2, sl, r0
    4aa4:	e5993004 	ldr	r3, [r9, #4]
    4aa8:	1082200b 	addne	r2, r2, fp
    4aac:	03a0b000 	moveq	fp, #0
    4ab0:	13822001 	orrne	r2, r2, #1
    4ab4:	03a02001 	moveq	r2, #1
    4ab8:	e08b3003 	add	r3, fp, r3
    4abc:	e1570006 	cmp	r7, r6
    4ac0:	e5893004 	str	r3, [r9, #4]
    4ac4:	e586a008 	str	sl, [r6, #8]
    4ac8:	e58a2004 	str	r2, [sl, #4]
    4acc:	0a00000d 	beq	4b08 <_malloc_r+0x410>
    4ad0:	e358000f 	cmp	r8, #15
    4ad4:	9a0000af 	bls	4d98 <_malloc_r+0x6a0>
    4ad8:	e597c004 	ldr	ip, [r7, #4]
    4adc:	e248200c 	sub	r2, r8, #12
    4ae0:	e3c22007 	bic	r2, r2, #7
    4ae4:	e20cc001 	and	ip, ip, #1
    4ae8:	e0871002 	add	r1, r7, r2
    4aec:	e3a00005 	mov	r0, #5
    4af0:	e182c00c 	orr	ip, r2, ip
    4af4:	e352000f 	cmp	r2, #15
    4af8:	e587c004 	str	ip, [r7, #4]
    4afc:	e5810004 	str	r0, [r1, #4]
    4b00:	e5810008 	str	r0, [r1, #8]
    4b04:	8a0000b3 	bhi	4dd8 <_malloc_r+0x6e0>
    4b08:	e599202c 	ldr	r2, [r9, #44]	; 0x2c
    4b0c:	e1530002 	cmp	r3, r2
    4b10:	859f22f0 	ldrhi	r2, [pc, #752]	; 4e08 <_malloc_r+0x710>
    4b14:	8582302c 	strhi	r3, [r2, #44]	; 0x2c
    4b18:	e5992030 	ldr	r2, [r9, #48]	; 0x30
    4b1c:	e5967008 	ldr	r7, [r6, #8]
    4b20:	e1530002 	cmp	r3, r2
    4b24:	859f12dc 	ldrhi	r1, [pc, #732]	; 4e08 <_malloc_r+0x710>
    4b28:	e5972004 	ldr	r2, [r7, #4]
    4b2c:	85813030 	strhi	r3, [r1, #48]	; 0x30
    4b30:	e3c22003 	bic	r2, r2, #3
    4b34:	e1540002 	cmp	r4, r2
    4b38:	93a03000 	movls	r3, #0
    4b3c:	83a03001 	movhi	r3, #1
    4b40:	e0642002 	rsb	r2, r4, r2
    4b44:	e352000f 	cmp	r2, #15
    4b48:	d3833001 	orrle	r3, r3, #1
    4b4c:	e3530000 	cmp	r3, #0
    4b50:	0a00000f 	beq	4b94 <_malloc_r+0x49c>
    4b54:	e1a00005 	mov	r0, r5
    4b58:	eb0000ac 	bl	4e10 <__malloc_unlock>
    4b5c:	e3a07000 	mov	r7, #0
    4b60:	eaffff0a 	b	4790 <_malloc_r+0x98>
    4b64:	e0872002 	add	r2, r7, r2
    4b68:	e5920004 	ldr	r0, [r2, #4]
    4b6c:	e2871008 	add	r1, r7, #8
    4b70:	e891000a 	ldm	r1, {r1, r3}
    4b74:	e3800001 	orr	r0, r0, #1
    4b78:	e5820004 	str	r0, [r2, #4]
    4b7c:	e581300c 	str	r3, [r1, #12]
    4b80:	e5831008 	str	r1, [r3, #8]
    4b84:	e1a00005 	mov	r0, r5
    4b88:	eb0000a0 	bl	4e10 <__malloc_unlock>
    4b8c:	e2877008 	add	r7, r7, #8
    4b90:	eafffefe 	b	4790 <_malloc_r+0x98>
    4b94:	e0873004 	add	r3, r7, r4
    4b98:	e3822001 	orr	r2, r2, #1
    4b9c:	e3844001 	orr	r4, r4, #1
    4ba0:	e5874004 	str	r4, [r7, #4]
    4ba4:	e1a00005 	mov	r0, r5
    4ba8:	e5832004 	str	r2, [r3, #4]
    4bac:	e5863008 	str	r3, [r6, #8]
    4bb0:	e2877008 	add	r7, r7, #8
    4bb4:	eb000095 	bl	4e10 <__malloc_unlock>
    4bb8:	eafffef4 	b	4790 <_malloc_r+0x98>
    4bbc:	e1a034a2 	lsr	r3, r2, #9
    4bc0:	e3530004 	cmp	r3, #4
    4bc4:	91a0a322 	lsrls	sl, r2, #6
    4bc8:	928aa038 	addls	sl, sl, #56	; 0x38
    4bcc:	91a0018a 	lslls	r0, sl, #3
    4bd0:	9a000014 	bls	4c28 <_malloc_r+0x530>
    4bd4:	e3530014 	cmp	r3, #20
    4bd8:	9283a05b 	addls	sl, r3, #91	; 0x5b
    4bdc:	91a0018a 	lslls	r0, sl, #3
    4be0:	9a000010 	bls	4c28 <_malloc_r+0x530>
    4be4:	e3530054 	cmp	r3, #84	; 0x54
    4be8:	91a0a622 	lsrls	sl, r2, #12
    4bec:	928aa06e 	addls	sl, sl, #110	; 0x6e
    4bf0:	91a0018a 	lslls	r0, sl, #3
    4bf4:	9a00000b 	bls	4c28 <_malloc_r+0x530>
    4bf8:	e3530f55 	cmp	r3, #340	; 0x154
    4bfc:	91a0a7a2 	lsrls	sl, r2, #15
    4c00:	928aa077 	addls	sl, sl, #119	; 0x77
    4c04:	91a0018a 	lslls	r0, sl, #3
    4c08:	9a000006 	bls	4c28 <_malloc_r+0x530>
    4c0c:	e59f11f0 	ldr	r1, [pc, #496]	; 4e04 <_malloc_r+0x70c>
    4c10:	e1530001 	cmp	r3, r1
    4c14:	91a0a922 	lsrls	sl, r2, #18
    4c18:	928aa07c 	addls	sl, sl, #124	; 0x7c
    4c1c:	91a0018a 	lslls	r0, sl, #3
    4c20:	83a00e3f 	movhi	r0, #1008	; 0x3f0
    4c24:	83a0a07e 	movhi	sl, #126	; 0x7e
    4c28:	e0860000 	add	r0, r6, r0
    4c2c:	e5903008 	ldr	r3, [r0, #8]
    4c30:	e1530000 	cmp	r3, r0
    4c34:	e59fc1c4 	ldr	ip, [pc, #452]	; 4e00 <_malloc_r+0x708>
    4c38:	1a000003 	bne	4c4c <_malloc_r+0x554>
    4c3c:	ea00004e 	b	4d7c <_malloc_r+0x684>
    4c40:	e5933008 	ldr	r3, [r3, #8]
    4c44:	e1500003 	cmp	r0, r3
    4c48:	0a000003 	beq	4c5c <_malloc_r+0x564>
    4c4c:	e5931004 	ldr	r1, [r3, #4]
    4c50:	e3c11003 	bic	r1, r1, #3
    4c54:	e1520001 	cmp	r2, r1
    4c58:	3afffff8 	bcc	4c40 <_malloc_r+0x548>
    4c5c:	e593200c 	ldr	r2, [r3, #12]
    4c60:	e5961004 	ldr	r1, [r6, #4]
    4c64:	e587200c 	str	r2, [r7, #12]
    4c68:	e5873008 	str	r3, [r7, #8]
    4c6c:	e583700c 	str	r7, [r3, #12]
    4c70:	e5827008 	str	r7, [r2, #8]
    4c74:	eafffefb 	b	4868 <_malloc_r+0x170>
    4c78:	e0872004 	add	r2, r7, r4
    4c7c:	e3810001 	orr	r0, r1, #1
    4c80:	e3844001 	orr	r4, r4, #1
    4c84:	e5874004 	str	r4, [r7, #4]
    4c88:	e5832014 	str	r2, [r3, #20]
    4c8c:	e5832010 	str	r2, [r3, #16]
    4c90:	e582800c 	str	r8, [r2, #12]
    4c94:	e9820101 	stmib	r2, {r0, r8}
    4c98:	e7821001 	str	r1, [r2, r1]
    4c9c:	e1a00005 	mov	r0, r5
    4ca0:	eb00005a 	bl	4e10 <__malloc_unlock>
    4ca4:	e2877008 	add	r7, r7, #8
    4ca8:	eafffeb8 	b	4790 <_malloc_r+0x98>
    4cac:	e2877001 	add	r7, r7, #1
    4cb0:	e3170003 	tst	r7, #3
    4cb4:	e28cc008 	add	ip, ip, #8
    4cb8:	1afffefd 	bne	48b4 <_malloc_r+0x1bc>
    4cbc:	e31e0003 	tst	lr, #3
    4cc0:	e24a3008 	sub	r3, sl, #8
    4cc4:	0a000049 	beq	4df0 <_malloc_r+0x6f8>
    4cc8:	e59aa000 	ldr	sl, [sl]
    4ccc:	e15a0003 	cmp	sl, r3
    4cd0:	e24ee001 	sub	lr, lr, #1
    4cd4:	0afffff8 	beq	4cbc <_malloc_r+0x5c4>
    4cd8:	e5963004 	ldr	r3, [r6, #4]
    4cdc:	e1a00080 	lsl	r0, r0, #1
    4ce0:	e1500003 	cmp	r0, r3
    4ce4:	8affff35 	bhi	49c0 <_malloc_r+0x2c8>
    4ce8:	e3500000 	cmp	r0, #0
    4cec:	0affff33 	beq	49c0 <_malloc_r+0x2c8>
    4cf0:	e1130000 	tst	r3, r0
    4cf4:	0a00001a 	beq	4d64 <_malloc_r+0x66c>
    4cf8:	e1a0e007 	mov	lr, r7
    4cfc:	eafffee9 	b	48a8 <_malloc_r+0x1b0>
    4d00:	e2873008 	add	r3, r7, #8
    4d04:	e5977014 	ldr	r7, [r7, #20]
    4d08:	e1530007 	cmp	r3, r7
    4d0c:	028ee002 	addeq	lr, lr, #2
    4d10:	0afffeb7 	beq	47f4 <_malloc_r+0xfc>
    4d14:	eafffe90 	b	475c <_malloc_r+0x64>
    4d18:	e0831001 	add	r1, r3, r1
    4d1c:	e5910004 	ldr	r0, [r1, #4]
    4d20:	e1a07003 	mov	r7, r3
    4d24:	e5b72008 	ldr	r2, [r7, #8]!
    4d28:	e593300c 	ldr	r3, [r3, #12]
    4d2c:	e3800001 	orr	r0, r0, #1
    4d30:	e5810004 	str	r0, [r1, #4]
    4d34:	e582300c 	str	r3, [r2, #12]
    4d38:	e5832008 	str	r2, [r3, #8]
    4d3c:	e1a00005 	mov	r0, r5
    4d40:	eb000032 	bl	4e10 <__malloc_unlock>
    4d44:	eafffe91 	b	4790 <_malloc_r+0x98>
    4d48:	e1570006 	cmp	r7, r6
    4d4c:	0affff3a 	beq	4a3c <_malloc_r+0x344>
    4d50:	e59f30a8 	ldr	r3, [pc, #168]	; 4e00 <_malloc_r+0x708>
    4d54:	e5937008 	ldr	r7, [r3, #8]
    4d58:	e5972004 	ldr	r2, [r7, #4]
    4d5c:	e3c22003 	bic	r2, r2, #3
    4d60:	eaffff73 	b	4b34 <_malloc_r+0x43c>
    4d64:	e1a00080 	lsl	r0, r0, #1
    4d68:	e1100003 	tst	r0, r3
    4d6c:	e2877004 	add	r7, r7, #4
    4d70:	0afffffb 	beq	4d64 <_malloc_r+0x66c>
    4d74:	e1a0e007 	mov	lr, r7
    4d78:	eafffeca 	b	48a8 <_malloc_r+0x1b0>
    4d7c:	e59c2004 	ldr	r2, [ip, #4]
    4d80:	e1a0a14a 	asr	sl, sl, #2
    4d84:	e3a01001 	mov	r1, #1
    4d88:	e1821a11 	orr	r1, r2, r1, lsl sl
    4d8c:	e1a02003 	mov	r2, r3
    4d90:	e58c1004 	str	r1, [ip, #4]
    4d94:	eaffffb2 	b	4c64 <_malloc_r+0x56c>
    4d98:	e3a03001 	mov	r3, #1
    4d9c:	e58a3004 	str	r3, [sl, #4]
    4da0:	e1a0700a 	mov	r7, sl
    4da4:	e3a02000 	mov	r2, #0
    4da8:	eaffff61 	b	4b34 <_malloc_r+0x43c>
    4dac:	e5967008 	ldr	r7, [r6, #8]
    4db0:	e5972004 	ldr	r2, [r7, #4]
    4db4:	e3c22003 	bic	r2, r2, #3
    4db8:	eaffff5d 	b	4b34 <_malloc_r+0x43c>
    4dbc:	e1b01a02 	lsls	r1, r2, #20
    4dc0:	1affff22 	bne	4a50 <_malloc_r+0x358>
    4dc4:	e5962008 	ldr	r2, [r6, #8]
    4dc8:	e08b1008 	add	r1, fp, r8
    4dcc:	e3811001 	orr	r1, r1, #1
    4dd0:	e5821004 	str	r1, [r2, #4]
    4dd4:	eaffff4b 	b	4b08 <_malloc_r+0x410>
    4dd8:	e1a00005 	mov	r0, r5
    4ddc:	e2871008 	add	r1, r7, #8
    4de0:	ebfffdab 	bl	4494 <_free_r>
    4de4:	e59f301c 	ldr	r3, [pc, #28]	; 4e08 <_malloc_r+0x710>
    4de8:	e5933004 	ldr	r3, [r3, #4]
    4dec:	eaffff45 	b	4b08 <_malloc_r+0x410>
    4df0:	e5963004 	ldr	r3, [r6, #4]
    4df4:	e1c33000 	bic	r3, r3, r0
    4df8:	e5863004 	str	r3, [r6, #4]
    4dfc:	eaffffb6 	b	4cdc <_malloc_r+0x5e4>
    4e00:	40000438 	.word	0x40000438
    4e04:	00000554 	.word	0x00000554
    4e08:	40000850 	.word	0x40000850

00004e0c <__malloc_lock>:
    4e0c:	e12fff1e 	bx	lr

00004e10 <__malloc_unlock>:
    4e10:	e12fff1e 	bx	lr

00004e14 <_sbrk_r>:
    4e14:	e92d4038 	push	{r3, r4, r5, lr}
    4e18:	e59f4030 	ldr	r4, [pc, #48]	; 4e50 <_sbrk_r+0x3c>
    4e1c:	e3a03000 	mov	r3, #0
    4e20:	e1a05000 	mov	r5, r0
    4e24:	e1a00001 	mov	r0, r1
    4e28:	e5843000 	str	r3, [r4]
    4e2c:	ebfff735 	bl	2b08 <_sbrk>
    4e30:	e3700001 	cmn	r0, #1
    4e34:	0a000001 	beq	4e40 <_sbrk_r+0x2c>
    4e38:	e8bd4038 	pop	{r3, r4, r5, lr}
    4e3c:	e12fff1e 	bx	lr
    4e40:	e5943000 	ldr	r3, [r4]
    4e44:	e3530000 	cmp	r3, #0
    4e48:	15853000 	strne	r3, [r5]
    4e4c:	eafffff9 	b	4e38 <_sbrk_r+0x24>
    4e50:	40000934 	.word	0x40000934

00004e54 <FRLut>:
    4e54:	3f800000 3f889375 3f891687 3f89db23     ...?u..?...?#..?
    4e64:	3f8a9fbe 3f8ba5e3 3f8ccccd 3f8e353f     ...?...?...??5.?
    4e74:	3f900000 3f910625 3f924dd3 3f93b646     ...?%..?.M.?F..?
    4e84:	3f956042 3f974bc7 3f99999a 3f9b645a     B`.?.K.?...?Zd.?
    4e94:	3f9c6a7f 3f9d9168 3fa00000 3fa22d0e     .j.?h..?...?.-.?
    4ea4:	3fa2f1aa 3fa49ba6 3fa66666 3fa76c8b     ...?...?ff.?.l.?
    4eb4:	3faa9fbe 3fadb22d 3fae978d 3fb00000     ...?-..?...?...?
    4ec4:	3fb147ae 3fb33333 3fb56042 3fb6e979     .G.?33.?B`.?y..?
    4ed4:	3fb8d4fe 3fba3d71 3fbb22d1 3fbbc6a8     ...?q=.?.".?...?
    4ee4:	3fc00000 3fc43958 3fc4dd2f 3fc5c28f     ...?X9.?/..?...?
    4ef4:	3fc72b02 3fc91687 3fca9fbe 3fcccccd     .+.?...?...?...?
    4f04:	3fceb852 3fd00000 3fd16873 3fd24dd3     R..?...?sh.?.M.?
    4f14:	3fd56042 3fd89375 3fd9999a 3fdb645a     B`.?u..?...?Zd.?
    4f24:	3fdd0e56 3fddd2f2 3fe00000 3fe26e98     V..?...?...?.n.?
    4f34:	3fe39581 3fe49ba6 3fe66666 3fe8b439     ...?...?ff.?9..?
    4f44:	3fea9fbe 3fec49ba 3fedb22d 3feef9db     ...?.I.?-..?...?
    4f54:	3ff00000 3ff1cac1 3ff33333 3ff45a1d     ...?...?33.?.Z.?
    4f64:	3ff56042 3ff624dd 3ff6e979 3ff76c8b     B`.?.$.?y..?.l.?

00004f74 <DIVADDVALLut>:
    4f74:	00000000 3f800000 3f800000 3f800000     .......?...?...?
    4f84:	3f800000 3f800000 3f800000 3f800000     ...?...?...?...?
    4f94:	3f800000 40000000 3f800000 40000000     ...?...@...?...@
    4fa4:	3f800000 40000000 3f800000 40400000     ...?...@...?..@@
    4fb4:	40000000 40400000 3f800000 40800000     ...@..@@...?...@
    4fc4:	40400000 40000000 40400000 40800000     ..@@...@..@@...@
    4fd4:	3f800000 40a00000 40800000 40400000     ...?...@...@..@@
    4fe4:	40a00000 40000000 40a00000 40400000     ...@...@...@..@@
    4ff4:	40800000 40a00000 40c00000 40e00000     ...@...@...@...@
    5004:	3f800000 41000000 40e00000 40c00000     ...?...A...@...@
    5014:	40a00000 40800000 40e00000 40400000     ...@...@...@..@@
    5024:	41000000 40a00000 40e00000 41100000     ...A...@...@...A
    5034:	40000000 41100000 40e00000 40a00000     ...@...A...@...@
    5044:	41000000 41300000 40400000 41200000     ...A..0A..@@.. A
    5054:	40e00000 41300000 40800000 41100000     ...@..0A...@...A
    5064:	40a00000 41300000 40c00000 41500000     ...@..0A...@..PA
    5074:	40e00000 41000000 41100000 41200000     ...@...A...A.. A
    5084:	41300000 41400000 41500000 41600000     ..0A..@A..PA..`A

00005094 <MULVALLut>:
    5094:	3f800000 41700000 41600000 41500000     ...?..pA..`A..PA
    50a4:	41400000 41300000 41200000 41100000     ..@A..0A.. A...A
    50b4:	41000000 41700000 40e00000 41500000     ...A..pA...@..PA
    50c4:	40c00000 41300000 40a00000 41600000     ...@..0A...@..`A
    50d4:	41100000 41500000 40800000 41700000     ...A..PA...@..pA
    50e4:	41300000 40e00000 41200000 41500000     ..0A...@.. A..PA
    50f4:	40400000 41600000 41300000 41000000     ..@@..`A..0A...A
    5104:	41500000 40a00000 41400000 40e00000     ..PA...@..@A...@
    5114:	41100000 41300000 41500000 41700000     ...A..0A..PA..pA
    5124:	40000000 41700000 41500000 41300000     ...@..pA..PA..0A
    5134:	41100000 40e00000 41400000 40a00000     ...A...@..@A...@
    5144:	41500000 41000000 41300000 41600000     ..PA...A..0A..`A
    5154:	40400000 41500000 41200000 40e00000     ..@@..PA.. A...@
    5164:	41300000 41700000 40800000 41500000     ..0A..pA...@..PA
    5174:	41100000 41600000 40a00000 41300000     ...A..`A...@..0A
    5184:	40c00000 41500000 40e00000 41700000     ...@..PA...@..pA
    5194:	41000000 41100000 41200000 41300000     ...A...A.. A..0A
    51a4:	41400000 41500000 41600000 41700000     ..@A..PA..`A..pA
    51b4:	54524155 65725420 72656269 42202d20     UART Treiber - B
    51c4:	444e5245 202f204c 54414c47 00000a5a     ERNDL / GLATZ...
    51d4:	6b6e7546 6e6f6974 74726569 65482021     Funktioniert! He
    51e4:	6b657275 44202161 73207361 20646e69     ureka! Das sind 
    51f4:	5a203334 68636965 000a6e65 6f686345     43 Zeichen..Echo
    5204:	73657420 450a3a74 7265746e 20303120      test:.Enter 10 
    5214:	72616863 65746361 000a7372 00000a20     characters.. ...
    5224:	65636552 20657669 6573202d 7320646e     Receive - send s
    5234:	6e697274 65742067 0a3a7473 65746e45     tring test:.Ente
    5244:	20342072 72616863 65746361 000a7372     r 4 characters..
    5254:	65636552 20657669 6573202d 6220646e     Receive - send b
    5264:	65666675 65742072 0a3a7473 65746e45     uffer test:.Ente
    5274:	20352072 72616863 65746361 000a7372     r 5 characters..
    5284:	65636552 20657669 6573202d 6c20646e     Receive - send l
    5294:	20676e6f 69727473 7420676e 3a747365     ong string test:
    52a4:	746e450a 31207265 68632039 63617261     .Enter 19 charac
    52b4:	73726574 0000000a 206e6945 676e616c     ters....Ein lang
    52c4:	54207265 21747865 00000021              er Text!!...

000052d0 <_global_impure_ptr>:
    52d0:	40000010 00000043                       ...@C...
